
2.2_UART_PrintfTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005580  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000404  08005710  08005710  00015710  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b14  08005b14  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08005b14  08005b14  00015b14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005b1c  08005b1c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b1c  08005b1c  00015b1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005b20  08005b20  00015b20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08005b24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201dc  2**0
                  CONTENTS
 10 .bss          00000078  200001dc  200001dc  000201dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000254  20000254  000201dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008579  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000016fd  00000000  00000000  00028785  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000708  00000000  00000000  00029e88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000660  00000000  00000000  0002a590  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020f33  00000000  00000000  0002abf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000090b5  00000000  00000000  0004bb23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c3b07  00000000  00000000  00054bd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001186df  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002b9c  00000000  00000000  00118730  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080056f8 	.word	0x080056f8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	080056f8 	.word	0x080056f8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b974 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468e      	mov	lr, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14d      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4694      	mov	ip, r2
 8000bea:	d969      	bls.n	8000cc0 <__udivmoddi4+0xe8>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b152      	cbz	r2, 8000c08 <__udivmoddi4+0x30>
 8000bf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf6:	f1c2 0120 	rsb	r1, r2, #32
 8000bfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000bfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c02:	ea41 0e03 	orr.w	lr, r1, r3
 8000c06:	4094      	lsls	r4, r2
 8000c08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c0c:	0c21      	lsrs	r1, r4, #16
 8000c0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c12:	fa1f f78c 	uxth.w	r7, ip
 8000c16:	fb08 e316 	mls	r3, r8, r6, lr
 8000c1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c1e:	fb06 f107 	mul.w	r1, r6, r7
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2e:	f080 811f 	bcs.w	8000e70 <__udivmoddi4+0x298>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 811c 	bls.w	8000e70 <__udivmoddi4+0x298>
 8000c38:	3e02      	subs	r6, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 f707 	mul.w	r7, r0, r7
 8000c50:	42a7      	cmp	r7, r4
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x92>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5c:	f080 810a 	bcs.w	8000e74 <__udivmoddi4+0x29c>
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	f240 8107 	bls.w	8000e74 <__udivmoddi4+0x29c>
 8000c66:	4464      	add	r4, ip
 8000c68:	3802      	subs	r0, #2
 8000c6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6e:	1be4      	subs	r4, r4, r7
 8000c70:	2600      	movs	r6, #0
 8000c72:	b11d      	cbz	r5, 8000c7c <__udivmoddi4+0xa4>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c5 4300 	strd	r4, r3, [r5]
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0xc2>
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	f000 80ef 	beq.w	8000e6a <__udivmoddi4+0x292>
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c92:	4630      	mov	r0, r6
 8000c94:	4631      	mov	r1, r6
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f683 	clz	r6, r3
 8000c9e:	2e00      	cmp	r6, #0
 8000ca0:	d14a      	bne.n	8000d38 <__udivmoddi4+0x160>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd4>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80f9 	bhi.w	8000e9e <__udivmoddi4+0x2c6>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	469e      	mov	lr, r3
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	d0e0      	beq.n	8000c7c <__udivmoddi4+0xa4>
 8000cba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cbe:	e7dd      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xec>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 8092 	bne.w	8000df2 <__udivmoddi4+0x21a>
 8000cce:	eba1 010c 	sub.w	r1, r1, ip
 8000cd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd6:	fa1f fe8c 	uxth.w	lr, ip
 8000cda:	2601      	movs	r6, #1
 8000cdc:	0c20      	lsrs	r0, r4, #16
 8000cde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ce2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ce6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cea:	fb0e f003 	mul.w	r0, lr, r3
 8000cee:	4288      	cmp	r0, r1
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x12c>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x12a>
 8000cfc:	4288      	cmp	r0, r1
 8000cfe:	f200 80cb 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000d02:	4643      	mov	r3, r8
 8000d04:	1a09      	subs	r1, r1, r0
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d14:	fb0e fe00 	mul.w	lr, lr, r0
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x156>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d24:	d202      	bcs.n	8000d2c <__udivmoddi4+0x154>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	f200 80bb 	bhi.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	eba4 040e 	sub.w	r4, r4, lr
 8000d32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d36:	e79c      	b.n	8000c72 <__udivmoddi4+0x9a>
 8000d38:	f1c6 0720 	rsb	r7, r6, #32
 8000d3c:	40b3      	lsls	r3, r6
 8000d3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d46:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d4e:	431c      	orrs	r4, r3
 8000d50:	40f9      	lsrs	r1, r7
 8000d52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d56:	fa00 f306 	lsl.w	r3, r0, r6
 8000d5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d5e:	0c20      	lsrs	r0, r4, #16
 8000d60:	fa1f fe8c 	uxth.w	lr, ip
 8000d64:	fb09 1118 	mls	r1, r9, r8, r1
 8000d68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d70:	4288      	cmp	r0, r1
 8000d72:	fa02 f206 	lsl.w	r2, r2, r6
 8000d76:	d90b      	bls.n	8000d90 <__udivmoddi4+0x1b8>
 8000d78:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d80:	f080 8088 	bcs.w	8000e94 <__udivmoddi4+0x2bc>
 8000d84:	4288      	cmp	r0, r1
 8000d86:	f240 8085 	bls.w	8000e94 <__udivmoddi4+0x2bc>
 8000d8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8e:	4461      	add	r1, ip
 8000d90:	1a09      	subs	r1, r1, r0
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d98:	fb09 1110 	mls	r1, r9, r0, r1
 8000d9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000da0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da4:	458e      	cmp	lr, r1
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1e2>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db0:	d26c      	bcs.n	8000e8c <__udivmoddi4+0x2b4>
 8000db2:	458e      	cmp	lr, r1
 8000db4:	d96a      	bls.n	8000e8c <__udivmoddi4+0x2b4>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4461      	add	r1, ip
 8000dba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc2:	eba1 010e 	sub.w	r1, r1, lr
 8000dc6:	42a1      	cmp	r1, r4
 8000dc8:	46c8      	mov	r8, r9
 8000dca:	46a6      	mov	lr, r4
 8000dcc:	d356      	bcc.n	8000e7c <__udivmoddi4+0x2a4>
 8000dce:	d053      	beq.n	8000e78 <__udivmoddi4+0x2a0>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x212>
 8000dd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dda:	fa01 f707 	lsl.w	r7, r1, r7
 8000dde:	fa22 f306 	lsr.w	r3, r2, r6
 8000de2:	40f1      	lsrs	r1, r6
 8000de4:	431f      	orrs	r7, r3
 8000de6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dea:	2600      	movs	r6, #0
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	f1c2 0320 	rsb	r3, r2, #32
 8000df6:	40d8      	lsrs	r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa21 f303 	lsr.w	r3, r1, r3
 8000e00:	4091      	lsls	r1, r2
 8000e02:	4301      	orrs	r1, r0
 8000e04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e08:	fa1f fe8c 	uxth.w	lr, ip
 8000e0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e10:	fb07 3610 	mls	r6, r7, r0, r3
 8000e14:	0c0b      	lsrs	r3, r1, #16
 8000e16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	fa04 f402 	lsl.w	r4, r4, r2
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x260>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e2e:	d22f      	bcs.n	8000e90 <__udivmoddi4+0x2b8>
 8000e30:	429e      	cmp	r6, r3
 8000e32:	d92d      	bls.n	8000e90 <__udivmoddi4+0x2b8>
 8000e34:	3802      	subs	r0, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1b9b      	subs	r3, r3, r6
 8000e3a:	b289      	uxth	r1, r1
 8000e3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e40:	fb07 3316 	mls	r3, r7, r6, r3
 8000e44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e48:	fb06 f30e 	mul.w	r3, r6, lr
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x28a>
 8000e50:	eb1c 0101 	adds.w	r1, ip, r1
 8000e54:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e58:	d216      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d914      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5e:	3e02      	subs	r6, #2
 8000e60:	4461      	add	r1, ip
 8000e62:	1ac9      	subs	r1, r1, r3
 8000e64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e68:	e738      	b.n	8000cdc <__udivmoddi4+0x104>
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e705      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e3      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6f8      	b.n	8000c6a <__udivmoddi4+0x92>
 8000e78:	454b      	cmp	r3, r9
 8000e7a:	d2a9      	bcs.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7a3      	b.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e88:	4646      	mov	r6, r8
 8000e8a:	e7ea      	b.n	8000e62 <__udivmoddi4+0x28a>
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	e794      	b.n	8000dba <__udivmoddi4+0x1e2>
 8000e90:	4640      	mov	r0, r8
 8000e92:	e7d1      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e94:	46d0      	mov	r8, sl
 8000e96:	e77b      	b.n	8000d90 <__udivmoddi4+0x1b8>
 8000e98:	3b02      	subs	r3, #2
 8000e9a:	4461      	add	r1, ip
 8000e9c:	e732      	b.n	8000d04 <__udivmoddi4+0x12c>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e709      	b.n	8000cb6 <__udivmoddi4+0xde>
 8000ea2:	4464      	add	r4, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	e742      	b.n	8000d2e <__udivmoddi4+0x156>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b08a      	sub	sp, #40	; 0x28
 8000eb0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb2:	f107 0314 	add.w	r3, r7, #20
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	601a      	str	r2, [r3, #0]
 8000eba:	605a      	str	r2, [r3, #4]
 8000ebc:	609a      	str	r2, [r3, #8]
 8000ebe:	60da      	str	r2, [r3, #12]
 8000ec0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	613b      	str	r3, [r7, #16]
 8000ec6:	4b54      	ldr	r3, [pc, #336]	; (8001018 <MX_GPIO_Init+0x16c>)
 8000ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eca:	4a53      	ldr	r2, [pc, #332]	; (8001018 <MX_GPIO_Init+0x16c>)
 8000ecc:	f043 0310 	orr.w	r3, r3, #16
 8000ed0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ed2:	4b51      	ldr	r3, [pc, #324]	; (8001018 <MX_GPIO_Init+0x16c>)
 8000ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed6:	f003 0310 	and.w	r3, r3, #16
 8000eda:	613b      	str	r3, [r7, #16]
 8000edc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ede:	2300      	movs	r3, #0
 8000ee0:	60fb      	str	r3, [r7, #12]
 8000ee2:	4b4d      	ldr	r3, [pc, #308]	; (8001018 <MX_GPIO_Init+0x16c>)
 8000ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee6:	4a4c      	ldr	r2, [pc, #304]	; (8001018 <MX_GPIO_Init+0x16c>)
 8000ee8:	f043 0304 	orr.w	r3, r3, #4
 8000eec:	6313      	str	r3, [r2, #48]	; 0x30
 8000eee:	4b4a      	ldr	r3, [pc, #296]	; (8001018 <MX_GPIO_Init+0x16c>)
 8000ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef2:	f003 0304 	and.w	r3, r3, #4
 8000ef6:	60fb      	str	r3, [r7, #12]
 8000ef8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000efa:	2300      	movs	r3, #0
 8000efc:	60bb      	str	r3, [r7, #8]
 8000efe:	4b46      	ldr	r3, [pc, #280]	; (8001018 <MX_GPIO_Init+0x16c>)
 8000f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f02:	4a45      	ldr	r2, [pc, #276]	; (8001018 <MX_GPIO_Init+0x16c>)
 8000f04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f08:	6313      	str	r3, [r2, #48]	; 0x30
 8000f0a:	4b43      	ldr	r3, [pc, #268]	; (8001018 <MX_GPIO_Init+0x16c>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f12:	60bb      	str	r3, [r7, #8]
 8000f14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f16:	2300      	movs	r3, #0
 8000f18:	607b      	str	r3, [r7, #4]
 8000f1a:	4b3f      	ldr	r3, [pc, #252]	; (8001018 <MX_GPIO_Init+0x16c>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1e:	4a3e      	ldr	r2, [pc, #248]	; (8001018 <MX_GPIO_Init+0x16c>)
 8000f20:	f043 0302 	orr.w	r3, r3, #2
 8000f24:	6313      	str	r3, [r2, #48]	; 0x30
 8000f26:	4b3c      	ldr	r3, [pc, #240]	; (8001018 <MX_GPIO_Init+0x16c>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2a:	f003 0302 	and.w	r3, r3, #2
 8000f2e:	607b      	str	r3, [r7, #4]
 8000f30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f32:	2300      	movs	r3, #0
 8000f34:	603b      	str	r3, [r7, #0]
 8000f36:	4b38      	ldr	r3, [pc, #224]	; (8001018 <MX_GPIO_Init+0x16c>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3a:	4a37      	ldr	r2, [pc, #220]	; (8001018 <MX_GPIO_Init+0x16c>)
 8000f3c:	f043 0308 	orr.w	r3, r3, #8
 8000f40:	6313      	str	r3, [r2, #48]	; 0x30
 8000f42:	4b35      	ldr	r3, [pc, #212]	; (8001018 <MX_GPIO_Init+0x16c>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f46:	f003 0308 	and.w	r3, r3, #8
 8000f4a:	603b      	str	r3, [r7, #0]
 8000f4c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_5, GPIO_PIN_RESET);
 8000f4e:	2200      	movs	r2, #0
 8000f50:	2121      	movs	r1, #33	; 0x21
 8000f52:	4832      	ldr	r0, [pc, #200]	; (800101c <MX_GPIO_Init+0x170>)
 8000f54:	f000 fdfc 	bl	8001b50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8000f58:	2200      	movs	r2, #0
 8000f5a:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 8000f5e:	4830      	ldr	r0, [pc, #192]	; (8001020 <MX_GPIO_Init+0x174>)
 8000f60:	f000 fdf6 	bl	8001b50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8000f64:	2200      	movs	r2, #0
 8000f66:	2140      	movs	r1, #64	; 0x40
 8000f68:	482e      	ldr	r0, [pc, #184]	; (8001024 <MX_GPIO_Init+0x178>)
 8000f6a:	f000 fdf1 	bl	8001b50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000f6e:	2308      	movs	r3, #8
 8000f70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f72:	2300      	movs	r3, #0
 8000f74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f76:	2300      	movs	r3, #0
 8000f78:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f7a:	f107 0314 	add.w	r3, r7, #20
 8000f7e:	4619      	mov	r1, r3
 8000f80:	4829      	ldr	r0, [pc, #164]	; (8001028 <MX_GPIO_Init+0x17c>)
 8000f82:	f000 fc49 	bl	8001818 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000f86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f90:	2300      	movs	r3, #0
 8000f92:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f94:	f107 0314 	add.w	r3, r7, #20
 8000f98:	4619      	mov	r1, r3
 8000f9a:	4822      	ldr	r0, [pc, #136]	; (8001024 <MX_GPIO_Init+0x178>)
 8000f9c:	f000 fc3c 	bl	8001818 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5;
 8000fa0:	2321      	movs	r3, #33	; 0x21
 8000fa2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fac:	2300      	movs	r3, #0
 8000fae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fb0:	f107 0314 	add.w	r3, r7, #20
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	4819      	ldr	r0, [pc, #100]	; (800101c <MX_GPIO_Init+0x170>)
 8000fb8:	f000 fc2e 	bl	8001818 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD10 PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_4;
 8000fbc:	f44f 6382 	mov.w	r3, #1040	; 0x410
 8000fc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fca:	f107 0314 	add.w	r3, r7, #20
 8000fce:	4619      	mov	r1, r3
 8000fd0:	4813      	ldr	r0, [pc, #76]	; (8001020 <MX_GPIO_Init+0x174>)
 8000fd2:	f000 fc21 	bl	8001818 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8000fd6:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8000fda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fe8:	f107 0314 	add.w	r3, r7, #20
 8000fec:	4619      	mov	r1, r3
 8000fee:	480c      	ldr	r0, [pc, #48]	; (8001020 <MX_GPIO_Init+0x174>)
 8000ff0:	f000 fc12 	bl	8001818 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000ff4:	2340      	movs	r3, #64	; 0x40
 8000ff6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001000:	2300      	movs	r3, #0
 8001002:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001004:	f107 0314 	add.w	r3, r7, #20
 8001008:	4619      	mov	r1, r3
 800100a:	4806      	ldr	r0, [pc, #24]	; (8001024 <MX_GPIO_Init+0x178>)
 800100c:	f000 fc04 	bl	8001818 <HAL_GPIO_Init>

}
 8001010:	bf00      	nop
 8001012:	3728      	adds	r7, #40	; 0x28
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	40023800 	.word	0x40023800
 800101c:	40020400 	.word	0x40020400
 8001020:	40020c00 	.word	0x40020c00
 8001024:	40020800 	.word	0x40020800
 8001028:	40021000 	.word	0x40021000

0800102c <_write>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);

int _write(int file, char* p, int len)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b084      	sub	sp, #16
 8001030:	af00      	add	r7, sp, #0
 8001032:	60f8      	str	r0, [r7, #12]
 8001034:	60b9      	str	r1, [r7, #8]
 8001036:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart3, p, len, 10);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	b29a      	uxth	r2, r3
 800103c:	230a      	movs	r3, #10
 800103e:	68b9      	ldr	r1, [r7, #8]
 8001040:	4803      	ldr	r0, [pc, #12]	; (8001050 <_write+0x24>)
 8001042:	f001 fa84 	bl	800254e <HAL_UART_Transmit>
	return len;
 8001046:	687b      	ldr	r3, [r7, #4]
}
 8001048:	4618      	mov	r0, r3
 800104a:	3710      	adds	r7, #16
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	200001fc 	.word	0x200001fc

08001054 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001054:	b590      	push	{r4, r7, lr}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800105a:	f000 fa61 	bl	8001520 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800105e:	f000 f845 	bl	80010ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001062:	f7ff ff23 	bl	8000eac <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001066:	f000 f9bf 	bl	80013e8 <MX_USART3_UART_Init>

  /* USER CODE BEGIN 2 */
  	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 800106a:	2201      	movs	r2, #1
 800106c:	2140      	movs	r1, #64	; 0x40
 800106e:	481a      	ldr	r0, [pc, #104]	; (80010d8 <main+0x84>)
 8001070:	f000 fd6e 	bl	8001b50 <HAL_GPIO_WritePin>
  	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8001074:	2201      	movs	r2, #1
 8001076:	2101      	movs	r1, #1
 8001078:	4818      	ldr	r0, [pc, #96]	; (80010dc <main+0x88>)
 800107a:	f000 fd69 	bl	8001b50 <HAL_GPIO_WritePin>
  	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 800107e:	2201      	movs	r2, #1
 8001080:	2120      	movs	r1, #32
 8001082:	4816      	ldr	r0, [pc, #88]	; (80010dc <main+0x88>)
 8001084:	f000 fd64 	bl	8001b50 <HAL_GPIO_WritePin>

  	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8001088:	2201      	movs	r2, #1
 800108a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800108e:	4814      	ldr	r0, [pc, #80]	; (80010e0 <main+0x8c>)
 8001090:	f000 fd5e 	bl	8001b50 <HAL_GPIO_WritePin>
  	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8001094:	2201      	movs	r2, #1
 8001096:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800109a:	4811      	ldr	r0, [pc, #68]	; (80010e0 <main+0x8c>)
 800109c:	f000 fd58 	bl	8001b50 <HAL_GPIO_WritePin>
  	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 80010a0:	2201      	movs	r2, #1
 80010a2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010a6:	480e      	ldr	r0, [pc, #56]	; (80010e0 <main+0x8c>)
 80010a8:	f000 fd52 	bl	8001b50 <HAL_GPIO_WritePin>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  	  uint8_t a = 0;
 80010ac:	2300      	movs	r3, #0
 80010ae:	71fb      	strb	r3, [r7, #7]
  	  float f = 1.234;
 80010b0:	4b0c      	ldr	r3, [pc, #48]	; (80010e4 <main+0x90>)
 80010b2:	603b      	str	r3, [r7, #0]

  while (1)
  {
	  printf("Hello %d %f\n", a++, f);
 80010b4:	79fb      	ldrb	r3, [r7, #7]
 80010b6:	1c5a      	adds	r2, r3, #1
 80010b8:	71fa      	strb	r2, [r7, #7]
 80010ba:	461c      	mov	r4, r3
 80010bc:	6838      	ldr	r0, [r7, #0]
 80010be:	f7ff fa43 	bl	8000548 <__aeabi_f2d>
 80010c2:	4602      	mov	r2, r0
 80010c4:	460b      	mov	r3, r1
 80010c6:	4621      	mov	r1, r4
 80010c8:	4807      	ldr	r0, [pc, #28]	; (80010e8 <main+0x94>)
 80010ca:	f002 fa51 	bl	8003570 <iprintf>
	  HAL_Delay(1000);
 80010ce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010d2:	f000 fa97 	bl	8001604 <HAL_Delay>
	  printf("Hello %d %f\n", a++, f);
 80010d6:	e7ed      	b.n	80010b4 <main+0x60>
 80010d8:	40020800 	.word	0x40020800
 80010dc:	40020400 	.word	0x40020400
 80010e0:	40020c00 	.word	0x40020c00
 80010e4:	3f9df3b6 	.word	0x3f9df3b6
 80010e8:	08005710 	.word	0x08005710

080010ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b094      	sub	sp, #80	; 0x50
 80010f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010f2:	f107 0320 	add.w	r3, r7, #32
 80010f6:	2230      	movs	r2, #48	; 0x30
 80010f8:	2100      	movs	r1, #0
 80010fa:	4618      	mov	r0, r3
 80010fc:	f001 fdc6 	bl	8002c8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001100:	f107 030c 	add.w	r3, r7, #12
 8001104:	2200      	movs	r2, #0
 8001106:	601a      	str	r2, [r3, #0]
 8001108:	605a      	str	r2, [r3, #4]
 800110a:	609a      	str	r2, [r3, #8]
 800110c:	60da      	str	r2, [r3, #12]
 800110e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001110:	2300      	movs	r3, #0
 8001112:	60bb      	str	r3, [r7, #8]
 8001114:	4b28      	ldr	r3, [pc, #160]	; (80011b8 <SystemClock_Config+0xcc>)
 8001116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001118:	4a27      	ldr	r2, [pc, #156]	; (80011b8 <SystemClock_Config+0xcc>)
 800111a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800111e:	6413      	str	r3, [r2, #64]	; 0x40
 8001120:	4b25      	ldr	r3, [pc, #148]	; (80011b8 <SystemClock_Config+0xcc>)
 8001122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001124:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001128:	60bb      	str	r3, [r7, #8]
 800112a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800112c:	2300      	movs	r3, #0
 800112e:	607b      	str	r3, [r7, #4]
 8001130:	4b22      	ldr	r3, [pc, #136]	; (80011bc <SystemClock_Config+0xd0>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a21      	ldr	r2, [pc, #132]	; (80011bc <SystemClock_Config+0xd0>)
 8001136:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800113a:	6013      	str	r3, [r2, #0]
 800113c:	4b1f      	ldr	r3, [pc, #124]	; (80011bc <SystemClock_Config+0xd0>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001144:	607b      	str	r3, [r7, #4]
 8001146:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001148:	2301      	movs	r3, #1
 800114a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800114c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001150:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001152:	2302      	movs	r3, #2
 8001154:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001156:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800115a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800115c:	2304      	movs	r3, #4
 800115e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001160:	23a8      	movs	r3, #168	; 0xa8
 8001162:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001164:	2302      	movs	r3, #2
 8001166:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001168:	2304      	movs	r3, #4
 800116a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800116c:	f107 0320 	add.w	r3, r7, #32
 8001170:	4618      	mov	r0, r3
 8001172:	f000 fd07 	bl	8001b84 <HAL_RCC_OscConfig>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800117c:	f000 f820 	bl	80011c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001180:	230f      	movs	r3, #15
 8001182:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001184:	2302      	movs	r3, #2
 8001186:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001188:	2300      	movs	r3, #0
 800118a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800118c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001190:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001192:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001196:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001198:	f107 030c 	add.w	r3, r7, #12
 800119c:	2105      	movs	r1, #5
 800119e:	4618      	mov	r0, r3
 80011a0:	f000 ff68 	bl	8002074 <HAL_RCC_ClockConfig>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80011aa:	f000 f809 	bl	80011c0 <Error_Handler>
  }
}
 80011ae:	bf00      	nop
 80011b0:	3750      	adds	r7, #80	; 0x50
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	40023800 	.word	0x40023800
 80011bc:	40007000 	.word	0x40007000

080011c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011c4:	b672      	cpsid	i
}
 80011c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011c8:	e7fe      	b.n	80011c8 <Error_Handler+0x8>
	...

080011cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011d2:	2300      	movs	r3, #0
 80011d4:	607b      	str	r3, [r7, #4]
 80011d6:	4b10      	ldr	r3, [pc, #64]	; (8001218 <HAL_MspInit+0x4c>)
 80011d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011da:	4a0f      	ldr	r2, [pc, #60]	; (8001218 <HAL_MspInit+0x4c>)
 80011dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011e0:	6453      	str	r3, [r2, #68]	; 0x44
 80011e2:	4b0d      	ldr	r3, [pc, #52]	; (8001218 <HAL_MspInit+0x4c>)
 80011e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011ea:	607b      	str	r3, [r7, #4]
 80011ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011ee:	2300      	movs	r3, #0
 80011f0:	603b      	str	r3, [r7, #0]
 80011f2:	4b09      	ldr	r3, [pc, #36]	; (8001218 <HAL_MspInit+0x4c>)
 80011f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f6:	4a08      	ldr	r2, [pc, #32]	; (8001218 <HAL_MspInit+0x4c>)
 80011f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011fc:	6413      	str	r3, [r2, #64]	; 0x40
 80011fe:	4b06      	ldr	r3, [pc, #24]	; (8001218 <HAL_MspInit+0x4c>)
 8001200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001202:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001206:	603b      	str	r3, [r7, #0]
 8001208:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800120a:	bf00      	nop
 800120c:	370c      	adds	r7, #12
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop
 8001218:	40023800 	.word	0x40023800

0800121c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001220:	e7fe      	b.n	8001220 <NMI_Handler+0x4>

08001222 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001222:	b480      	push	{r7}
 8001224:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001226:	e7fe      	b.n	8001226 <HardFault_Handler+0x4>

08001228 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800122c:	e7fe      	b.n	800122c <MemManage_Handler+0x4>

0800122e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800122e:	b480      	push	{r7}
 8001230:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001232:	e7fe      	b.n	8001232 <BusFault_Handler+0x4>

08001234 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001238:	e7fe      	b.n	8001238 <UsageFault_Handler+0x4>

0800123a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800123a:	b480      	push	{r7}
 800123c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800123e:	bf00      	nop
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr

08001248 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800124c:	bf00      	nop
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr

08001256 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001256:	b480      	push	{r7}
 8001258:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800125a:	bf00      	nop
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr

08001264 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001268:	f000 f9ac 	bl	80015c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800126c:	bf00      	nop
 800126e:	bd80      	pop	{r7, pc}

08001270 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
	return 1;
 8001274:	2301      	movs	r3, #1
}
 8001276:	4618      	mov	r0, r3
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr

08001280 <_kill>:

int _kill(int pid, int sig)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
 8001288:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800128a:	f001 fcd5 	bl	8002c38 <__errno>
 800128e:	4603      	mov	r3, r0
 8001290:	2216      	movs	r2, #22
 8001292:	601a      	str	r2, [r3, #0]
	return -1;
 8001294:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001298:	4618      	mov	r0, r3
 800129a:	3708      	adds	r7, #8
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}

080012a0 <_exit>:

void _exit (int status)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80012a8:	f04f 31ff 	mov.w	r1, #4294967295
 80012ac:	6878      	ldr	r0, [r7, #4]
 80012ae:	f7ff ffe7 	bl	8001280 <_kill>
	while (1) {}		/* Make sure we hang here */
 80012b2:	e7fe      	b.n	80012b2 <_exit+0x12>

080012b4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b086      	sub	sp, #24
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	60f8      	str	r0, [r7, #12]
 80012bc:	60b9      	str	r1, [r7, #8]
 80012be:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012c0:	2300      	movs	r3, #0
 80012c2:	617b      	str	r3, [r7, #20]
 80012c4:	e00a      	b.n	80012dc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80012c6:	f3af 8000 	nop.w
 80012ca:	4601      	mov	r1, r0
 80012cc:	68bb      	ldr	r3, [r7, #8]
 80012ce:	1c5a      	adds	r2, r3, #1
 80012d0:	60ba      	str	r2, [r7, #8]
 80012d2:	b2ca      	uxtb	r2, r1
 80012d4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	3301      	adds	r3, #1
 80012da:	617b      	str	r3, [r7, #20]
 80012dc:	697a      	ldr	r2, [r7, #20]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	429a      	cmp	r2, r3
 80012e2:	dbf0      	blt.n	80012c6 <_read+0x12>
	}

return len;
 80012e4:	687b      	ldr	r3, [r7, #4]
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3718      	adds	r7, #24
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}

080012ee <_close>:
	}
	return len;
}

int _close(int file)
{
 80012ee:	b480      	push	{r7}
 80012f0:	b083      	sub	sp, #12
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	6078      	str	r0, [r7, #4]
	return -1;
 80012f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	370c      	adds	r7, #12
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr

08001306 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001306:	b480      	push	{r7}
 8001308:	b083      	sub	sp, #12
 800130a:	af00      	add	r7, sp, #0
 800130c:	6078      	str	r0, [r7, #4]
 800130e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001316:	605a      	str	r2, [r3, #4]
	return 0;
 8001318:	2300      	movs	r3, #0
}
 800131a:	4618      	mov	r0, r3
 800131c:	370c      	adds	r7, #12
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr

08001326 <_isatty>:

int _isatty(int file)
{
 8001326:	b480      	push	{r7}
 8001328:	b083      	sub	sp, #12
 800132a:	af00      	add	r7, sp, #0
 800132c:	6078      	str	r0, [r7, #4]
	return 1;
 800132e:	2301      	movs	r3, #1
}
 8001330:	4618      	mov	r0, r3
 8001332:	370c      	adds	r7, #12
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr

0800133c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800133c:	b480      	push	{r7}
 800133e:	b085      	sub	sp, #20
 8001340:	af00      	add	r7, sp, #0
 8001342:	60f8      	str	r0, [r7, #12]
 8001344:	60b9      	str	r1, [r7, #8]
 8001346:	607a      	str	r2, [r7, #4]
	return 0;
 8001348:	2300      	movs	r3, #0
}
 800134a:	4618      	mov	r0, r3
 800134c:	3714      	adds	r7, #20
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr
	...

08001358 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b086      	sub	sp, #24
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001360:	4a14      	ldr	r2, [pc, #80]	; (80013b4 <_sbrk+0x5c>)
 8001362:	4b15      	ldr	r3, [pc, #84]	; (80013b8 <_sbrk+0x60>)
 8001364:	1ad3      	subs	r3, r2, r3
 8001366:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800136c:	4b13      	ldr	r3, [pc, #76]	; (80013bc <_sbrk+0x64>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d102      	bne.n	800137a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001374:	4b11      	ldr	r3, [pc, #68]	; (80013bc <_sbrk+0x64>)
 8001376:	4a12      	ldr	r2, [pc, #72]	; (80013c0 <_sbrk+0x68>)
 8001378:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800137a:	4b10      	ldr	r3, [pc, #64]	; (80013bc <_sbrk+0x64>)
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	4413      	add	r3, r2
 8001382:	693a      	ldr	r2, [r7, #16]
 8001384:	429a      	cmp	r2, r3
 8001386:	d207      	bcs.n	8001398 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001388:	f001 fc56 	bl	8002c38 <__errno>
 800138c:	4603      	mov	r3, r0
 800138e:	220c      	movs	r2, #12
 8001390:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001392:	f04f 33ff 	mov.w	r3, #4294967295
 8001396:	e009      	b.n	80013ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001398:	4b08      	ldr	r3, [pc, #32]	; (80013bc <_sbrk+0x64>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800139e:	4b07      	ldr	r3, [pc, #28]	; (80013bc <_sbrk+0x64>)
 80013a0:	681a      	ldr	r2, [r3, #0]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	4413      	add	r3, r2
 80013a6:	4a05      	ldr	r2, [pc, #20]	; (80013bc <_sbrk+0x64>)
 80013a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013aa:	68fb      	ldr	r3, [r7, #12]
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	3718      	adds	r7, #24
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	20020000 	.word	0x20020000
 80013b8:	00000400 	.word	0x00000400
 80013bc:	200001f8 	.word	0x200001f8
 80013c0:	20000258 	.word	0x20000258

080013c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013c8:	4b06      	ldr	r3, [pc, #24]	; (80013e4 <SystemInit+0x20>)
 80013ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013ce:	4a05      	ldr	r2, [pc, #20]	; (80013e4 <SystemInit+0x20>)
 80013d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013d8:	bf00      	nop
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
 80013e2:	bf00      	nop
 80013e4:	e000ed00 	.word	0xe000ed00

080013e8 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80013ec:	4b11      	ldr	r3, [pc, #68]	; (8001434 <MX_USART3_UART_Init+0x4c>)
 80013ee:	4a12      	ldr	r2, [pc, #72]	; (8001438 <MX_USART3_UART_Init+0x50>)
 80013f0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80013f2:	4b10      	ldr	r3, [pc, #64]	; (8001434 <MX_USART3_UART_Init+0x4c>)
 80013f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013f8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80013fa:	4b0e      	ldr	r3, [pc, #56]	; (8001434 <MX_USART3_UART_Init+0x4c>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001400:	4b0c      	ldr	r3, [pc, #48]	; (8001434 <MX_USART3_UART_Init+0x4c>)
 8001402:	2200      	movs	r2, #0
 8001404:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001406:	4b0b      	ldr	r3, [pc, #44]	; (8001434 <MX_USART3_UART_Init+0x4c>)
 8001408:	2200      	movs	r2, #0
 800140a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800140c:	4b09      	ldr	r3, [pc, #36]	; (8001434 <MX_USART3_UART_Init+0x4c>)
 800140e:	220c      	movs	r2, #12
 8001410:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001412:	4b08      	ldr	r3, [pc, #32]	; (8001434 <MX_USART3_UART_Init+0x4c>)
 8001414:	2200      	movs	r2, #0
 8001416:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001418:	4b06      	ldr	r3, [pc, #24]	; (8001434 <MX_USART3_UART_Init+0x4c>)
 800141a:	2200      	movs	r2, #0
 800141c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800141e:	4805      	ldr	r0, [pc, #20]	; (8001434 <MX_USART3_UART_Init+0x4c>)
 8001420:	f001 f848 	bl	80024b4 <HAL_UART_Init>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800142a:	f7ff fec9 	bl	80011c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800142e:	bf00      	nop
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	200001fc 	.word	0x200001fc
 8001438:	40004800 	.word	0x40004800

0800143c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b08a      	sub	sp, #40	; 0x28
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001444:	f107 0314 	add.w	r3, r7, #20
 8001448:	2200      	movs	r2, #0
 800144a:	601a      	str	r2, [r3, #0]
 800144c:	605a      	str	r2, [r3, #4]
 800144e:	609a      	str	r2, [r3, #8]
 8001450:	60da      	str	r2, [r3, #12]
 8001452:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a19      	ldr	r2, [pc, #100]	; (80014c0 <HAL_UART_MspInit+0x84>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d12c      	bne.n	80014b8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800145e:	2300      	movs	r3, #0
 8001460:	613b      	str	r3, [r7, #16]
 8001462:	4b18      	ldr	r3, [pc, #96]	; (80014c4 <HAL_UART_MspInit+0x88>)
 8001464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001466:	4a17      	ldr	r2, [pc, #92]	; (80014c4 <HAL_UART_MspInit+0x88>)
 8001468:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800146c:	6413      	str	r3, [r2, #64]	; 0x40
 800146e:	4b15      	ldr	r3, [pc, #84]	; (80014c4 <HAL_UART_MspInit+0x88>)
 8001470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001472:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001476:	613b      	str	r3, [r7, #16]
 8001478:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800147a:	2300      	movs	r3, #0
 800147c:	60fb      	str	r3, [r7, #12]
 800147e:	4b11      	ldr	r3, [pc, #68]	; (80014c4 <HAL_UART_MspInit+0x88>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001482:	4a10      	ldr	r2, [pc, #64]	; (80014c4 <HAL_UART_MspInit+0x88>)
 8001484:	f043 0308 	orr.w	r3, r3, #8
 8001488:	6313      	str	r3, [r2, #48]	; 0x30
 800148a:	4b0e      	ldr	r3, [pc, #56]	; (80014c4 <HAL_UART_MspInit+0x88>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148e:	f003 0308 	and.w	r3, r3, #8
 8001492:	60fb      	str	r3, [r7, #12]
 8001494:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001496:	f44f 7340 	mov.w	r3, #768	; 0x300
 800149a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800149c:	2302      	movs	r3, #2
 800149e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a0:	2300      	movs	r3, #0
 80014a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014a4:	2303      	movs	r3, #3
 80014a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80014a8:	2307      	movs	r3, #7
 80014aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014ac:	f107 0314 	add.w	r3, r7, #20
 80014b0:	4619      	mov	r1, r3
 80014b2:	4805      	ldr	r0, [pc, #20]	; (80014c8 <HAL_UART_MspInit+0x8c>)
 80014b4:	f000 f9b0 	bl	8001818 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80014b8:	bf00      	nop
 80014ba:	3728      	adds	r7, #40	; 0x28
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	40004800 	.word	0x40004800
 80014c4:	40023800 	.word	0x40023800
 80014c8:	40020c00 	.word	0x40020c00

080014cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80014cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001504 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014d0:	480d      	ldr	r0, [pc, #52]	; (8001508 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80014d2:	490e      	ldr	r1, [pc, #56]	; (800150c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80014d4:	4a0e      	ldr	r2, [pc, #56]	; (8001510 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014d8:	e002      	b.n	80014e0 <LoopCopyDataInit>

080014da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014de:	3304      	adds	r3, #4

080014e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014e4:	d3f9      	bcc.n	80014da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014e6:	4a0b      	ldr	r2, [pc, #44]	; (8001514 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80014e8:	4c0b      	ldr	r4, [pc, #44]	; (8001518 <LoopFillZerobss+0x26>)
  movs r3, #0
 80014ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014ec:	e001      	b.n	80014f2 <LoopFillZerobss>

080014ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014f0:	3204      	adds	r2, #4

080014f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014f4:	d3fb      	bcc.n	80014ee <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80014f6:	f7ff ff65 	bl	80013c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014fa:	f001 fba3 	bl	8002c44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014fe:	f7ff fda9 	bl	8001054 <main>
  bx  lr    
 8001502:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001504:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001508:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800150c:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001510:	08005b24 	.word	0x08005b24
  ldr r2, =_sbss
 8001514:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001518:	20000254 	.word	0x20000254

0800151c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800151c:	e7fe      	b.n	800151c <ADC_IRQHandler>
	...

08001520 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001524:	4b0e      	ldr	r3, [pc, #56]	; (8001560 <HAL_Init+0x40>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a0d      	ldr	r2, [pc, #52]	; (8001560 <HAL_Init+0x40>)
 800152a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800152e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001530:	4b0b      	ldr	r3, [pc, #44]	; (8001560 <HAL_Init+0x40>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a0a      	ldr	r2, [pc, #40]	; (8001560 <HAL_Init+0x40>)
 8001536:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800153a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800153c:	4b08      	ldr	r3, [pc, #32]	; (8001560 <HAL_Init+0x40>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a07      	ldr	r2, [pc, #28]	; (8001560 <HAL_Init+0x40>)
 8001542:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001546:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001548:	2003      	movs	r0, #3
 800154a:	f000 f931 	bl	80017b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800154e:	200f      	movs	r0, #15
 8001550:	f000 f808 	bl	8001564 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001554:	f7ff fe3a 	bl	80011cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001558:	2300      	movs	r3, #0
}
 800155a:	4618      	mov	r0, r3
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	40023c00 	.word	0x40023c00

08001564 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800156c:	4b12      	ldr	r3, [pc, #72]	; (80015b8 <HAL_InitTick+0x54>)
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	4b12      	ldr	r3, [pc, #72]	; (80015bc <HAL_InitTick+0x58>)
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	4619      	mov	r1, r3
 8001576:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800157a:	fbb3 f3f1 	udiv	r3, r3, r1
 800157e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001582:	4618      	mov	r0, r3
 8001584:	f000 f93b 	bl	80017fe <HAL_SYSTICK_Config>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800158e:	2301      	movs	r3, #1
 8001590:	e00e      	b.n	80015b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2b0f      	cmp	r3, #15
 8001596:	d80a      	bhi.n	80015ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001598:	2200      	movs	r2, #0
 800159a:	6879      	ldr	r1, [r7, #4]
 800159c:	f04f 30ff 	mov.w	r0, #4294967295
 80015a0:	f000 f911 	bl	80017c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015a4:	4a06      	ldr	r2, [pc, #24]	; (80015c0 <HAL_InitTick+0x5c>)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015aa:	2300      	movs	r3, #0
 80015ac:	e000      	b.n	80015b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015ae:	2301      	movs	r3, #1
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	3708      	adds	r7, #8
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	20000000 	.word	0x20000000
 80015bc:	20000008 	.word	0x20000008
 80015c0:	20000004 	.word	0x20000004

080015c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015c8:	4b06      	ldr	r3, [pc, #24]	; (80015e4 <HAL_IncTick+0x20>)
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	461a      	mov	r2, r3
 80015ce:	4b06      	ldr	r3, [pc, #24]	; (80015e8 <HAL_IncTick+0x24>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4413      	add	r3, r2
 80015d4:	4a04      	ldr	r2, [pc, #16]	; (80015e8 <HAL_IncTick+0x24>)
 80015d6:	6013      	str	r3, [r2, #0]
}
 80015d8:	bf00      	nop
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	20000008 	.word	0x20000008
 80015e8:	20000240 	.word	0x20000240

080015ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  return uwTick;
 80015f0:	4b03      	ldr	r3, [pc, #12]	; (8001600 <HAL_GetTick+0x14>)
 80015f2:	681b      	ldr	r3, [r3, #0]
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	20000240 	.word	0x20000240

08001604 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b084      	sub	sp, #16
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800160c:	f7ff ffee 	bl	80015ec <HAL_GetTick>
 8001610:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	f1b3 3fff 	cmp.w	r3, #4294967295
 800161c:	d005      	beq.n	800162a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800161e:	4b0a      	ldr	r3, [pc, #40]	; (8001648 <HAL_Delay+0x44>)
 8001620:	781b      	ldrb	r3, [r3, #0]
 8001622:	461a      	mov	r2, r3
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	4413      	add	r3, r2
 8001628:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800162a:	bf00      	nop
 800162c:	f7ff ffde 	bl	80015ec <HAL_GetTick>
 8001630:	4602      	mov	r2, r0
 8001632:	68bb      	ldr	r3, [r7, #8]
 8001634:	1ad3      	subs	r3, r2, r3
 8001636:	68fa      	ldr	r2, [r7, #12]
 8001638:	429a      	cmp	r2, r3
 800163a:	d8f7      	bhi.n	800162c <HAL_Delay+0x28>
  {
  }
}
 800163c:	bf00      	nop
 800163e:	bf00      	nop
 8001640:	3710      	adds	r7, #16
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	20000008 	.word	0x20000008

0800164c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800164c:	b480      	push	{r7}
 800164e:	b085      	sub	sp, #20
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	f003 0307 	and.w	r3, r3, #7
 800165a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800165c:	4b0c      	ldr	r3, [pc, #48]	; (8001690 <__NVIC_SetPriorityGrouping+0x44>)
 800165e:	68db      	ldr	r3, [r3, #12]
 8001660:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001662:	68ba      	ldr	r2, [r7, #8]
 8001664:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001668:	4013      	ands	r3, r2
 800166a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001670:	68bb      	ldr	r3, [r7, #8]
 8001672:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001674:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001678:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800167c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800167e:	4a04      	ldr	r2, [pc, #16]	; (8001690 <__NVIC_SetPriorityGrouping+0x44>)
 8001680:	68bb      	ldr	r3, [r7, #8]
 8001682:	60d3      	str	r3, [r2, #12]
}
 8001684:	bf00      	nop
 8001686:	3714      	adds	r7, #20
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr
 8001690:	e000ed00 	.word	0xe000ed00

08001694 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001698:	4b04      	ldr	r3, [pc, #16]	; (80016ac <__NVIC_GetPriorityGrouping+0x18>)
 800169a:	68db      	ldr	r3, [r3, #12]
 800169c:	0a1b      	lsrs	r3, r3, #8
 800169e:	f003 0307 	and.w	r3, r3, #7
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr
 80016ac:	e000ed00 	.word	0xe000ed00

080016b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	4603      	mov	r3, r0
 80016b8:	6039      	str	r1, [r7, #0]
 80016ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	db0a      	blt.n	80016da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	b2da      	uxtb	r2, r3
 80016c8:	490c      	ldr	r1, [pc, #48]	; (80016fc <__NVIC_SetPriority+0x4c>)
 80016ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ce:	0112      	lsls	r2, r2, #4
 80016d0:	b2d2      	uxtb	r2, r2
 80016d2:	440b      	add	r3, r1
 80016d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016d8:	e00a      	b.n	80016f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	b2da      	uxtb	r2, r3
 80016de:	4908      	ldr	r1, [pc, #32]	; (8001700 <__NVIC_SetPriority+0x50>)
 80016e0:	79fb      	ldrb	r3, [r7, #7]
 80016e2:	f003 030f 	and.w	r3, r3, #15
 80016e6:	3b04      	subs	r3, #4
 80016e8:	0112      	lsls	r2, r2, #4
 80016ea:	b2d2      	uxtb	r2, r2
 80016ec:	440b      	add	r3, r1
 80016ee:	761a      	strb	r2, [r3, #24]
}
 80016f0:	bf00      	nop
 80016f2:	370c      	adds	r7, #12
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr
 80016fc:	e000e100 	.word	0xe000e100
 8001700:	e000ed00 	.word	0xe000ed00

08001704 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001704:	b480      	push	{r7}
 8001706:	b089      	sub	sp, #36	; 0x24
 8001708:	af00      	add	r7, sp, #0
 800170a:	60f8      	str	r0, [r7, #12]
 800170c:	60b9      	str	r1, [r7, #8]
 800170e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	f003 0307 	and.w	r3, r3, #7
 8001716:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001718:	69fb      	ldr	r3, [r7, #28]
 800171a:	f1c3 0307 	rsb	r3, r3, #7
 800171e:	2b04      	cmp	r3, #4
 8001720:	bf28      	it	cs
 8001722:	2304      	movcs	r3, #4
 8001724:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001726:	69fb      	ldr	r3, [r7, #28]
 8001728:	3304      	adds	r3, #4
 800172a:	2b06      	cmp	r3, #6
 800172c:	d902      	bls.n	8001734 <NVIC_EncodePriority+0x30>
 800172e:	69fb      	ldr	r3, [r7, #28]
 8001730:	3b03      	subs	r3, #3
 8001732:	e000      	b.n	8001736 <NVIC_EncodePriority+0x32>
 8001734:	2300      	movs	r3, #0
 8001736:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001738:	f04f 32ff 	mov.w	r2, #4294967295
 800173c:	69bb      	ldr	r3, [r7, #24]
 800173e:	fa02 f303 	lsl.w	r3, r2, r3
 8001742:	43da      	mvns	r2, r3
 8001744:	68bb      	ldr	r3, [r7, #8]
 8001746:	401a      	ands	r2, r3
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800174c:	f04f 31ff 	mov.w	r1, #4294967295
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	fa01 f303 	lsl.w	r3, r1, r3
 8001756:	43d9      	mvns	r1, r3
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800175c:	4313      	orrs	r3, r2
         );
}
 800175e:	4618      	mov	r0, r3
 8001760:	3724      	adds	r7, #36	; 0x24
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
	...

0800176c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	3b01      	subs	r3, #1
 8001778:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800177c:	d301      	bcc.n	8001782 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800177e:	2301      	movs	r3, #1
 8001780:	e00f      	b.n	80017a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001782:	4a0a      	ldr	r2, [pc, #40]	; (80017ac <SysTick_Config+0x40>)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	3b01      	subs	r3, #1
 8001788:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800178a:	210f      	movs	r1, #15
 800178c:	f04f 30ff 	mov.w	r0, #4294967295
 8001790:	f7ff ff8e 	bl	80016b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001794:	4b05      	ldr	r3, [pc, #20]	; (80017ac <SysTick_Config+0x40>)
 8001796:	2200      	movs	r2, #0
 8001798:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800179a:	4b04      	ldr	r3, [pc, #16]	; (80017ac <SysTick_Config+0x40>)
 800179c:	2207      	movs	r2, #7
 800179e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017a0:	2300      	movs	r3, #0
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3708      	adds	r7, #8
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	e000e010 	.word	0xe000e010

080017b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b082      	sub	sp, #8
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017b8:	6878      	ldr	r0, [r7, #4]
 80017ba:	f7ff ff47 	bl	800164c <__NVIC_SetPriorityGrouping>
}
 80017be:	bf00      	nop
 80017c0:	3708      	adds	r7, #8
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}

080017c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017c6:	b580      	push	{r7, lr}
 80017c8:	b086      	sub	sp, #24
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	4603      	mov	r3, r0
 80017ce:	60b9      	str	r1, [r7, #8]
 80017d0:	607a      	str	r2, [r7, #4]
 80017d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017d4:	2300      	movs	r3, #0
 80017d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017d8:	f7ff ff5c 	bl	8001694 <__NVIC_GetPriorityGrouping>
 80017dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017de:	687a      	ldr	r2, [r7, #4]
 80017e0:	68b9      	ldr	r1, [r7, #8]
 80017e2:	6978      	ldr	r0, [r7, #20]
 80017e4:	f7ff ff8e 	bl	8001704 <NVIC_EncodePriority>
 80017e8:	4602      	mov	r2, r0
 80017ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017ee:	4611      	mov	r1, r2
 80017f0:	4618      	mov	r0, r3
 80017f2:	f7ff ff5d 	bl	80016b0 <__NVIC_SetPriority>
}
 80017f6:	bf00      	nop
 80017f8:	3718      	adds	r7, #24
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}

080017fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017fe:	b580      	push	{r7, lr}
 8001800:	b082      	sub	sp, #8
 8001802:	af00      	add	r7, sp, #0
 8001804:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001806:	6878      	ldr	r0, [r7, #4]
 8001808:	f7ff ffb0 	bl	800176c <SysTick_Config>
 800180c:	4603      	mov	r3, r0
}
 800180e:	4618      	mov	r0, r3
 8001810:	3708      	adds	r7, #8
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
	...

08001818 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001818:	b480      	push	{r7}
 800181a:	b089      	sub	sp, #36	; 0x24
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
 8001820:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001822:	2300      	movs	r3, #0
 8001824:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001826:	2300      	movs	r3, #0
 8001828:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800182a:	2300      	movs	r3, #0
 800182c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800182e:	2300      	movs	r3, #0
 8001830:	61fb      	str	r3, [r7, #28]
 8001832:	e16b      	b.n	8001b0c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001834:	2201      	movs	r2, #1
 8001836:	69fb      	ldr	r3, [r7, #28]
 8001838:	fa02 f303 	lsl.w	r3, r2, r3
 800183c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	697a      	ldr	r2, [r7, #20]
 8001844:	4013      	ands	r3, r2
 8001846:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001848:	693a      	ldr	r2, [r7, #16]
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	429a      	cmp	r2, r3
 800184e:	f040 815a 	bne.w	8001b06 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	f003 0303 	and.w	r3, r3, #3
 800185a:	2b01      	cmp	r3, #1
 800185c:	d005      	beq.n	800186a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001866:	2b02      	cmp	r3, #2
 8001868:	d130      	bne.n	80018cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001870:	69fb      	ldr	r3, [r7, #28]
 8001872:	005b      	lsls	r3, r3, #1
 8001874:	2203      	movs	r2, #3
 8001876:	fa02 f303 	lsl.w	r3, r2, r3
 800187a:	43db      	mvns	r3, r3
 800187c:	69ba      	ldr	r2, [r7, #24]
 800187e:	4013      	ands	r3, r2
 8001880:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	68da      	ldr	r2, [r3, #12]
 8001886:	69fb      	ldr	r3, [r7, #28]
 8001888:	005b      	lsls	r3, r3, #1
 800188a:	fa02 f303 	lsl.w	r3, r2, r3
 800188e:	69ba      	ldr	r2, [r7, #24]
 8001890:	4313      	orrs	r3, r2
 8001892:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	69ba      	ldr	r2, [r7, #24]
 8001898:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018a0:	2201      	movs	r2, #1
 80018a2:	69fb      	ldr	r3, [r7, #28]
 80018a4:	fa02 f303 	lsl.w	r3, r2, r3
 80018a8:	43db      	mvns	r3, r3
 80018aa:	69ba      	ldr	r2, [r7, #24]
 80018ac:	4013      	ands	r3, r2
 80018ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	091b      	lsrs	r3, r3, #4
 80018b6:	f003 0201 	and.w	r2, r3, #1
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	fa02 f303 	lsl.w	r3, r2, r3
 80018c0:	69ba      	ldr	r2, [r7, #24]
 80018c2:	4313      	orrs	r3, r2
 80018c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	69ba      	ldr	r2, [r7, #24]
 80018ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	f003 0303 	and.w	r3, r3, #3
 80018d4:	2b03      	cmp	r3, #3
 80018d6:	d017      	beq.n	8001908 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	68db      	ldr	r3, [r3, #12]
 80018dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	005b      	lsls	r3, r3, #1
 80018e2:	2203      	movs	r2, #3
 80018e4:	fa02 f303 	lsl.w	r3, r2, r3
 80018e8:	43db      	mvns	r3, r3
 80018ea:	69ba      	ldr	r2, [r7, #24]
 80018ec:	4013      	ands	r3, r2
 80018ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	689a      	ldr	r2, [r3, #8]
 80018f4:	69fb      	ldr	r3, [r7, #28]
 80018f6:	005b      	lsls	r3, r3, #1
 80018f8:	fa02 f303 	lsl.w	r3, r2, r3
 80018fc:	69ba      	ldr	r2, [r7, #24]
 80018fe:	4313      	orrs	r3, r2
 8001900:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	69ba      	ldr	r2, [r7, #24]
 8001906:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	f003 0303 	and.w	r3, r3, #3
 8001910:	2b02      	cmp	r3, #2
 8001912:	d123      	bne.n	800195c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001914:	69fb      	ldr	r3, [r7, #28]
 8001916:	08da      	lsrs	r2, r3, #3
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	3208      	adds	r2, #8
 800191c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001920:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	f003 0307 	and.w	r3, r3, #7
 8001928:	009b      	lsls	r3, r3, #2
 800192a:	220f      	movs	r2, #15
 800192c:	fa02 f303 	lsl.w	r3, r2, r3
 8001930:	43db      	mvns	r3, r3
 8001932:	69ba      	ldr	r2, [r7, #24]
 8001934:	4013      	ands	r3, r2
 8001936:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	691a      	ldr	r2, [r3, #16]
 800193c:	69fb      	ldr	r3, [r7, #28]
 800193e:	f003 0307 	and.w	r3, r3, #7
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	fa02 f303 	lsl.w	r3, r2, r3
 8001948:	69ba      	ldr	r2, [r7, #24]
 800194a:	4313      	orrs	r3, r2
 800194c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	08da      	lsrs	r2, r3, #3
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	3208      	adds	r2, #8
 8001956:	69b9      	ldr	r1, [r7, #24]
 8001958:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001962:	69fb      	ldr	r3, [r7, #28]
 8001964:	005b      	lsls	r3, r3, #1
 8001966:	2203      	movs	r2, #3
 8001968:	fa02 f303 	lsl.w	r3, r2, r3
 800196c:	43db      	mvns	r3, r3
 800196e:	69ba      	ldr	r2, [r7, #24]
 8001970:	4013      	ands	r3, r2
 8001972:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	f003 0203 	and.w	r2, r3, #3
 800197c:	69fb      	ldr	r3, [r7, #28]
 800197e:	005b      	lsls	r3, r3, #1
 8001980:	fa02 f303 	lsl.w	r3, r2, r3
 8001984:	69ba      	ldr	r2, [r7, #24]
 8001986:	4313      	orrs	r3, r2
 8001988:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	69ba      	ldr	r2, [r7, #24]
 800198e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001998:	2b00      	cmp	r3, #0
 800199a:	f000 80b4 	beq.w	8001b06 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800199e:	2300      	movs	r3, #0
 80019a0:	60fb      	str	r3, [r7, #12]
 80019a2:	4b60      	ldr	r3, [pc, #384]	; (8001b24 <HAL_GPIO_Init+0x30c>)
 80019a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019a6:	4a5f      	ldr	r2, [pc, #380]	; (8001b24 <HAL_GPIO_Init+0x30c>)
 80019a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019ac:	6453      	str	r3, [r2, #68]	; 0x44
 80019ae:	4b5d      	ldr	r3, [pc, #372]	; (8001b24 <HAL_GPIO_Init+0x30c>)
 80019b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019b6:	60fb      	str	r3, [r7, #12]
 80019b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019ba:	4a5b      	ldr	r2, [pc, #364]	; (8001b28 <HAL_GPIO_Init+0x310>)
 80019bc:	69fb      	ldr	r3, [r7, #28]
 80019be:	089b      	lsrs	r3, r3, #2
 80019c0:	3302      	adds	r3, #2
 80019c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80019c8:	69fb      	ldr	r3, [r7, #28]
 80019ca:	f003 0303 	and.w	r3, r3, #3
 80019ce:	009b      	lsls	r3, r3, #2
 80019d0:	220f      	movs	r2, #15
 80019d2:	fa02 f303 	lsl.w	r3, r2, r3
 80019d6:	43db      	mvns	r3, r3
 80019d8:	69ba      	ldr	r2, [r7, #24]
 80019da:	4013      	ands	r3, r2
 80019dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	4a52      	ldr	r2, [pc, #328]	; (8001b2c <HAL_GPIO_Init+0x314>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d02b      	beq.n	8001a3e <HAL_GPIO_Init+0x226>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	4a51      	ldr	r2, [pc, #324]	; (8001b30 <HAL_GPIO_Init+0x318>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d025      	beq.n	8001a3a <HAL_GPIO_Init+0x222>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	4a50      	ldr	r2, [pc, #320]	; (8001b34 <HAL_GPIO_Init+0x31c>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d01f      	beq.n	8001a36 <HAL_GPIO_Init+0x21e>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	4a4f      	ldr	r2, [pc, #316]	; (8001b38 <HAL_GPIO_Init+0x320>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d019      	beq.n	8001a32 <HAL_GPIO_Init+0x21a>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	4a4e      	ldr	r2, [pc, #312]	; (8001b3c <HAL_GPIO_Init+0x324>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d013      	beq.n	8001a2e <HAL_GPIO_Init+0x216>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	4a4d      	ldr	r2, [pc, #308]	; (8001b40 <HAL_GPIO_Init+0x328>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d00d      	beq.n	8001a2a <HAL_GPIO_Init+0x212>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	4a4c      	ldr	r2, [pc, #304]	; (8001b44 <HAL_GPIO_Init+0x32c>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d007      	beq.n	8001a26 <HAL_GPIO_Init+0x20e>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	4a4b      	ldr	r2, [pc, #300]	; (8001b48 <HAL_GPIO_Init+0x330>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d101      	bne.n	8001a22 <HAL_GPIO_Init+0x20a>
 8001a1e:	2307      	movs	r3, #7
 8001a20:	e00e      	b.n	8001a40 <HAL_GPIO_Init+0x228>
 8001a22:	2308      	movs	r3, #8
 8001a24:	e00c      	b.n	8001a40 <HAL_GPIO_Init+0x228>
 8001a26:	2306      	movs	r3, #6
 8001a28:	e00a      	b.n	8001a40 <HAL_GPIO_Init+0x228>
 8001a2a:	2305      	movs	r3, #5
 8001a2c:	e008      	b.n	8001a40 <HAL_GPIO_Init+0x228>
 8001a2e:	2304      	movs	r3, #4
 8001a30:	e006      	b.n	8001a40 <HAL_GPIO_Init+0x228>
 8001a32:	2303      	movs	r3, #3
 8001a34:	e004      	b.n	8001a40 <HAL_GPIO_Init+0x228>
 8001a36:	2302      	movs	r3, #2
 8001a38:	e002      	b.n	8001a40 <HAL_GPIO_Init+0x228>
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e000      	b.n	8001a40 <HAL_GPIO_Init+0x228>
 8001a3e:	2300      	movs	r3, #0
 8001a40:	69fa      	ldr	r2, [r7, #28]
 8001a42:	f002 0203 	and.w	r2, r2, #3
 8001a46:	0092      	lsls	r2, r2, #2
 8001a48:	4093      	lsls	r3, r2
 8001a4a:	69ba      	ldr	r2, [r7, #24]
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a50:	4935      	ldr	r1, [pc, #212]	; (8001b28 <HAL_GPIO_Init+0x310>)
 8001a52:	69fb      	ldr	r3, [r7, #28]
 8001a54:	089b      	lsrs	r3, r3, #2
 8001a56:	3302      	adds	r3, #2
 8001a58:	69ba      	ldr	r2, [r7, #24]
 8001a5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a5e:	4b3b      	ldr	r3, [pc, #236]	; (8001b4c <HAL_GPIO_Init+0x334>)
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	43db      	mvns	r3, r3
 8001a68:	69ba      	ldr	r2, [r7, #24]
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d003      	beq.n	8001a82 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001a7a:	69ba      	ldr	r2, [r7, #24]
 8001a7c:	693b      	ldr	r3, [r7, #16]
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a82:	4a32      	ldr	r2, [pc, #200]	; (8001b4c <HAL_GPIO_Init+0x334>)
 8001a84:	69bb      	ldr	r3, [r7, #24]
 8001a86:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a88:	4b30      	ldr	r3, [pc, #192]	; (8001b4c <HAL_GPIO_Init+0x334>)
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	43db      	mvns	r3, r3
 8001a92:	69ba      	ldr	r2, [r7, #24]
 8001a94:	4013      	ands	r3, r2
 8001a96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d003      	beq.n	8001aac <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001aa4:	69ba      	ldr	r2, [r7, #24]
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001aac:	4a27      	ldr	r2, [pc, #156]	; (8001b4c <HAL_GPIO_Init+0x334>)
 8001aae:	69bb      	ldr	r3, [r7, #24]
 8001ab0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001ab2:	4b26      	ldr	r3, [pc, #152]	; (8001b4c <HAL_GPIO_Init+0x334>)
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	43db      	mvns	r3, r3
 8001abc:	69ba      	ldr	r2, [r7, #24]
 8001abe:	4013      	ands	r3, r2
 8001ac0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d003      	beq.n	8001ad6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001ace:	69ba      	ldr	r2, [r7, #24]
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ad6:	4a1d      	ldr	r2, [pc, #116]	; (8001b4c <HAL_GPIO_Init+0x334>)
 8001ad8:	69bb      	ldr	r3, [r7, #24]
 8001ada:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001adc:	4b1b      	ldr	r3, [pc, #108]	; (8001b4c <HAL_GPIO_Init+0x334>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	43db      	mvns	r3, r3
 8001ae6:	69ba      	ldr	r2, [r7, #24]
 8001ae8:	4013      	ands	r3, r2
 8001aea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d003      	beq.n	8001b00 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001af8:	69ba      	ldr	r2, [r7, #24]
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	4313      	orrs	r3, r2
 8001afe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b00:	4a12      	ldr	r2, [pc, #72]	; (8001b4c <HAL_GPIO_Init+0x334>)
 8001b02:	69bb      	ldr	r3, [r7, #24]
 8001b04:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b06:	69fb      	ldr	r3, [r7, #28]
 8001b08:	3301      	adds	r3, #1
 8001b0a:	61fb      	str	r3, [r7, #28]
 8001b0c:	69fb      	ldr	r3, [r7, #28]
 8001b0e:	2b0f      	cmp	r3, #15
 8001b10:	f67f ae90 	bls.w	8001834 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b14:	bf00      	nop
 8001b16:	bf00      	nop
 8001b18:	3724      	adds	r7, #36	; 0x24
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr
 8001b22:	bf00      	nop
 8001b24:	40023800 	.word	0x40023800
 8001b28:	40013800 	.word	0x40013800
 8001b2c:	40020000 	.word	0x40020000
 8001b30:	40020400 	.word	0x40020400
 8001b34:	40020800 	.word	0x40020800
 8001b38:	40020c00 	.word	0x40020c00
 8001b3c:	40021000 	.word	0x40021000
 8001b40:	40021400 	.word	0x40021400
 8001b44:	40021800 	.word	0x40021800
 8001b48:	40021c00 	.word	0x40021c00
 8001b4c:	40013c00 	.word	0x40013c00

08001b50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b083      	sub	sp, #12
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
 8001b58:	460b      	mov	r3, r1
 8001b5a:	807b      	strh	r3, [r7, #2]
 8001b5c:	4613      	mov	r3, r2
 8001b5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b60:	787b      	ldrb	r3, [r7, #1]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d003      	beq.n	8001b6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b66:	887a      	ldrh	r2, [r7, #2]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b6c:	e003      	b.n	8001b76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b6e:	887b      	ldrh	r3, [r7, #2]
 8001b70:	041a      	lsls	r2, r3, #16
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	619a      	str	r2, [r3, #24]
}
 8001b76:	bf00      	nop
 8001b78:	370c      	adds	r7, #12
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr
	...

08001b84 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b086      	sub	sp, #24
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d101      	bne.n	8001b96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e267      	b.n	8002066 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 0301 	and.w	r3, r3, #1
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d075      	beq.n	8001c8e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ba2:	4b88      	ldr	r3, [pc, #544]	; (8001dc4 <HAL_RCC_OscConfig+0x240>)
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	f003 030c 	and.w	r3, r3, #12
 8001baa:	2b04      	cmp	r3, #4
 8001bac:	d00c      	beq.n	8001bc8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001bae:	4b85      	ldr	r3, [pc, #532]	; (8001dc4 <HAL_RCC_OscConfig+0x240>)
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001bb6:	2b08      	cmp	r3, #8
 8001bb8:	d112      	bne.n	8001be0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001bba:	4b82      	ldr	r3, [pc, #520]	; (8001dc4 <HAL_RCC_OscConfig+0x240>)
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bc2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001bc6:	d10b      	bne.n	8001be0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bc8:	4b7e      	ldr	r3, [pc, #504]	; (8001dc4 <HAL_RCC_OscConfig+0x240>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d05b      	beq.n	8001c8c <HAL_RCC_OscConfig+0x108>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d157      	bne.n	8001c8c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	e242      	b.n	8002066 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001be8:	d106      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x74>
 8001bea:	4b76      	ldr	r3, [pc, #472]	; (8001dc4 <HAL_RCC_OscConfig+0x240>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a75      	ldr	r2, [pc, #468]	; (8001dc4 <HAL_RCC_OscConfig+0x240>)
 8001bf0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bf4:	6013      	str	r3, [r2, #0]
 8001bf6:	e01d      	b.n	8001c34 <HAL_RCC_OscConfig+0xb0>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c00:	d10c      	bne.n	8001c1c <HAL_RCC_OscConfig+0x98>
 8001c02:	4b70      	ldr	r3, [pc, #448]	; (8001dc4 <HAL_RCC_OscConfig+0x240>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a6f      	ldr	r2, [pc, #444]	; (8001dc4 <HAL_RCC_OscConfig+0x240>)
 8001c08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c0c:	6013      	str	r3, [r2, #0]
 8001c0e:	4b6d      	ldr	r3, [pc, #436]	; (8001dc4 <HAL_RCC_OscConfig+0x240>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a6c      	ldr	r2, [pc, #432]	; (8001dc4 <HAL_RCC_OscConfig+0x240>)
 8001c14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c18:	6013      	str	r3, [r2, #0]
 8001c1a:	e00b      	b.n	8001c34 <HAL_RCC_OscConfig+0xb0>
 8001c1c:	4b69      	ldr	r3, [pc, #420]	; (8001dc4 <HAL_RCC_OscConfig+0x240>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a68      	ldr	r2, [pc, #416]	; (8001dc4 <HAL_RCC_OscConfig+0x240>)
 8001c22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c26:	6013      	str	r3, [r2, #0]
 8001c28:	4b66      	ldr	r3, [pc, #408]	; (8001dc4 <HAL_RCC_OscConfig+0x240>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a65      	ldr	r2, [pc, #404]	; (8001dc4 <HAL_RCC_OscConfig+0x240>)
 8001c2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d013      	beq.n	8001c64 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c3c:	f7ff fcd6 	bl	80015ec <HAL_GetTick>
 8001c40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c42:	e008      	b.n	8001c56 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c44:	f7ff fcd2 	bl	80015ec <HAL_GetTick>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	1ad3      	subs	r3, r2, r3
 8001c4e:	2b64      	cmp	r3, #100	; 0x64
 8001c50:	d901      	bls.n	8001c56 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001c52:	2303      	movs	r3, #3
 8001c54:	e207      	b.n	8002066 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c56:	4b5b      	ldr	r3, [pc, #364]	; (8001dc4 <HAL_RCC_OscConfig+0x240>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d0f0      	beq.n	8001c44 <HAL_RCC_OscConfig+0xc0>
 8001c62:	e014      	b.n	8001c8e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c64:	f7ff fcc2 	bl	80015ec <HAL_GetTick>
 8001c68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c6a:	e008      	b.n	8001c7e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c6c:	f7ff fcbe 	bl	80015ec <HAL_GetTick>
 8001c70:	4602      	mov	r2, r0
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	2b64      	cmp	r3, #100	; 0x64
 8001c78:	d901      	bls.n	8001c7e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	e1f3      	b.n	8002066 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c7e:	4b51      	ldr	r3, [pc, #324]	; (8001dc4 <HAL_RCC_OscConfig+0x240>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d1f0      	bne.n	8001c6c <HAL_RCC_OscConfig+0xe8>
 8001c8a:	e000      	b.n	8001c8e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f003 0302 	and.w	r3, r3, #2
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d063      	beq.n	8001d62 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c9a:	4b4a      	ldr	r3, [pc, #296]	; (8001dc4 <HAL_RCC_OscConfig+0x240>)
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	f003 030c 	and.w	r3, r3, #12
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d00b      	beq.n	8001cbe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ca6:	4b47      	ldr	r3, [pc, #284]	; (8001dc4 <HAL_RCC_OscConfig+0x240>)
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001cae:	2b08      	cmp	r3, #8
 8001cb0:	d11c      	bne.n	8001cec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001cb2:	4b44      	ldr	r3, [pc, #272]	; (8001dc4 <HAL_RCC_OscConfig+0x240>)
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d116      	bne.n	8001cec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cbe:	4b41      	ldr	r3, [pc, #260]	; (8001dc4 <HAL_RCC_OscConfig+0x240>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 0302 	and.w	r3, r3, #2
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d005      	beq.n	8001cd6 <HAL_RCC_OscConfig+0x152>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	68db      	ldr	r3, [r3, #12]
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d001      	beq.n	8001cd6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e1c7      	b.n	8002066 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cd6:	4b3b      	ldr	r3, [pc, #236]	; (8001dc4 <HAL_RCC_OscConfig+0x240>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	691b      	ldr	r3, [r3, #16]
 8001ce2:	00db      	lsls	r3, r3, #3
 8001ce4:	4937      	ldr	r1, [pc, #220]	; (8001dc4 <HAL_RCC_OscConfig+0x240>)
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cea:	e03a      	b.n	8001d62 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d020      	beq.n	8001d36 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cf4:	4b34      	ldr	r3, [pc, #208]	; (8001dc8 <HAL_RCC_OscConfig+0x244>)
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cfa:	f7ff fc77 	bl	80015ec <HAL_GetTick>
 8001cfe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d00:	e008      	b.n	8001d14 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d02:	f7ff fc73 	bl	80015ec <HAL_GetTick>
 8001d06:	4602      	mov	r2, r0
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	1ad3      	subs	r3, r2, r3
 8001d0c:	2b02      	cmp	r3, #2
 8001d0e:	d901      	bls.n	8001d14 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001d10:	2303      	movs	r3, #3
 8001d12:	e1a8      	b.n	8002066 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d14:	4b2b      	ldr	r3, [pc, #172]	; (8001dc4 <HAL_RCC_OscConfig+0x240>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 0302 	and.w	r3, r3, #2
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d0f0      	beq.n	8001d02 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d20:	4b28      	ldr	r3, [pc, #160]	; (8001dc4 <HAL_RCC_OscConfig+0x240>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	691b      	ldr	r3, [r3, #16]
 8001d2c:	00db      	lsls	r3, r3, #3
 8001d2e:	4925      	ldr	r1, [pc, #148]	; (8001dc4 <HAL_RCC_OscConfig+0x240>)
 8001d30:	4313      	orrs	r3, r2
 8001d32:	600b      	str	r3, [r1, #0]
 8001d34:	e015      	b.n	8001d62 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d36:	4b24      	ldr	r3, [pc, #144]	; (8001dc8 <HAL_RCC_OscConfig+0x244>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d3c:	f7ff fc56 	bl	80015ec <HAL_GetTick>
 8001d40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d42:	e008      	b.n	8001d56 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d44:	f7ff fc52 	bl	80015ec <HAL_GetTick>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	1ad3      	subs	r3, r2, r3
 8001d4e:	2b02      	cmp	r3, #2
 8001d50:	d901      	bls.n	8001d56 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001d52:	2303      	movs	r3, #3
 8001d54:	e187      	b.n	8002066 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d56:	4b1b      	ldr	r3, [pc, #108]	; (8001dc4 <HAL_RCC_OscConfig+0x240>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f003 0302 	and.w	r3, r3, #2
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d1f0      	bne.n	8001d44 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 0308 	and.w	r3, r3, #8
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d036      	beq.n	8001ddc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	695b      	ldr	r3, [r3, #20]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d016      	beq.n	8001da4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d76:	4b15      	ldr	r3, [pc, #84]	; (8001dcc <HAL_RCC_OscConfig+0x248>)
 8001d78:	2201      	movs	r2, #1
 8001d7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d7c:	f7ff fc36 	bl	80015ec <HAL_GetTick>
 8001d80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d82:	e008      	b.n	8001d96 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d84:	f7ff fc32 	bl	80015ec <HAL_GetTick>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	1ad3      	subs	r3, r2, r3
 8001d8e:	2b02      	cmp	r3, #2
 8001d90:	d901      	bls.n	8001d96 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001d92:	2303      	movs	r3, #3
 8001d94:	e167      	b.n	8002066 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d96:	4b0b      	ldr	r3, [pc, #44]	; (8001dc4 <HAL_RCC_OscConfig+0x240>)
 8001d98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d9a:	f003 0302 	and.w	r3, r3, #2
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d0f0      	beq.n	8001d84 <HAL_RCC_OscConfig+0x200>
 8001da2:	e01b      	b.n	8001ddc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001da4:	4b09      	ldr	r3, [pc, #36]	; (8001dcc <HAL_RCC_OscConfig+0x248>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001daa:	f7ff fc1f 	bl	80015ec <HAL_GetTick>
 8001dae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001db0:	e00e      	b.n	8001dd0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001db2:	f7ff fc1b 	bl	80015ec <HAL_GetTick>
 8001db6:	4602      	mov	r2, r0
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	1ad3      	subs	r3, r2, r3
 8001dbc:	2b02      	cmp	r3, #2
 8001dbe:	d907      	bls.n	8001dd0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001dc0:	2303      	movs	r3, #3
 8001dc2:	e150      	b.n	8002066 <HAL_RCC_OscConfig+0x4e2>
 8001dc4:	40023800 	.word	0x40023800
 8001dc8:	42470000 	.word	0x42470000
 8001dcc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dd0:	4b88      	ldr	r3, [pc, #544]	; (8001ff4 <HAL_RCC_OscConfig+0x470>)
 8001dd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001dd4:	f003 0302 	and.w	r3, r3, #2
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d1ea      	bne.n	8001db2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f003 0304 	and.w	r3, r3, #4
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	f000 8097 	beq.w	8001f18 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dea:	2300      	movs	r3, #0
 8001dec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dee:	4b81      	ldr	r3, [pc, #516]	; (8001ff4 <HAL_RCC_OscConfig+0x470>)
 8001df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d10f      	bne.n	8001e1a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	60bb      	str	r3, [r7, #8]
 8001dfe:	4b7d      	ldr	r3, [pc, #500]	; (8001ff4 <HAL_RCC_OscConfig+0x470>)
 8001e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e02:	4a7c      	ldr	r2, [pc, #496]	; (8001ff4 <HAL_RCC_OscConfig+0x470>)
 8001e04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e08:	6413      	str	r3, [r2, #64]	; 0x40
 8001e0a:	4b7a      	ldr	r3, [pc, #488]	; (8001ff4 <HAL_RCC_OscConfig+0x470>)
 8001e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e12:	60bb      	str	r3, [r7, #8]
 8001e14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e16:	2301      	movs	r3, #1
 8001e18:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e1a:	4b77      	ldr	r3, [pc, #476]	; (8001ff8 <HAL_RCC_OscConfig+0x474>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d118      	bne.n	8001e58 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e26:	4b74      	ldr	r3, [pc, #464]	; (8001ff8 <HAL_RCC_OscConfig+0x474>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a73      	ldr	r2, [pc, #460]	; (8001ff8 <HAL_RCC_OscConfig+0x474>)
 8001e2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e32:	f7ff fbdb 	bl	80015ec <HAL_GetTick>
 8001e36:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e38:	e008      	b.n	8001e4c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e3a:	f7ff fbd7 	bl	80015ec <HAL_GetTick>
 8001e3e:	4602      	mov	r2, r0
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	1ad3      	subs	r3, r2, r3
 8001e44:	2b02      	cmp	r3, #2
 8001e46:	d901      	bls.n	8001e4c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001e48:	2303      	movs	r3, #3
 8001e4a:	e10c      	b.n	8002066 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e4c:	4b6a      	ldr	r3, [pc, #424]	; (8001ff8 <HAL_RCC_OscConfig+0x474>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d0f0      	beq.n	8001e3a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d106      	bne.n	8001e6e <HAL_RCC_OscConfig+0x2ea>
 8001e60:	4b64      	ldr	r3, [pc, #400]	; (8001ff4 <HAL_RCC_OscConfig+0x470>)
 8001e62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e64:	4a63      	ldr	r2, [pc, #396]	; (8001ff4 <HAL_RCC_OscConfig+0x470>)
 8001e66:	f043 0301 	orr.w	r3, r3, #1
 8001e6a:	6713      	str	r3, [r2, #112]	; 0x70
 8001e6c:	e01c      	b.n	8001ea8 <HAL_RCC_OscConfig+0x324>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	2b05      	cmp	r3, #5
 8001e74:	d10c      	bne.n	8001e90 <HAL_RCC_OscConfig+0x30c>
 8001e76:	4b5f      	ldr	r3, [pc, #380]	; (8001ff4 <HAL_RCC_OscConfig+0x470>)
 8001e78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e7a:	4a5e      	ldr	r2, [pc, #376]	; (8001ff4 <HAL_RCC_OscConfig+0x470>)
 8001e7c:	f043 0304 	orr.w	r3, r3, #4
 8001e80:	6713      	str	r3, [r2, #112]	; 0x70
 8001e82:	4b5c      	ldr	r3, [pc, #368]	; (8001ff4 <HAL_RCC_OscConfig+0x470>)
 8001e84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e86:	4a5b      	ldr	r2, [pc, #364]	; (8001ff4 <HAL_RCC_OscConfig+0x470>)
 8001e88:	f043 0301 	orr.w	r3, r3, #1
 8001e8c:	6713      	str	r3, [r2, #112]	; 0x70
 8001e8e:	e00b      	b.n	8001ea8 <HAL_RCC_OscConfig+0x324>
 8001e90:	4b58      	ldr	r3, [pc, #352]	; (8001ff4 <HAL_RCC_OscConfig+0x470>)
 8001e92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e94:	4a57      	ldr	r2, [pc, #348]	; (8001ff4 <HAL_RCC_OscConfig+0x470>)
 8001e96:	f023 0301 	bic.w	r3, r3, #1
 8001e9a:	6713      	str	r3, [r2, #112]	; 0x70
 8001e9c:	4b55      	ldr	r3, [pc, #340]	; (8001ff4 <HAL_RCC_OscConfig+0x470>)
 8001e9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ea0:	4a54      	ldr	r2, [pc, #336]	; (8001ff4 <HAL_RCC_OscConfig+0x470>)
 8001ea2:	f023 0304 	bic.w	r3, r3, #4
 8001ea6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	689b      	ldr	r3, [r3, #8]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d015      	beq.n	8001edc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eb0:	f7ff fb9c 	bl	80015ec <HAL_GetTick>
 8001eb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001eb6:	e00a      	b.n	8001ece <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001eb8:	f7ff fb98 	bl	80015ec <HAL_GetTick>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d901      	bls.n	8001ece <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	e0cb      	b.n	8002066 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ece:	4b49      	ldr	r3, [pc, #292]	; (8001ff4 <HAL_RCC_OscConfig+0x470>)
 8001ed0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ed2:	f003 0302 	and.w	r3, r3, #2
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d0ee      	beq.n	8001eb8 <HAL_RCC_OscConfig+0x334>
 8001eda:	e014      	b.n	8001f06 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001edc:	f7ff fb86 	bl	80015ec <HAL_GetTick>
 8001ee0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ee2:	e00a      	b.n	8001efa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ee4:	f7ff fb82 	bl	80015ec <HAL_GetTick>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d901      	bls.n	8001efa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	e0b5      	b.n	8002066 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001efa:	4b3e      	ldr	r3, [pc, #248]	; (8001ff4 <HAL_RCC_OscConfig+0x470>)
 8001efc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001efe:	f003 0302 	and.w	r3, r3, #2
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d1ee      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f06:	7dfb      	ldrb	r3, [r7, #23]
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d105      	bne.n	8001f18 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f0c:	4b39      	ldr	r3, [pc, #228]	; (8001ff4 <HAL_RCC_OscConfig+0x470>)
 8001f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f10:	4a38      	ldr	r2, [pc, #224]	; (8001ff4 <HAL_RCC_OscConfig+0x470>)
 8001f12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f16:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	699b      	ldr	r3, [r3, #24]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	f000 80a1 	beq.w	8002064 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f22:	4b34      	ldr	r3, [pc, #208]	; (8001ff4 <HAL_RCC_OscConfig+0x470>)
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	f003 030c 	and.w	r3, r3, #12
 8001f2a:	2b08      	cmp	r3, #8
 8001f2c:	d05c      	beq.n	8001fe8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	699b      	ldr	r3, [r3, #24]
 8001f32:	2b02      	cmp	r3, #2
 8001f34:	d141      	bne.n	8001fba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f36:	4b31      	ldr	r3, [pc, #196]	; (8001ffc <HAL_RCC_OscConfig+0x478>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f3c:	f7ff fb56 	bl	80015ec <HAL_GetTick>
 8001f40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f42:	e008      	b.n	8001f56 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f44:	f7ff fb52 	bl	80015ec <HAL_GetTick>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	2b02      	cmp	r3, #2
 8001f50:	d901      	bls.n	8001f56 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001f52:	2303      	movs	r3, #3
 8001f54:	e087      	b.n	8002066 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f56:	4b27      	ldr	r3, [pc, #156]	; (8001ff4 <HAL_RCC_OscConfig+0x470>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d1f0      	bne.n	8001f44 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	69da      	ldr	r2, [r3, #28]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6a1b      	ldr	r3, [r3, #32]
 8001f6a:	431a      	orrs	r2, r3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f70:	019b      	lsls	r3, r3, #6
 8001f72:	431a      	orrs	r2, r3
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f78:	085b      	lsrs	r3, r3, #1
 8001f7a:	3b01      	subs	r3, #1
 8001f7c:	041b      	lsls	r3, r3, #16
 8001f7e:	431a      	orrs	r2, r3
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f84:	061b      	lsls	r3, r3, #24
 8001f86:	491b      	ldr	r1, [pc, #108]	; (8001ff4 <HAL_RCC_OscConfig+0x470>)
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f8c:	4b1b      	ldr	r3, [pc, #108]	; (8001ffc <HAL_RCC_OscConfig+0x478>)
 8001f8e:	2201      	movs	r2, #1
 8001f90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f92:	f7ff fb2b 	bl	80015ec <HAL_GetTick>
 8001f96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f98:	e008      	b.n	8001fac <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f9a:	f7ff fb27 	bl	80015ec <HAL_GetTick>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	1ad3      	subs	r3, r2, r3
 8001fa4:	2b02      	cmp	r3, #2
 8001fa6:	d901      	bls.n	8001fac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001fa8:	2303      	movs	r3, #3
 8001faa:	e05c      	b.n	8002066 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fac:	4b11      	ldr	r3, [pc, #68]	; (8001ff4 <HAL_RCC_OscConfig+0x470>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d0f0      	beq.n	8001f9a <HAL_RCC_OscConfig+0x416>
 8001fb8:	e054      	b.n	8002064 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fba:	4b10      	ldr	r3, [pc, #64]	; (8001ffc <HAL_RCC_OscConfig+0x478>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fc0:	f7ff fb14 	bl	80015ec <HAL_GetTick>
 8001fc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fc6:	e008      	b.n	8001fda <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fc8:	f7ff fb10 	bl	80015ec <HAL_GetTick>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	2b02      	cmp	r3, #2
 8001fd4:	d901      	bls.n	8001fda <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	e045      	b.n	8002066 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fda:	4b06      	ldr	r3, [pc, #24]	; (8001ff4 <HAL_RCC_OscConfig+0x470>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d1f0      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x444>
 8001fe6:	e03d      	b.n	8002064 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	699b      	ldr	r3, [r3, #24]
 8001fec:	2b01      	cmp	r3, #1
 8001fee:	d107      	bne.n	8002000 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	e038      	b.n	8002066 <HAL_RCC_OscConfig+0x4e2>
 8001ff4:	40023800 	.word	0x40023800
 8001ff8:	40007000 	.word	0x40007000
 8001ffc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002000:	4b1b      	ldr	r3, [pc, #108]	; (8002070 <HAL_RCC_OscConfig+0x4ec>)
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	699b      	ldr	r3, [r3, #24]
 800200a:	2b01      	cmp	r3, #1
 800200c:	d028      	beq.n	8002060 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002018:	429a      	cmp	r2, r3
 800201a:	d121      	bne.n	8002060 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002026:	429a      	cmp	r2, r3
 8002028:	d11a      	bne.n	8002060 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800202a:	68fa      	ldr	r2, [r7, #12]
 800202c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002030:	4013      	ands	r3, r2
 8002032:	687a      	ldr	r2, [r7, #4]
 8002034:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002036:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002038:	4293      	cmp	r3, r2
 800203a:	d111      	bne.n	8002060 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002046:	085b      	lsrs	r3, r3, #1
 8002048:	3b01      	subs	r3, #1
 800204a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800204c:	429a      	cmp	r2, r3
 800204e:	d107      	bne.n	8002060 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800205a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800205c:	429a      	cmp	r2, r3
 800205e:	d001      	beq.n	8002064 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	e000      	b.n	8002066 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002064:	2300      	movs	r3, #0
}
 8002066:	4618      	mov	r0, r3
 8002068:	3718      	adds	r7, #24
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	40023800 	.word	0x40023800

08002074 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b084      	sub	sp, #16
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d101      	bne.n	8002088 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002084:	2301      	movs	r3, #1
 8002086:	e0cc      	b.n	8002222 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002088:	4b68      	ldr	r3, [pc, #416]	; (800222c <HAL_RCC_ClockConfig+0x1b8>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f003 0307 	and.w	r3, r3, #7
 8002090:	683a      	ldr	r2, [r7, #0]
 8002092:	429a      	cmp	r2, r3
 8002094:	d90c      	bls.n	80020b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002096:	4b65      	ldr	r3, [pc, #404]	; (800222c <HAL_RCC_ClockConfig+0x1b8>)
 8002098:	683a      	ldr	r2, [r7, #0]
 800209a:	b2d2      	uxtb	r2, r2
 800209c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800209e:	4b63      	ldr	r3, [pc, #396]	; (800222c <HAL_RCC_ClockConfig+0x1b8>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 0307 	and.w	r3, r3, #7
 80020a6:	683a      	ldr	r2, [r7, #0]
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d001      	beq.n	80020b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	e0b8      	b.n	8002222 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 0302 	and.w	r3, r3, #2
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d020      	beq.n	80020fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f003 0304 	and.w	r3, r3, #4
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d005      	beq.n	80020d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020c8:	4b59      	ldr	r3, [pc, #356]	; (8002230 <HAL_RCC_ClockConfig+0x1bc>)
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	4a58      	ldr	r2, [pc, #352]	; (8002230 <HAL_RCC_ClockConfig+0x1bc>)
 80020ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80020d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f003 0308 	and.w	r3, r3, #8
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d005      	beq.n	80020ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020e0:	4b53      	ldr	r3, [pc, #332]	; (8002230 <HAL_RCC_ClockConfig+0x1bc>)
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	4a52      	ldr	r2, [pc, #328]	; (8002230 <HAL_RCC_ClockConfig+0x1bc>)
 80020e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80020ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020ec:	4b50      	ldr	r3, [pc, #320]	; (8002230 <HAL_RCC_ClockConfig+0x1bc>)
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	494d      	ldr	r1, [pc, #308]	; (8002230 <HAL_RCC_ClockConfig+0x1bc>)
 80020fa:	4313      	orrs	r3, r2
 80020fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 0301 	and.w	r3, r3, #1
 8002106:	2b00      	cmp	r3, #0
 8002108:	d044      	beq.n	8002194 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	2b01      	cmp	r3, #1
 8002110:	d107      	bne.n	8002122 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002112:	4b47      	ldr	r3, [pc, #284]	; (8002230 <HAL_RCC_ClockConfig+0x1bc>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800211a:	2b00      	cmp	r3, #0
 800211c:	d119      	bne.n	8002152 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e07f      	b.n	8002222 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	2b02      	cmp	r3, #2
 8002128:	d003      	beq.n	8002132 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800212e:	2b03      	cmp	r3, #3
 8002130:	d107      	bne.n	8002142 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002132:	4b3f      	ldr	r3, [pc, #252]	; (8002230 <HAL_RCC_ClockConfig+0x1bc>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800213a:	2b00      	cmp	r3, #0
 800213c:	d109      	bne.n	8002152 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e06f      	b.n	8002222 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002142:	4b3b      	ldr	r3, [pc, #236]	; (8002230 <HAL_RCC_ClockConfig+0x1bc>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 0302 	and.w	r3, r3, #2
 800214a:	2b00      	cmp	r3, #0
 800214c:	d101      	bne.n	8002152 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e067      	b.n	8002222 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002152:	4b37      	ldr	r3, [pc, #220]	; (8002230 <HAL_RCC_ClockConfig+0x1bc>)
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	f023 0203 	bic.w	r2, r3, #3
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	4934      	ldr	r1, [pc, #208]	; (8002230 <HAL_RCC_ClockConfig+0x1bc>)
 8002160:	4313      	orrs	r3, r2
 8002162:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002164:	f7ff fa42 	bl	80015ec <HAL_GetTick>
 8002168:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800216a:	e00a      	b.n	8002182 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800216c:	f7ff fa3e 	bl	80015ec <HAL_GetTick>
 8002170:	4602      	mov	r2, r0
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	f241 3288 	movw	r2, #5000	; 0x1388
 800217a:	4293      	cmp	r3, r2
 800217c:	d901      	bls.n	8002182 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800217e:	2303      	movs	r3, #3
 8002180:	e04f      	b.n	8002222 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002182:	4b2b      	ldr	r3, [pc, #172]	; (8002230 <HAL_RCC_ClockConfig+0x1bc>)
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	f003 020c 	and.w	r2, r3, #12
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	429a      	cmp	r2, r3
 8002192:	d1eb      	bne.n	800216c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002194:	4b25      	ldr	r3, [pc, #148]	; (800222c <HAL_RCC_ClockConfig+0x1b8>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f003 0307 	and.w	r3, r3, #7
 800219c:	683a      	ldr	r2, [r7, #0]
 800219e:	429a      	cmp	r2, r3
 80021a0:	d20c      	bcs.n	80021bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021a2:	4b22      	ldr	r3, [pc, #136]	; (800222c <HAL_RCC_ClockConfig+0x1b8>)
 80021a4:	683a      	ldr	r2, [r7, #0]
 80021a6:	b2d2      	uxtb	r2, r2
 80021a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021aa:	4b20      	ldr	r3, [pc, #128]	; (800222c <HAL_RCC_ClockConfig+0x1b8>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 0307 	and.w	r3, r3, #7
 80021b2:	683a      	ldr	r2, [r7, #0]
 80021b4:	429a      	cmp	r2, r3
 80021b6:	d001      	beq.n	80021bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	e032      	b.n	8002222 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f003 0304 	and.w	r3, r3, #4
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d008      	beq.n	80021da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021c8:	4b19      	ldr	r3, [pc, #100]	; (8002230 <HAL_RCC_ClockConfig+0x1bc>)
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	68db      	ldr	r3, [r3, #12]
 80021d4:	4916      	ldr	r1, [pc, #88]	; (8002230 <HAL_RCC_ClockConfig+0x1bc>)
 80021d6:	4313      	orrs	r3, r2
 80021d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f003 0308 	and.w	r3, r3, #8
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d009      	beq.n	80021fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021e6:	4b12      	ldr	r3, [pc, #72]	; (8002230 <HAL_RCC_ClockConfig+0x1bc>)
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	691b      	ldr	r3, [r3, #16]
 80021f2:	00db      	lsls	r3, r3, #3
 80021f4:	490e      	ldr	r1, [pc, #56]	; (8002230 <HAL_RCC_ClockConfig+0x1bc>)
 80021f6:	4313      	orrs	r3, r2
 80021f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80021fa:	f000 f821 	bl	8002240 <HAL_RCC_GetSysClockFreq>
 80021fe:	4602      	mov	r2, r0
 8002200:	4b0b      	ldr	r3, [pc, #44]	; (8002230 <HAL_RCC_ClockConfig+0x1bc>)
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	091b      	lsrs	r3, r3, #4
 8002206:	f003 030f 	and.w	r3, r3, #15
 800220a:	490a      	ldr	r1, [pc, #40]	; (8002234 <HAL_RCC_ClockConfig+0x1c0>)
 800220c:	5ccb      	ldrb	r3, [r1, r3]
 800220e:	fa22 f303 	lsr.w	r3, r2, r3
 8002212:	4a09      	ldr	r2, [pc, #36]	; (8002238 <HAL_RCC_ClockConfig+0x1c4>)
 8002214:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002216:	4b09      	ldr	r3, [pc, #36]	; (800223c <HAL_RCC_ClockConfig+0x1c8>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4618      	mov	r0, r3
 800221c:	f7ff f9a2 	bl	8001564 <HAL_InitTick>

  return HAL_OK;
 8002220:	2300      	movs	r3, #0
}
 8002222:	4618      	mov	r0, r3
 8002224:	3710      	adds	r7, #16
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	40023c00 	.word	0x40023c00
 8002230:	40023800 	.word	0x40023800
 8002234:	08005720 	.word	0x08005720
 8002238:	20000000 	.word	0x20000000
 800223c:	20000004 	.word	0x20000004

08002240 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002240:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002244:	b094      	sub	sp, #80	; 0x50
 8002246:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002248:	2300      	movs	r3, #0
 800224a:	647b      	str	r3, [r7, #68]	; 0x44
 800224c:	2300      	movs	r3, #0
 800224e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002250:	2300      	movs	r3, #0
 8002252:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002254:	2300      	movs	r3, #0
 8002256:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002258:	4b79      	ldr	r3, [pc, #484]	; (8002440 <HAL_RCC_GetSysClockFreq+0x200>)
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	f003 030c 	and.w	r3, r3, #12
 8002260:	2b08      	cmp	r3, #8
 8002262:	d00d      	beq.n	8002280 <HAL_RCC_GetSysClockFreq+0x40>
 8002264:	2b08      	cmp	r3, #8
 8002266:	f200 80e1 	bhi.w	800242c <HAL_RCC_GetSysClockFreq+0x1ec>
 800226a:	2b00      	cmp	r3, #0
 800226c:	d002      	beq.n	8002274 <HAL_RCC_GetSysClockFreq+0x34>
 800226e:	2b04      	cmp	r3, #4
 8002270:	d003      	beq.n	800227a <HAL_RCC_GetSysClockFreq+0x3a>
 8002272:	e0db      	b.n	800242c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002274:	4b73      	ldr	r3, [pc, #460]	; (8002444 <HAL_RCC_GetSysClockFreq+0x204>)
 8002276:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002278:	e0db      	b.n	8002432 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800227a:	4b73      	ldr	r3, [pc, #460]	; (8002448 <HAL_RCC_GetSysClockFreq+0x208>)
 800227c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800227e:	e0d8      	b.n	8002432 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002280:	4b6f      	ldr	r3, [pc, #444]	; (8002440 <HAL_RCC_GetSysClockFreq+0x200>)
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002288:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800228a:	4b6d      	ldr	r3, [pc, #436]	; (8002440 <HAL_RCC_GetSysClockFreq+0x200>)
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d063      	beq.n	800235e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002296:	4b6a      	ldr	r3, [pc, #424]	; (8002440 <HAL_RCC_GetSysClockFreq+0x200>)
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	099b      	lsrs	r3, r3, #6
 800229c:	2200      	movs	r2, #0
 800229e:	63bb      	str	r3, [r7, #56]	; 0x38
 80022a0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80022a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022a8:	633b      	str	r3, [r7, #48]	; 0x30
 80022aa:	2300      	movs	r3, #0
 80022ac:	637b      	str	r3, [r7, #52]	; 0x34
 80022ae:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80022b2:	4622      	mov	r2, r4
 80022b4:	462b      	mov	r3, r5
 80022b6:	f04f 0000 	mov.w	r0, #0
 80022ba:	f04f 0100 	mov.w	r1, #0
 80022be:	0159      	lsls	r1, r3, #5
 80022c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80022c4:	0150      	lsls	r0, r2, #5
 80022c6:	4602      	mov	r2, r0
 80022c8:	460b      	mov	r3, r1
 80022ca:	4621      	mov	r1, r4
 80022cc:	1a51      	subs	r1, r2, r1
 80022ce:	6139      	str	r1, [r7, #16]
 80022d0:	4629      	mov	r1, r5
 80022d2:	eb63 0301 	sbc.w	r3, r3, r1
 80022d6:	617b      	str	r3, [r7, #20]
 80022d8:	f04f 0200 	mov.w	r2, #0
 80022dc:	f04f 0300 	mov.w	r3, #0
 80022e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80022e4:	4659      	mov	r1, fp
 80022e6:	018b      	lsls	r3, r1, #6
 80022e8:	4651      	mov	r1, sl
 80022ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80022ee:	4651      	mov	r1, sl
 80022f0:	018a      	lsls	r2, r1, #6
 80022f2:	4651      	mov	r1, sl
 80022f4:	ebb2 0801 	subs.w	r8, r2, r1
 80022f8:	4659      	mov	r1, fp
 80022fa:	eb63 0901 	sbc.w	r9, r3, r1
 80022fe:	f04f 0200 	mov.w	r2, #0
 8002302:	f04f 0300 	mov.w	r3, #0
 8002306:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800230a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800230e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002312:	4690      	mov	r8, r2
 8002314:	4699      	mov	r9, r3
 8002316:	4623      	mov	r3, r4
 8002318:	eb18 0303 	adds.w	r3, r8, r3
 800231c:	60bb      	str	r3, [r7, #8]
 800231e:	462b      	mov	r3, r5
 8002320:	eb49 0303 	adc.w	r3, r9, r3
 8002324:	60fb      	str	r3, [r7, #12]
 8002326:	f04f 0200 	mov.w	r2, #0
 800232a:	f04f 0300 	mov.w	r3, #0
 800232e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002332:	4629      	mov	r1, r5
 8002334:	024b      	lsls	r3, r1, #9
 8002336:	4621      	mov	r1, r4
 8002338:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800233c:	4621      	mov	r1, r4
 800233e:	024a      	lsls	r2, r1, #9
 8002340:	4610      	mov	r0, r2
 8002342:	4619      	mov	r1, r3
 8002344:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002346:	2200      	movs	r2, #0
 8002348:	62bb      	str	r3, [r7, #40]	; 0x28
 800234a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800234c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002350:	f7fe fc2a 	bl	8000ba8 <__aeabi_uldivmod>
 8002354:	4602      	mov	r2, r0
 8002356:	460b      	mov	r3, r1
 8002358:	4613      	mov	r3, r2
 800235a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800235c:	e058      	b.n	8002410 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800235e:	4b38      	ldr	r3, [pc, #224]	; (8002440 <HAL_RCC_GetSysClockFreq+0x200>)
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	099b      	lsrs	r3, r3, #6
 8002364:	2200      	movs	r2, #0
 8002366:	4618      	mov	r0, r3
 8002368:	4611      	mov	r1, r2
 800236a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800236e:	623b      	str	r3, [r7, #32]
 8002370:	2300      	movs	r3, #0
 8002372:	627b      	str	r3, [r7, #36]	; 0x24
 8002374:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002378:	4642      	mov	r2, r8
 800237a:	464b      	mov	r3, r9
 800237c:	f04f 0000 	mov.w	r0, #0
 8002380:	f04f 0100 	mov.w	r1, #0
 8002384:	0159      	lsls	r1, r3, #5
 8002386:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800238a:	0150      	lsls	r0, r2, #5
 800238c:	4602      	mov	r2, r0
 800238e:	460b      	mov	r3, r1
 8002390:	4641      	mov	r1, r8
 8002392:	ebb2 0a01 	subs.w	sl, r2, r1
 8002396:	4649      	mov	r1, r9
 8002398:	eb63 0b01 	sbc.w	fp, r3, r1
 800239c:	f04f 0200 	mov.w	r2, #0
 80023a0:	f04f 0300 	mov.w	r3, #0
 80023a4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80023a8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80023ac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80023b0:	ebb2 040a 	subs.w	r4, r2, sl
 80023b4:	eb63 050b 	sbc.w	r5, r3, fp
 80023b8:	f04f 0200 	mov.w	r2, #0
 80023bc:	f04f 0300 	mov.w	r3, #0
 80023c0:	00eb      	lsls	r3, r5, #3
 80023c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80023c6:	00e2      	lsls	r2, r4, #3
 80023c8:	4614      	mov	r4, r2
 80023ca:	461d      	mov	r5, r3
 80023cc:	4643      	mov	r3, r8
 80023ce:	18e3      	adds	r3, r4, r3
 80023d0:	603b      	str	r3, [r7, #0]
 80023d2:	464b      	mov	r3, r9
 80023d4:	eb45 0303 	adc.w	r3, r5, r3
 80023d8:	607b      	str	r3, [r7, #4]
 80023da:	f04f 0200 	mov.w	r2, #0
 80023de:	f04f 0300 	mov.w	r3, #0
 80023e2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80023e6:	4629      	mov	r1, r5
 80023e8:	028b      	lsls	r3, r1, #10
 80023ea:	4621      	mov	r1, r4
 80023ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80023f0:	4621      	mov	r1, r4
 80023f2:	028a      	lsls	r2, r1, #10
 80023f4:	4610      	mov	r0, r2
 80023f6:	4619      	mov	r1, r3
 80023f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023fa:	2200      	movs	r2, #0
 80023fc:	61bb      	str	r3, [r7, #24]
 80023fe:	61fa      	str	r2, [r7, #28]
 8002400:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002404:	f7fe fbd0 	bl	8000ba8 <__aeabi_uldivmod>
 8002408:	4602      	mov	r2, r0
 800240a:	460b      	mov	r3, r1
 800240c:	4613      	mov	r3, r2
 800240e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002410:	4b0b      	ldr	r3, [pc, #44]	; (8002440 <HAL_RCC_GetSysClockFreq+0x200>)
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	0c1b      	lsrs	r3, r3, #16
 8002416:	f003 0303 	and.w	r3, r3, #3
 800241a:	3301      	adds	r3, #1
 800241c:	005b      	lsls	r3, r3, #1
 800241e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002420:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002422:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002424:	fbb2 f3f3 	udiv	r3, r2, r3
 8002428:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800242a:	e002      	b.n	8002432 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800242c:	4b05      	ldr	r3, [pc, #20]	; (8002444 <HAL_RCC_GetSysClockFreq+0x204>)
 800242e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002430:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002432:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002434:	4618      	mov	r0, r3
 8002436:	3750      	adds	r7, #80	; 0x50
 8002438:	46bd      	mov	sp, r7
 800243a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800243e:	bf00      	nop
 8002440:	40023800 	.word	0x40023800
 8002444:	00f42400 	.word	0x00f42400
 8002448:	007a1200 	.word	0x007a1200

0800244c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800244c:	b480      	push	{r7}
 800244e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002450:	4b03      	ldr	r3, [pc, #12]	; (8002460 <HAL_RCC_GetHCLKFreq+0x14>)
 8002452:	681b      	ldr	r3, [r3, #0]
}
 8002454:	4618      	mov	r0, r3
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr
 800245e:	bf00      	nop
 8002460:	20000000 	.word	0x20000000

08002464 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002468:	f7ff fff0 	bl	800244c <HAL_RCC_GetHCLKFreq>
 800246c:	4602      	mov	r2, r0
 800246e:	4b05      	ldr	r3, [pc, #20]	; (8002484 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	0a9b      	lsrs	r3, r3, #10
 8002474:	f003 0307 	and.w	r3, r3, #7
 8002478:	4903      	ldr	r1, [pc, #12]	; (8002488 <HAL_RCC_GetPCLK1Freq+0x24>)
 800247a:	5ccb      	ldrb	r3, [r1, r3]
 800247c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002480:	4618      	mov	r0, r3
 8002482:	bd80      	pop	{r7, pc}
 8002484:	40023800 	.word	0x40023800
 8002488:	08005730 	.word	0x08005730

0800248c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002490:	f7ff ffdc 	bl	800244c <HAL_RCC_GetHCLKFreq>
 8002494:	4602      	mov	r2, r0
 8002496:	4b05      	ldr	r3, [pc, #20]	; (80024ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	0b5b      	lsrs	r3, r3, #13
 800249c:	f003 0307 	and.w	r3, r3, #7
 80024a0:	4903      	ldr	r1, [pc, #12]	; (80024b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80024a2:	5ccb      	ldrb	r3, [r1, r3]
 80024a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	40023800 	.word	0x40023800
 80024b0:	08005730 	.word	0x08005730

080024b4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b082      	sub	sp, #8
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d101      	bne.n	80024c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e03f      	b.n	8002546 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d106      	bne.n	80024e0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2200      	movs	r2, #0
 80024d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	f7fe ffae 	bl	800143c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2224      	movs	r2, #36	; 0x24
 80024e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	68da      	ldr	r2, [r3, #12]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80024f6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80024f8:	6878      	ldr	r0, [r7, #4]
 80024fa:	f000 f929 	bl	8002750 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	691a      	ldr	r2, [r3, #16]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800250c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	695a      	ldr	r2, [r3, #20]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800251c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	68da      	ldr	r2, [r3, #12]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800252c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2200      	movs	r2, #0
 8002532:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2220      	movs	r2, #32
 8002538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2220      	movs	r2, #32
 8002540:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002544:	2300      	movs	r3, #0
}
 8002546:	4618      	mov	r0, r3
 8002548:	3708      	adds	r7, #8
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}

0800254e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800254e:	b580      	push	{r7, lr}
 8002550:	b08a      	sub	sp, #40	; 0x28
 8002552:	af02      	add	r7, sp, #8
 8002554:	60f8      	str	r0, [r7, #12]
 8002556:	60b9      	str	r1, [r7, #8]
 8002558:	603b      	str	r3, [r7, #0]
 800255a:	4613      	mov	r3, r2
 800255c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800255e:	2300      	movs	r3, #0
 8002560:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002568:	b2db      	uxtb	r3, r3
 800256a:	2b20      	cmp	r3, #32
 800256c:	d17c      	bne.n	8002668 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d002      	beq.n	800257a <HAL_UART_Transmit+0x2c>
 8002574:	88fb      	ldrh	r3, [r7, #6]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d101      	bne.n	800257e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e075      	b.n	800266a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002584:	2b01      	cmp	r3, #1
 8002586:	d101      	bne.n	800258c <HAL_UART_Transmit+0x3e>
 8002588:	2302      	movs	r3, #2
 800258a:	e06e      	b.n	800266a <HAL_UART_Transmit+0x11c>
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2201      	movs	r2, #1
 8002590:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	2200      	movs	r2, #0
 8002598:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	2221      	movs	r2, #33	; 0x21
 800259e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80025a2:	f7ff f823 	bl	80015ec <HAL_GetTick>
 80025a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	88fa      	ldrh	r2, [r7, #6]
 80025ac:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	88fa      	ldrh	r2, [r7, #6]
 80025b2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025bc:	d108      	bne.n	80025d0 <HAL_UART_Transmit+0x82>
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	691b      	ldr	r3, [r3, #16]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d104      	bne.n	80025d0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80025c6:	2300      	movs	r3, #0
 80025c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	61bb      	str	r3, [r7, #24]
 80025ce:	e003      	b.n	80025d8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80025d4:	2300      	movs	r3, #0
 80025d6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	2200      	movs	r2, #0
 80025dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80025e0:	e02a      	b.n	8002638 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	9300      	str	r3, [sp, #0]
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	2200      	movs	r2, #0
 80025ea:	2180      	movs	r1, #128	; 0x80
 80025ec:	68f8      	ldr	r0, [r7, #12]
 80025ee:	f000 f840 	bl	8002672 <UART_WaitOnFlagUntilTimeout>
 80025f2:	4603      	mov	r3, r0
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d001      	beq.n	80025fc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80025f8:	2303      	movs	r3, #3
 80025fa:	e036      	b.n	800266a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80025fc:	69fb      	ldr	r3, [r7, #28]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d10b      	bne.n	800261a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002602:	69bb      	ldr	r3, [r7, #24]
 8002604:	881b      	ldrh	r3, [r3, #0]
 8002606:	461a      	mov	r2, r3
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002610:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002612:	69bb      	ldr	r3, [r7, #24]
 8002614:	3302      	adds	r3, #2
 8002616:	61bb      	str	r3, [r7, #24]
 8002618:	e007      	b.n	800262a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	781a      	ldrb	r2, [r3, #0]
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002624:	69fb      	ldr	r3, [r7, #28]
 8002626:	3301      	adds	r3, #1
 8002628:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800262e:	b29b      	uxth	r3, r3
 8002630:	3b01      	subs	r3, #1
 8002632:	b29a      	uxth	r2, r3
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800263c:	b29b      	uxth	r3, r3
 800263e:	2b00      	cmp	r3, #0
 8002640:	d1cf      	bne.n	80025e2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	9300      	str	r3, [sp, #0]
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	2200      	movs	r2, #0
 800264a:	2140      	movs	r1, #64	; 0x40
 800264c:	68f8      	ldr	r0, [r7, #12]
 800264e:	f000 f810 	bl	8002672 <UART_WaitOnFlagUntilTimeout>
 8002652:	4603      	mov	r3, r0
 8002654:	2b00      	cmp	r3, #0
 8002656:	d001      	beq.n	800265c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002658:	2303      	movs	r3, #3
 800265a:	e006      	b.n	800266a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	2220      	movs	r2, #32
 8002660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002664:	2300      	movs	r3, #0
 8002666:	e000      	b.n	800266a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002668:	2302      	movs	r3, #2
  }
}
 800266a:	4618      	mov	r0, r3
 800266c:	3720      	adds	r7, #32
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}

08002672 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002672:	b580      	push	{r7, lr}
 8002674:	b090      	sub	sp, #64	; 0x40
 8002676:	af00      	add	r7, sp, #0
 8002678:	60f8      	str	r0, [r7, #12]
 800267a:	60b9      	str	r1, [r7, #8]
 800267c:	603b      	str	r3, [r7, #0]
 800267e:	4613      	mov	r3, r2
 8002680:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002682:	e050      	b.n	8002726 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002684:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002686:	f1b3 3fff 	cmp.w	r3, #4294967295
 800268a:	d04c      	beq.n	8002726 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800268c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800268e:	2b00      	cmp	r3, #0
 8002690:	d007      	beq.n	80026a2 <UART_WaitOnFlagUntilTimeout+0x30>
 8002692:	f7fe ffab 	bl	80015ec <HAL_GetTick>
 8002696:	4602      	mov	r2, r0
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	1ad3      	subs	r3, r2, r3
 800269c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800269e:	429a      	cmp	r2, r3
 80026a0:	d241      	bcs.n	8002726 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	330c      	adds	r3, #12
 80026a8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026ac:	e853 3f00 	ldrex	r3, [r3]
 80026b0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80026b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80026b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	330c      	adds	r3, #12
 80026c0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80026c2:	637a      	str	r2, [r7, #52]	; 0x34
 80026c4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026c6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80026c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80026ca:	e841 2300 	strex	r3, r2, [r1]
 80026ce:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80026d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d1e5      	bne.n	80026a2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	3314      	adds	r3, #20
 80026dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	e853 3f00 	ldrex	r3, [r3]
 80026e4:	613b      	str	r3, [r7, #16]
   return(result);
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	f023 0301 	bic.w	r3, r3, #1
 80026ec:	63bb      	str	r3, [r7, #56]	; 0x38
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	3314      	adds	r3, #20
 80026f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80026f6:	623a      	str	r2, [r7, #32]
 80026f8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026fa:	69f9      	ldr	r1, [r7, #28]
 80026fc:	6a3a      	ldr	r2, [r7, #32]
 80026fe:	e841 2300 	strex	r3, r2, [r1]
 8002702:	61bb      	str	r3, [r7, #24]
   return(result);
 8002704:	69bb      	ldr	r3, [r7, #24]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d1e5      	bne.n	80026d6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	2220      	movs	r2, #32
 800270e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	2220      	movs	r2, #32
 8002716:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	2200      	movs	r2, #0
 800271e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002722:	2303      	movs	r3, #3
 8002724:	e00f      	b.n	8002746 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	4013      	ands	r3, r2
 8002730:	68ba      	ldr	r2, [r7, #8]
 8002732:	429a      	cmp	r2, r3
 8002734:	bf0c      	ite	eq
 8002736:	2301      	moveq	r3, #1
 8002738:	2300      	movne	r3, #0
 800273a:	b2db      	uxtb	r3, r3
 800273c:	461a      	mov	r2, r3
 800273e:	79fb      	ldrb	r3, [r7, #7]
 8002740:	429a      	cmp	r2, r3
 8002742:	d09f      	beq.n	8002684 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002744:	2300      	movs	r3, #0
}
 8002746:	4618      	mov	r0, r3
 8002748:	3740      	adds	r7, #64	; 0x40
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}
	...

08002750 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002750:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002754:	b0c0      	sub	sp, #256	; 0x100
 8002756:	af00      	add	r7, sp, #0
 8002758:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800275c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	691b      	ldr	r3, [r3, #16]
 8002764:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002768:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800276c:	68d9      	ldr	r1, [r3, #12]
 800276e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	ea40 0301 	orr.w	r3, r0, r1
 8002778:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800277a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800277e:	689a      	ldr	r2, [r3, #8]
 8002780:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002784:	691b      	ldr	r3, [r3, #16]
 8002786:	431a      	orrs	r2, r3
 8002788:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800278c:	695b      	ldr	r3, [r3, #20]
 800278e:	431a      	orrs	r2, r3
 8002790:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002794:	69db      	ldr	r3, [r3, #28]
 8002796:	4313      	orrs	r3, r2
 8002798:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800279c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	68db      	ldr	r3, [r3, #12]
 80027a4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80027a8:	f021 010c 	bic.w	r1, r1, #12
 80027ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80027b6:	430b      	orrs	r3, r1
 80027b8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80027ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	695b      	ldr	r3, [r3, #20]
 80027c2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80027c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027ca:	6999      	ldr	r1, [r3, #24]
 80027cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	ea40 0301 	orr.w	r3, r0, r1
 80027d6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80027d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	4b8f      	ldr	r3, [pc, #572]	; (8002a1c <UART_SetConfig+0x2cc>)
 80027e0:	429a      	cmp	r2, r3
 80027e2:	d005      	beq.n	80027f0 <UART_SetConfig+0xa0>
 80027e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	4b8d      	ldr	r3, [pc, #564]	; (8002a20 <UART_SetConfig+0x2d0>)
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d104      	bne.n	80027fa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80027f0:	f7ff fe4c 	bl	800248c <HAL_RCC_GetPCLK2Freq>
 80027f4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80027f8:	e003      	b.n	8002802 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80027fa:	f7ff fe33 	bl	8002464 <HAL_RCC_GetPCLK1Freq>
 80027fe:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002802:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002806:	69db      	ldr	r3, [r3, #28]
 8002808:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800280c:	f040 810c 	bne.w	8002a28 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002810:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002814:	2200      	movs	r2, #0
 8002816:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800281a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800281e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002822:	4622      	mov	r2, r4
 8002824:	462b      	mov	r3, r5
 8002826:	1891      	adds	r1, r2, r2
 8002828:	65b9      	str	r1, [r7, #88]	; 0x58
 800282a:	415b      	adcs	r3, r3
 800282c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800282e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002832:	4621      	mov	r1, r4
 8002834:	eb12 0801 	adds.w	r8, r2, r1
 8002838:	4629      	mov	r1, r5
 800283a:	eb43 0901 	adc.w	r9, r3, r1
 800283e:	f04f 0200 	mov.w	r2, #0
 8002842:	f04f 0300 	mov.w	r3, #0
 8002846:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800284a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800284e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002852:	4690      	mov	r8, r2
 8002854:	4699      	mov	r9, r3
 8002856:	4623      	mov	r3, r4
 8002858:	eb18 0303 	adds.w	r3, r8, r3
 800285c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002860:	462b      	mov	r3, r5
 8002862:	eb49 0303 	adc.w	r3, r9, r3
 8002866:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800286a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	2200      	movs	r2, #0
 8002872:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002876:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800287a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800287e:	460b      	mov	r3, r1
 8002880:	18db      	adds	r3, r3, r3
 8002882:	653b      	str	r3, [r7, #80]	; 0x50
 8002884:	4613      	mov	r3, r2
 8002886:	eb42 0303 	adc.w	r3, r2, r3
 800288a:	657b      	str	r3, [r7, #84]	; 0x54
 800288c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002890:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002894:	f7fe f988 	bl	8000ba8 <__aeabi_uldivmod>
 8002898:	4602      	mov	r2, r0
 800289a:	460b      	mov	r3, r1
 800289c:	4b61      	ldr	r3, [pc, #388]	; (8002a24 <UART_SetConfig+0x2d4>)
 800289e:	fba3 2302 	umull	r2, r3, r3, r2
 80028a2:	095b      	lsrs	r3, r3, #5
 80028a4:	011c      	lsls	r4, r3, #4
 80028a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80028aa:	2200      	movs	r2, #0
 80028ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80028b0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80028b4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80028b8:	4642      	mov	r2, r8
 80028ba:	464b      	mov	r3, r9
 80028bc:	1891      	adds	r1, r2, r2
 80028be:	64b9      	str	r1, [r7, #72]	; 0x48
 80028c0:	415b      	adcs	r3, r3
 80028c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80028c4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80028c8:	4641      	mov	r1, r8
 80028ca:	eb12 0a01 	adds.w	sl, r2, r1
 80028ce:	4649      	mov	r1, r9
 80028d0:	eb43 0b01 	adc.w	fp, r3, r1
 80028d4:	f04f 0200 	mov.w	r2, #0
 80028d8:	f04f 0300 	mov.w	r3, #0
 80028dc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80028e0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80028e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80028e8:	4692      	mov	sl, r2
 80028ea:	469b      	mov	fp, r3
 80028ec:	4643      	mov	r3, r8
 80028ee:	eb1a 0303 	adds.w	r3, sl, r3
 80028f2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80028f6:	464b      	mov	r3, r9
 80028f8:	eb4b 0303 	adc.w	r3, fp, r3
 80028fc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002900:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	2200      	movs	r2, #0
 8002908:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800290c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002910:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002914:	460b      	mov	r3, r1
 8002916:	18db      	adds	r3, r3, r3
 8002918:	643b      	str	r3, [r7, #64]	; 0x40
 800291a:	4613      	mov	r3, r2
 800291c:	eb42 0303 	adc.w	r3, r2, r3
 8002920:	647b      	str	r3, [r7, #68]	; 0x44
 8002922:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002926:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800292a:	f7fe f93d 	bl	8000ba8 <__aeabi_uldivmod>
 800292e:	4602      	mov	r2, r0
 8002930:	460b      	mov	r3, r1
 8002932:	4611      	mov	r1, r2
 8002934:	4b3b      	ldr	r3, [pc, #236]	; (8002a24 <UART_SetConfig+0x2d4>)
 8002936:	fba3 2301 	umull	r2, r3, r3, r1
 800293a:	095b      	lsrs	r3, r3, #5
 800293c:	2264      	movs	r2, #100	; 0x64
 800293e:	fb02 f303 	mul.w	r3, r2, r3
 8002942:	1acb      	subs	r3, r1, r3
 8002944:	00db      	lsls	r3, r3, #3
 8002946:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800294a:	4b36      	ldr	r3, [pc, #216]	; (8002a24 <UART_SetConfig+0x2d4>)
 800294c:	fba3 2302 	umull	r2, r3, r3, r2
 8002950:	095b      	lsrs	r3, r3, #5
 8002952:	005b      	lsls	r3, r3, #1
 8002954:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002958:	441c      	add	r4, r3
 800295a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800295e:	2200      	movs	r2, #0
 8002960:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002964:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002968:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800296c:	4642      	mov	r2, r8
 800296e:	464b      	mov	r3, r9
 8002970:	1891      	adds	r1, r2, r2
 8002972:	63b9      	str	r1, [r7, #56]	; 0x38
 8002974:	415b      	adcs	r3, r3
 8002976:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002978:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800297c:	4641      	mov	r1, r8
 800297e:	1851      	adds	r1, r2, r1
 8002980:	6339      	str	r1, [r7, #48]	; 0x30
 8002982:	4649      	mov	r1, r9
 8002984:	414b      	adcs	r3, r1
 8002986:	637b      	str	r3, [r7, #52]	; 0x34
 8002988:	f04f 0200 	mov.w	r2, #0
 800298c:	f04f 0300 	mov.w	r3, #0
 8002990:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002994:	4659      	mov	r1, fp
 8002996:	00cb      	lsls	r3, r1, #3
 8002998:	4651      	mov	r1, sl
 800299a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800299e:	4651      	mov	r1, sl
 80029a0:	00ca      	lsls	r2, r1, #3
 80029a2:	4610      	mov	r0, r2
 80029a4:	4619      	mov	r1, r3
 80029a6:	4603      	mov	r3, r0
 80029a8:	4642      	mov	r2, r8
 80029aa:	189b      	adds	r3, r3, r2
 80029ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80029b0:	464b      	mov	r3, r9
 80029b2:	460a      	mov	r2, r1
 80029b4:	eb42 0303 	adc.w	r3, r2, r3
 80029b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80029bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	2200      	movs	r2, #0
 80029c4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80029c8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80029cc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80029d0:	460b      	mov	r3, r1
 80029d2:	18db      	adds	r3, r3, r3
 80029d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80029d6:	4613      	mov	r3, r2
 80029d8:	eb42 0303 	adc.w	r3, r2, r3
 80029dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029de:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80029e2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80029e6:	f7fe f8df 	bl	8000ba8 <__aeabi_uldivmod>
 80029ea:	4602      	mov	r2, r0
 80029ec:	460b      	mov	r3, r1
 80029ee:	4b0d      	ldr	r3, [pc, #52]	; (8002a24 <UART_SetConfig+0x2d4>)
 80029f0:	fba3 1302 	umull	r1, r3, r3, r2
 80029f4:	095b      	lsrs	r3, r3, #5
 80029f6:	2164      	movs	r1, #100	; 0x64
 80029f8:	fb01 f303 	mul.w	r3, r1, r3
 80029fc:	1ad3      	subs	r3, r2, r3
 80029fe:	00db      	lsls	r3, r3, #3
 8002a00:	3332      	adds	r3, #50	; 0x32
 8002a02:	4a08      	ldr	r2, [pc, #32]	; (8002a24 <UART_SetConfig+0x2d4>)
 8002a04:	fba2 2303 	umull	r2, r3, r2, r3
 8002a08:	095b      	lsrs	r3, r3, #5
 8002a0a:	f003 0207 	and.w	r2, r3, #7
 8002a0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4422      	add	r2, r4
 8002a16:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002a18:	e105      	b.n	8002c26 <UART_SetConfig+0x4d6>
 8002a1a:	bf00      	nop
 8002a1c:	40011000 	.word	0x40011000
 8002a20:	40011400 	.word	0x40011400
 8002a24:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002a28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002a32:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002a36:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002a3a:	4642      	mov	r2, r8
 8002a3c:	464b      	mov	r3, r9
 8002a3e:	1891      	adds	r1, r2, r2
 8002a40:	6239      	str	r1, [r7, #32]
 8002a42:	415b      	adcs	r3, r3
 8002a44:	627b      	str	r3, [r7, #36]	; 0x24
 8002a46:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002a4a:	4641      	mov	r1, r8
 8002a4c:	1854      	adds	r4, r2, r1
 8002a4e:	4649      	mov	r1, r9
 8002a50:	eb43 0501 	adc.w	r5, r3, r1
 8002a54:	f04f 0200 	mov.w	r2, #0
 8002a58:	f04f 0300 	mov.w	r3, #0
 8002a5c:	00eb      	lsls	r3, r5, #3
 8002a5e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a62:	00e2      	lsls	r2, r4, #3
 8002a64:	4614      	mov	r4, r2
 8002a66:	461d      	mov	r5, r3
 8002a68:	4643      	mov	r3, r8
 8002a6a:	18e3      	adds	r3, r4, r3
 8002a6c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002a70:	464b      	mov	r3, r9
 8002a72:	eb45 0303 	adc.w	r3, r5, r3
 8002a76:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002a7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	2200      	movs	r2, #0
 8002a82:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002a86:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002a8a:	f04f 0200 	mov.w	r2, #0
 8002a8e:	f04f 0300 	mov.w	r3, #0
 8002a92:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002a96:	4629      	mov	r1, r5
 8002a98:	008b      	lsls	r3, r1, #2
 8002a9a:	4621      	mov	r1, r4
 8002a9c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002aa0:	4621      	mov	r1, r4
 8002aa2:	008a      	lsls	r2, r1, #2
 8002aa4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002aa8:	f7fe f87e 	bl	8000ba8 <__aeabi_uldivmod>
 8002aac:	4602      	mov	r2, r0
 8002aae:	460b      	mov	r3, r1
 8002ab0:	4b60      	ldr	r3, [pc, #384]	; (8002c34 <UART_SetConfig+0x4e4>)
 8002ab2:	fba3 2302 	umull	r2, r3, r3, r2
 8002ab6:	095b      	lsrs	r3, r3, #5
 8002ab8:	011c      	lsls	r4, r3, #4
 8002aba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002abe:	2200      	movs	r2, #0
 8002ac0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002ac4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002ac8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002acc:	4642      	mov	r2, r8
 8002ace:	464b      	mov	r3, r9
 8002ad0:	1891      	adds	r1, r2, r2
 8002ad2:	61b9      	str	r1, [r7, #24]
 8002ad4:	415b      	adcs	r3, r3
 8002ad6:	61fb      	str	r3, [r7, #28]
 8002ad8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002adc:	4641      	mov	r1, r8
 8002ade:	1851      	adds	r1, r2, r1
 8002ae0:	6139      	str	r1, [r7, #16]
 8002ae2:	4649      	mov	r1, r9
 8002ae4:	414b      	adcs	r3, r1
 8002ae6:	617b      	str	r3, [r7, #20]
 8002ae8:	f04f 0200 	mov.w	r2, #0
 8002aec:	f04f 0300 	mov.w	r3, #0
 8002af0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002af4:	4659      	mov	r1, fp
 8002af6:	00cb      	lsls	r3, r1, #3
 8002af8:	4651      	mov	r1, sl
 8002afa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002afe:	4651      	mov	r1, sl
 8002b00:	00ca      	lsls	r2, r1, #3
 8002b02:	4610      	mov	r0, r2
 8002b04:	4619      	mov	r1, r3
 8002b06:	4603      	mov	r3, r0
 8002b08:	4642      	mov	r2, r8
 8002b0a:	189b      	adds	r3, r3, r2
 8002b0c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002b10:	464b      	mov	r3, r9
 8002b12:	460a      	mov	r2, r1
 8002b14:	eb42 0303 	adc.w	r3, r2, r3
 8002b18:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002b1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	2200      	movs	r2, #0
 8002b24:	67bb      	str	r3, [r7, #120]	; 0x78
 8002b26:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002b28:	f04f 0200 	mov.w	r2, #0
 8002b2c:	f04f 0300 	mov.w	r3, #0
 8002b30:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002b34:	4649      	mov	r1, r9
 8002b36:	008b      	lsls	r3, r1, #2
 8002b38:	4641      	mov	r1, r8
 8002b3a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002b3e:	4641      	mov	r1, r8
 8002b40:	008a      	lsls	r2, r1, #2
 8002b42:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002b46:	f7fe f82f 	bl	8000ba8 <__aeabi_uldivmod>
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	460b      	mov	r3, r1
 8002b4e:	4b39      	ldr	r3, [pc, #228]	; (8002c34 <UART_SetConfig+0x4e4>)
 8002b50:	fba3 1302 	umull	r1, r3, r3, r2
 8002b54:	095b      	lsrs	r3, r3, #5
 8002b56:	2164      	movs	r1, #100	; 0x64
 8002b58:	fb01 f303 	mul.w	r3, r1, r3
 8002b5c:	1ad3      	subs	r3, r2, r3
 8002b5e:	011b      	lsls	r3, r3, #4
 8002b60:	3332      	adds	r3, #50	; 0x32
 8002b62:	4a34      	ldr	r2, [pc, #208]	; (8002c34 <UART_SetConfig+0x4e4>)
 8002b64:	fba2 2303 	umull	r2, r3, r2, r3
 8002b68:	095b      	lsrs	r3, r3, #5
 8002b6a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b6e:	441c      	add	r4, r3
 8002b70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b74:	2200      	movs	r2, #0
 8002b76:	673b      	str	r3, [r7, #112]	; 0x70
 8002b78:	677a      	str	r2, [r7, #116]	; 0x74
 8002b7a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002b7e:	4642      	mov	r2, r8
 8002b80:	464b      	mov	r3, r9
 8002b82:	1891      	adds	r1, r2, r2
 8002b84:	60b9      	str	r1, [r7, #8]
 8002b86:	415b      	adcs	r3, r3
 8002b88:	60fb      	str	r3, [r7, #12]
 8002b8a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002b8e:	4641      	mov	r1, r8
 8002b90:	1851      	adds	r1, r2, r1
 8002b92:	6039      	str	r1, [r7, #0]
 8002b94:	4649      	mov	r1, r9
 8002b96:	414b      	adcs	r3, r1
 8002b98:	607b      	str	r3, [r7, #4]
 8002b9a:	f04f 0200 	mov.w	r2, #0
 8002b9e:	f04f 0300 	mov.w	r3, #0
 8002ba2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002ba6:	4659      	mov	r1, fp
 8002ba8:	00cb      	lsls	r3, r1, #3
 8002baa:	4651      	mov	r1, sl
 8002bac:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002bb0:	4651      	mov	r1, sl
 8002bb2:	00ca      	lsls	r2, r1, #3
 8002bb4:	4610      	mov	r0, r2
 8002bb6:	4619      	mov	r1, r3
 8002bb8:	4603      	mov	r3, r0
 8002bba:	4642      	mov	r2, r8
 8002bbc:	189b      	adds	r3, r3, r2
 8002bbe:	66bb      	str	r3, [r7, #104]	; 0x68
 8002bc0:	464b      	mov	r3, r9
 8002bc2:	460a      	mov	r2, r1
 8002bc4:	eb42 0303 	adc.w	r3, r2, r3
 8002bc8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002bca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	663b      	str	r3, [r7, #96]	; 0x60
 8002bd4:	667a      	str	r2, [r7, #100]	; 0x64
 8002bd6:	f04f 0200 	mov.w	r2, #0
 8002bda:	f04f 0300 	mov.w	r3, #0
 8002bde:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002be2:	4649      	mov	r1, r9
 8002be4:	008b      	lsls	r3, r1, #2
 8002be6:	4641      	mov	r1, r8
 8002be8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002bec:	4641      	mov	r1, r8
 8002bee:	008a      	lsls	r2, r1, #2
 8002bf0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002bf4:	f7fd ffd8 	bl	8000ba8 <__aeabi_uldivmod>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	460b      	mov	r3, r1
 8002bfc:	4b0d      	ldr	r3, [pc, #52]	; (8002c34 <UART_SetConfig+0x4e4>)
 8002bfe:	fba3 1302 	umull	r1, r3, r3, r2
 8002c02:	095b      	lsrs	r3, r3, #5
 8002c04:	2164      	movs	r1, #100	; 0x64
 8002c06:	fb01 f303 	mul.w	r3, r1, r3
 8002c0a:	1ad3      	subs	r3, r2, r3
 8002c0c:	011b      	lsls	r3, r3, #4
 8002c0e:	3332      	adds	r3, #50	; 0x32
 8002c10:	4a08      	ldr	r2, [pc, #32]	; (8002c34 <UART_SetConfig+0x4e4>)
 8002c12:	fba2 2303 	umull	r2, r3, r2, r3
 8002c16:	095b      	lsrs	r3, r3, #5
 8002c18:	f003 020f 	and.w	r2, r3, #15
 8002c1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4422      	add	r2, r4
 8002c24:	609a      	str	r2, [r3, #8]
}
 8002c26:	bf00      	nop
 8002c28:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c32:	bf00      	nop
 8002c34:	51eb851f 	.word	0x51eb851f

08002c38 <__errno>:
 8002c38:	4b01      	ldr	r3, [pc, #4]	; (8002c40 <__errno+0x8>)
 8002c3a:	6818      	ldr	r0, [r3, #0]
 8002c3c:	4770      	bx	lr
 8002c3e:	bf00      	nop
 8002c40:	2000000c 	.word	0x2000000c

08002c44 <__libc_init_array>:
 8002c44:	b570      	push	{r4, r5, r6, lr}
 8002c46:	4d0d      	ldr	r5, [pc, #52]	; (8002c7c <__libc_init_array+0x38>)
 8002c48:	4c0d      	ldr	r4, [pc, #52]	; (8002c80 <__libc_init_array+0x3c>)
 8002c4a:	1b64      	subs	r4, r4, r5
 8002c4c:	10a4      	asrs	r4, r4, #2
 8002c4e:	2600      	movs	r6, #0
 8002c50:	42a6      	cmp	r6, r4
 8002c52:	d109      	bne.n	8002c68 <__libc_init_array+0x24>
 8002c54:	4d0b      	ldr	r5, [pc, #44]	; (8002c84 <__libc_init_array+0x40>)
 8002c56:	4c0c      	ldr	r4, [pc, #48]	; (8002c88 <__libc_init_array+0x44>)
 8002c58:	f002 fd4e 	bl	80056f8 <_init>
 8002c5c:	1b64      	subs	r4, r4, r5
 8002c5e:	10a4      	asrs	r4, r4, #2
 8002c60:	2600      	movs	r6, #0
 8002c62:	42a6      	cmp	r6, r4
 8002c64:	d105      	bne.n	8002c72 <__libc_init_array+0x2e>
 8002c66:	bd70      	pop	{r4, r5, r6, pc}
 8002c68:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c6c:	4798      	blx	r3
 8002c6e:	3601      	adds	r6, #1
 8002c70:	e7ee      	b.n	8002c50 <__libc_init_array+0xc>
 8002c72:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c76:	4798      	blx	r3
 8002c78:	3601      	adds	r6, #1
 8002c7a:	e7f2      	b.n	8002c62 <__libc_init_array+0x1e>
 8002c7c:	08005b1c 	.word	0x08005b1c
 8002c80:	08005b1c 	.word	0x08005b1c
 8002c84:	08005b1c 	.word	0x08005b1c
 8002c88:	08005b20 	.word	0x08005b20

08002c8c <memset>:
 8002c8c:	4402      	add	r2, r0
 8002c8e:	4603      	mov	r3, r0
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d100      	bne.n	8002c96 <memset+0xa>
 8002c94:	4770      	bx	lr
 8002c96:	f803 1b01 	strb.w	r1, [r3], #1
 8002c9a:	e7f9      	b.n	8002c90 <memset+0x4>

08002c9c <__cvt>:
 8002c9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002ca0:	ec55 4b10 	vmov	r4, r5, d0
 8002ca4:	2d00      	cmp	r5, #0
 8002ca6:	460e      	mov	r6, r1
 8002ca8:	4619      	mov	r1, r3
 8002caa:	462b      	mov	r3, r5
 8002cac:	bfbb      	ittet	lt
 8002cae:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8002cb2:	461d      	movlt	r5, r3
 8002cb4:	2300      	movge	r3, #0
 8002cb6:	232d      	movlt	r3, #45	; 0x2d
 8002cb8:	700b      	strb	r3, [r1, #0]
 8002cba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002cbc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8002cc0:	4691      	mov	r9, r2
 8002cc2:	f023 0820 	bic.w	r8, r3, #32
 8002cc6:	bfbc      	itt	lt
 8002cc8:	4622      	movlt	r2, r4
 8002cca:	4614      	movlt	r4, r2
 8002ccc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002cd0:	d005      	beq.n	8002cde <__cvt+0x42>
 8002cd2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8002cd6:	d100      	bne.n	8002cda <__cvt+0x3e>
 8002cd8:	3601      	adds	r6, #1
 8002cda:	2102      	movs	r1, #2
 8002cdc:	e000      	b.n	8002ce0 <__cvt+0x44>
 8002cde:	2103      	movs	r1, #3
 8002ce0:	ab03      	add	r3, sp, #12
 8002ce2:	9301      	str	r3, [sp, #4]
 8002ce4:	ab02      	add	r3, sp, #8
 8002ce6:	9300      	str	r3, [sp, #0]
 8002ce8:	ec45 4b10 	vmov	d0, r4, r5
 8002cec:	4653      	mov	r3, sl
 8002cee:	4632      	mov	r2, r6
 8002cf0:	f000 fce2 	bl	80036b8 <_dtoa_r>
 8002cf4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8002cf8:	4607      	mov	r7, r0
 8002cfa:	d102      	bne.n	8002d02 <__cvt+0x66>
 8002cfc:	f019 0f01 	tst.w	r9, #1
 8002d00:	d022      	beq.n	8002d48 <__cvt+0xac>
 8002d02:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002d06:	eb07 0906 	add.w	r9, r7, r6
 8002d0a:	d110      	bne.n	8002d2e <__cvt+0x92>
 8002d0c:	783b      	ldrb	r3, [r7, #0]
 8002d0e:	2b30      	cmp	r3, #48	; 0x30
 8002d10:	d10a      	bne.n	8002d28 <__cvt+0x8c>
 8002d12:	2200      	movs	r2, #0
 8002d14:	2300      	movs	r3, #0
 8002d16:	4620      	mov	r0, r4
 8002d18:	4629      	mov	r1, r5
 8002d1a:	f7fd fed5 	bl	8000ac8 <__aeabi_dcmpeq>
 8002d1e:	b918      	cbnz	r0, 8002d28 <__cvt+0x8c>
 8002d20:	f1c6 0601 	rsb	r6, r6, #1
 8002d24:	f8ca 6000 	str.w	r6, [sl]
 8002d28:	f8da 3000 	ldr.w	r3, [sl]
 8002d2c:	4499      	add	r9, r3
 8002d2e:	2200      	movs	r2, #0
 8002d30:	2300      	movs	r3, #0
 8002d32:	4620      	mov	r0, r4
 8002d34:	4629      	mov	r1, r5
 8002d36:	f7fd fec7 	bl	8000ac8 <__aeabi_dcmpeq>
 8002d3a:	b108      	cbz	r0, 8002d40 <__cvt+0xa4>
 8002d3c:	f8cd 900c 	str.w	r9, [sp, #12]
 8002d40:	2230      	movs	r2, #48	; 0x30
 8002d42:	9b03      	ldr	r3, [sp, #12]
 8002d44:	454b      	cmp	r3, r9
 8002d46:	d307      	bcc.n	8002d58 <__cvt+0xbc>
 8002d48:	9b03      	ldr	r3, [sp, #12]
 8002d4a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002d4c:	1bdb      	subs	r3, r3, r7
 8002d4e:	4638      	mov	r0, r7
 8002d50:	6013      	str	r3, [r2, #0]
 8002d52:	b004      	add	sp, #16
 8002d54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d58:	1c59      	adds	r1, r3, #1
 8002d5a:	9103      	str	r1, [sp, #12]
 8002d5c:	701a      	strb	r2, [r3, #0]
 8002d5e:	e7f0      	b.n	8002d42 <__cvt+0xa6>

08002d60 <__exponent>:
 8002d60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002d62:	4603      	mov	r3, r0
 8002d64:	2900      	cmp	r1, #0
 8002d66:	bfb8      	it	lt
 8002d68:	4249      	neglt	r1, r1
 8002d6a:	f803 2b02 	strb.w	r2, [r3], #2
 8002d6e:	bfb4      	ite	lt
 8002d70:	222d      	movlt	r2, #45	; 0x2d
 8002d72:	222b      	movge	r2, #43	; 0x2b
 8002d74:	2909      	cmp	r1, #9
 8002d76:	7042      	strb	r2, [r0, #1]
 8002d78:	dd2a      	ble.n	8002dd0 <__exponent+0x70>
 8002d7a:	f10d 0407 	add.w	r4, sp, #7
 8002d7e:	46a4      	mov	ip, r4
 8002d80:	270a      	movs	r7, #10
 8002d82:	46a6      	mov	lr, r4
 8002d84:	460a      	mov	r2, r1
 8002d86:	fb91 f6f7 	sdiv	r6, r1, r7
 8002d8a:	fb07 1516 	mls	r5, r7, r6, r1
 8002d8e:	3530      	adds	r5, #48	; 0x30
 8002d90:	2a63      	cmp	r2, #99	; 0x63
 8002d92:	f104 34ff 	add.w	r4, r4, #4294967295
 8002d96:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8002d9a:	4631      	mov	r1, r6
 8002d9c:	dcf1      	bgt.n	8002d82 <__exponent+0x22>
 8002d9e:	3130      	adds	r1, #48	; 0x30
 8002da0:	f1ae 0502 	sub.w	r5, lr, #2
 8002da4:	f804 1c01 	strb.w	r1, [r4, #-1]
 8002da8:	1c44      	adds	r4, r0, #1
 8002daa:	4629      	mov	r1, r5
 8002dac:	4561      	cmp	r1, ip
 8002dae:	d30a      	bcc.n	8002dc6 <__exponent+0x66>
 8002db0:	f10d 0209 	add.w	r2, sp, #9
 8002db4:	eba2 020e 	sub.w	r2, r2, lr
 8002db8:	4565      	cmp	r5, ip
 8002dba:	bf88      	it	hi
 8002dbc:	2200      	movhi	r2, #0
 8002dbe:	4413      	add	r3, r2
 8002dc0:	1a18      	subs	r0, r3, r0
 8002dc2:	b003      	add	sp, #12
 8002dc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002dc6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002dca:	f804 2f01 	strb.w	r2, [r4, #1]!
 8002dce:	e7ed      	b.n	8002dac <__exponent+0x4c>
 8002dd0:	2330      	movs	r3, #48	; 0x30
 8002dd2:	3130      	adds	r1, #48	; 0x30
 8002dd4:	7083      	strb	r3, [r0, #2]
 8002dd6:	70c1      	strb	r1, [r0, #3]
 8002dd8:	1d03      	adds	r3, r0, #4
 8002dda:	e7f1      	b.n	8002dc0 <__exponent+0x60>

08002ddc <_printf_float>:
 8002ddc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002de0:	ed2d 8b02 	vpush	{d8}
 8002de4:	b08d      	sub	sp, #52	; 0x34
 8002de6:	460c      	mov	r4, r1
 8002de8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8002dec:	4616      	mov	r6, r2
 8002dee:	461f      	mov	r7, r3
 8002df0:	4605      	mov	r5, r0
 8002df2:	f001 fb45 	bl	8004480 <_localeconv_r>
 8002df6:	f8d0 a000 	ldr.w	sl, [r0]
 8002dfa:	4650      	mov	r0, sl
 8002dfc:	f7fd f9e8 	bl	80001d0 <strlen>
 8002e00:	2300      	movs	r3, #0
 8002e02:	930a      	str	r3, [sp, #40]	; 0x28
 8002e04:	6823      	ldr	r3, [r4, #0]
 8002e06:	9305      	str	r3, [sp, #20]
 8002e08:	f8d8 3000 	ldr.w	r3, [r8]
 8002e0c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8002e10:	3307      	adds	r3, #7
 8002e12:	f023 0307 	bic.w	r3, r3, #7
 8002e16:	f103 0208 	add.w	r2, r3, #8
 8002e1a:	f8c8 2000 	str.w	r2, [r8]
 8002e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e22:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8002e26:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8002e2a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8002e2e:	9307      	str	r3, [sp, #28]
 8002e30:	f8cd 8018 	str.w	r8, [sp, #24]
 8002e34:	ee08 0a10 	vmov	s16, r0
 8002e38:	4b9f      	ldr	r3, [pc, #636]	; (80030b8 <_printf_float+0x2dc>)
 8002e3a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002e3e:	f04f 32ff 	mov.w	r2, #4294967295
 8002e42:	f7fd fe73 	bl	8000b2c <__aeabi_dcmpun>
 8002e46:	bb88      	cbnz	r0, 8002eac <_printf_float+0xd0>
 8002e48:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002e4c:	4b9a      	ldr	r3, [pc, #616]	; (80030b8 <_printf_float+0x2dc>)
 8002e4e:	f04f 32ff 	mov.w	r2, #4294967295
 8002e52:	f7fd fe4d 	bl	8000af0 <__aeabi_dcmple>
 8002e56:	bb48      	cbnz	r0, 8002eac <_printf_float+0xd0>
 8002e58:	2200      	movs	r2, #0
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	4640      	mov	r0, r8
 8002e5e:	4649      	mov	r1, r9
 8002e60:	f7fd fe3c 	bl	8000adc <__aeabi_dcmplt>
 8002e64:	b110      	cbz	r0, 8002e6c <_printf_float+0x90>
 8002e66:	232d      	movs	r3, #45	; 0x2d
 8002e68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002e6c:	4b93      	ldr	r3, [pc, #588]	; (80030bc <_printf_float+0x2e0>)
 8002e6e:	4894      	ldr	r0, [pc, #592]	; (80030c0 <_printf_float+0x2e4>)
 8002e70:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8002e74:	bf94      	ite	ls
 8002e76:	4698      	movls	r8, r3
 8002e78:	4680      	movhi	r8, r0
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	6123      	str	r3, [r4, #16]
 8002e7e:	9b05      	ldr	r3, [sp, #20]
 8002e80:	f023 0204 	bic.w	r2, r3, #4
 8002e84:	6022      	str	r2, [r4, #0]
 8002e86:	f04f 0900 	mov.w	r9, #0
 8002e8a:	9700      	str	r7, [sp, #0]
 8002e8c:	4633      	mov	r3, r6
 8002e8e:	aa0b      	add	r2, sp, #44	; 0x2c
 8002e90:	4621      	mov	r1, r4
 8002e92:	4628      	mov	r0, r5
 8002e94:	f000 f9d8 	bl	8003248 <_printf_common>
 8002e98:	3001      	adds	r0, #1
 8002e9a:	f040 8090 	bne.w	8002fbe <_printf_float+0x1e2>
 8002e9e:	f04f 30ff 	mov.w	r0, #4294967295
 8002ea2:	b00d      	add	sp, #52	; 0x34
 8002ea4:	ecbd 8b02 	vpop	{d8}
 8002ea8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002eac:	4642      	mov	r2, r8
 8002eae:	464b      	mov	r3, r9
 8002eb0:	4640      	mov	r0, r8
 8002eb2:	4649      	mov	r1, r9
 8002eb4:	f7fd fe3a 	bl	8000b2c <__aeabi_dcmpun>
 8002eb8:	b140      	cbz	r0, 8002ecc <_printf_float+0xf0>
 8002eba:	464b      	mov	r3, r9
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	bfbc      	itt	lt
 8002ec0:	232d      	movlt	r3, #45	; 0x2d
 8002ec2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8002ec6:	487f      	ldr	r0, [pc, #508]	; (80030c4 <_printf_float+0x2e8>)
 8002ec8:	4b7f      	ldr	r3, [pc, #508]	; (80030c8 <_printf_float+0x2ec>)
 8002eca:	e7d1      	b.n	8002e70 <_printf_float+0x94>
 8002ecc:	6863      	ldr	r3, [r4, #4]
 8002ece:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8002ed2:	9206      	str	r2, [sp, #24]
 8002ed4:	1c5a      	adds	r2, r3, #1
 8002ed6:	d13f      	bne.n	8002f58 <_printf_float+0x17c>
 8002ed8:	2306      	movs	r3, #6
 8002eda:	6063      	str	r3, [r4, #4]
 8002edc:	9b05      	ldr	r3, [sp, #20]
 8002ede:	6861      	ldr	r1, [r4, #4]
 8002ee0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	9303      	str	r3, [sp, #12]
 8002ee8:	ab0a      	add	r3, sp, #40	; 0x28
 8002eea:	e9cd b301 	strd	fp, r3, [sp, #4]
 8002eee:	ab09      	add	r3, sp, #36	; 0x24
 8002ef0:	ec49 8b10 	vmov	d0, r8, r9
 8002ef4:	9300      	str	r3, [sp, #0]
 8002ef6:	6022      	str	r2, [r4, #0]
 8002ef8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8002efc:	4628      	mov	r0, r5
 8002efe:	f7ff fecd 	bl	8002c9c <__cvt>
 8002f02:	9b06      	ldr	r3, [sp, #24]
 8002f04:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002f06:	2b47      	cmp	r3, #71	; 0x47
 8002f08:	4680      	mov	r8, r0
 8002f0a:	d108      	bne.n	8002f1e <_printf_float+0x142>
 8002f0c:	1cc8      	adds	r0, r1, #3
 8002f0e:	db02      	blt.n	8002f16 <_printf_float+0x13a>
 8002f10:	6863      	ldr	r3, [r4, #4]
 8002f12:	4299      	cmp	r1, r3
 8002f14:	dd41      	ble.n	8002f9a <_printf_float+0x1be>
 8002f16:	f1ab 0b02 	sub.w	fp, fp, #2
 8002f1a:	fa5f fb8b 	uxtb.w	fp, fp
 8002f1e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8002f22:	d820      	bhi.n	8002f66 <_printf_float+0x18a>
 8002f24:	3901      	subs	r1, #1
 8002f26:	465a      	mov	r2, fp
 8002f28:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8002f2c:	9109      	str	r1, [sp, #36]	; 0x24
 8002f2e:	f7ff ff17 	bl	8002d60 <__exponent>
 8002f32:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002f34:	1813      	adds	r3, r2, r0
 8002f36:	2a01      	cmp	r2, #1
 8002f38:	4681      	mov	r9, r0
 8002f3a:	6123      	str	r3, [r4, #16]
 8002f3c:	dc02      	bgt.n	8002f44 <_printf_float+0x168>
 8002f3e:	6822      	ldr	r2, [r4, #0]
 8002f40:	07d2      	lsls	r2, r2, #31
 8002f42:	d501      	bpl.n	8002f48 <_printf_float+0x16c>
 8002f44:	3301      	adds	r3, #1
 8002f46:	6123      	str	r3, [r4, #16]
 8002f48:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d09c      	beq.n	8002e8a <_printf_float+0xae>
 8002f50:	232d      	movs	r3, #45	; 0x2d
 8002f52:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002f56:	e798      	b.n	8002e8a <_printf_float+0xae>
 8002f58:	9a06      	ldr	r2, [sp, #24]
 8002f5a:	2a47      	cmp	r2, #71	; 0x47
 8002f5c:	d1be      	bne.n	8002edc <_printf_float+0x100>
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d1bc      	bne.n	8002edc <_printf_float+0x100>
 8002f62:	2301      	movs	r3, #1
 8002f64:	e7b9      	b.n	8002eda <_printf_float+0xfe>
 8002f66:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8002f6a:	d118      	bne.n	8002f9e <_printf_float+0x1c2>
 8002f6c:	2900      	cmp	r1, #0
 8002f6e:	6863      	ldr	r3, [r4, #4]
 8002f70:	dd0b      	ble.n	8002f8a <_printf_float+0x1ae>
 8002f72:	6121      	str	r1, [r4, #16]
 8002f74:	b913      	cbnz	r3, 8002f7c <_printf_float+0x1a0>
 8002f76:	6822      	ldr	r2, [r4, #0]
 8002f78:	07d0      	lsls	r0, r2, #31
 8002f7a:	d502      	bpl.n	8002f82 <_printf_float+0x1a6>
 8002f7c:	3301      	adds	r3, #1
 8002f7e:	440b      	add	r3, r1
 8002f80:	6123      	str	r3, [r4, #16]
 8002f82:	65a1      	str	r1, [r4, #88]	; 0x58
 8002f84:	f04f 0900 	mov.w	r9, #0
 8002f88:	e7de      	b.n	8002f48 <_printf_float+0x16c>
 8002f8a:	b913      	cbnz	r3, 8002f92 <_printf_float+0x1b6>
 8002f8c:	6822      	ldr	r2, [r4, #0]
 8002f8e:	07d2      	lsls	r2, r2, #31
 8002f90:	d501      	bpl.n	8002f96 <_printf_float+0x1ba>
 8002f92:	3302      	adds	r3, #2
 8002f94:	e7f4      	b.n	8002f80 <_printf_float+0x1a4>
 8002f96:	2301      	movs	r3, #1
 8002f98:	e7f2      	b.n	8002f80 <_printf_float+0x1a4>
 8002f9a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8002f9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002fa0:	4299      	cmp	r1, r3
 8002fa2:	db05      	blt.n	8002fb0 <_printf_float+0x1d4>
 8002fa4:	6823      	ldr	r3, [r4, #0]
 8002fa6:	6121      	str	r1, [r4, #16]
 8002fa8:	07d8      	lsls	r0, r3, #31
 8002faa:	d5ea      	bpl.n	8002f82 <_printf_float+0x1a6>
 8002fac:	1c4b      	adds	r3, r1, #1
 8002fae:	e7e7      	b.n	8002f80 <_printf_float+0x1a4>
 8002fb0:	2900      	cmp	r1, #0
 8002fb2:	bfd4      	ite	le
 8002fb4:	f1c1 0202 	rsble	r2, r1, #2
 8002fb8:	2201      	movgt	r2, #1
 8002fba:	4413      	add	r3, r2
 8002fbc:	e7e0      	b.n	8002f80 <_printf_float+0x1a4>
 8002fbe:	6823      	ldr	r3, [r4, #0]
 8002fc0:	055a      	lsls	r2, r3, #21
 8002fc2:	d407      	bmi.n	8002fd4 <_printf_float+0x1f8>
 8002fc4:	6923      	ldr	r3, [r4, #16]
 8002fc6:	4642      	mov	r2, r8
 8002fc8:	4631      	mov	r1, r6
 8002fca:	4628      	mov	r0, r5
 8002fcc:	47b8      	blx	r7
 8002fce:	3001      	adds	r0, #1
 8002fd0:	d12c      	bne.n	800302c <_printf_float+0x250>
 8002fd2:	e764      	b.n	8002e9e <_printf_float+0xc2>
 8002fd4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8002fd8:	f240 80e0 	bls.w	800319c <_printf_float+0x3c0>
 8002fdc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	f7fd fd70 	bl	8000ac8 <__aeabi_dcmpeq>
 8002fe8:	2800      	cmp	r0, #0
 8002fea:	d034      	beq.n	8003056 <_printf_float+0x27a>
 8002fec:	4a37      	ldr	r2, [pc, #220]	; (80030cc <_printf_float+0x2f0>)
 8002fee:	2301      	movs	r3, #1
 8002ff0:	4631      	mov	r1, r6
 8002ff2:	4628      	mov	r0, r5
 8002ff4:	47b8      	blx	r7
 8002ff6:	3001      	adds	r0, #1
 8002ff8:	f43f af51 	beq.w	8002e9e <_printf_float+0xc2>
 8002ffc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003000:	429a      	cmp	r2, r3
 8003002:	db02      	blt.n	800300a <_printf_float+0x22e>
 8003004:	6823      	ldr	r3, [r4, #0]
 8003006:	07d8      	lsls	r0, r3, #31
 8003008:	d510      	bpl.n	800302c <_printf_float+0x250>
 800300a:	ee18 3a10 	vmov	r3, s16
 800300e:	4652      	mov	r2, sl
 8003010:	4631      	mov	r1, r6
 8003012:	4628      	mov	r0, r5
 8003014:	47b8      	blx	r7
 8003016:	3001      	adds	r0, #1
 8003018:	f43f af41 	beq.w	8002e9e <_printf_float+0xc2>
 800301c:	f04f 0800 	mov.w	r8, #0
 8003020:	f104 091a 	add.w	r9, r4, #26
 8003024:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003026:	3b01      	subs	r3, #1
 8003028:	4543      	cmp	r3, r8
 800302a:	dc09      	bgt.n	8003040 <_printf_float+0x264>
 800302c:	6823      	ldr	r3, [r4, #0]
 800302e:	079b      	lsls	r3, r3, #30
 8003030:	f100 8105 	bmi.w	800323e <_printf_float+0x462>
 8003034:	68e0      	ldr	r0, [r4, #12]
 8003036:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003038:	4298      	cmp	r0, r3
 800303a:	bfb8      	it	lt
 800303c:	4618      	movlt	r0, r3
 800303e:	e730      	b.n	8002ea2 <_printf_float+0xc6>
 8003040:	2301      	movs	r3, #1
 8003042:	464a      	mov	r2, r9
 8003044:	4631      	mov	r1, r6
 8003046:	4628      	mov	r0, r5
 8003048:	47b8      	blx	r7
 800304a:	3001      	adds	r0, #1
 800304c:	f43f af27 	beq.w	8002e9e <_printf_float+0xc2>
 8003050:	f108 0801 	add.w	r8, r8, #1
 8003054:	e7e6      	b.n	8003024 <_printf_float+0x248>
 8003056:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003058:	2b00      	cmp	r3, #0
 800305a:	dc39      	bgt.n	80030d0 <_printf_float+0x2f4>
 800305c:	4a1b      	ldr	r2, [pc, #108]	; (80030cc <_printf_float+0x2f0>)
 800305e:	2301      	movs	r3, #1
 8003060:	4631      	mov	r1, r6
 8003062:	4628      	mov	r0, r5
 8003064:	47b8      	blx	r7
 8003066:	3001      	adds	r0, #1
 8003068:	f43f af19 	beq.w	8002e9e <_printf_float+0xc2>
 800306c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003070:	4313      	orrs	r3, r2
 8003072:	d102      	bne.n	800307a <_printf_float+0x29e>
 8003074:	6823      	ldr	r3, [r4, #0]
 8003076:	07d9      	lsls	r1, r3, #31
 8003078:	d5d8      	bpl.n	800302c <_printf_float+0x250>
 800307a:	ee18 3a10 	vmov	r3, s16
 800307e:	4652      	mov	r2, sl
 8003080:	4631      	mov	r1, r6
 8003082:	4628      	mov	r0, r5
 8003084:	47b8      	blx	r7
 8003086:	3001      	adds	r0, #1
 8003088:	f43f af09 	beq.w	8002e9e <_printf_float+0xc2>
 800308c:	f04f 0900 	mov.w	r9, #0
 8003090:	f104 0a1a 	add.w	sl, r4, #26
 8003094:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003096:	425b      	negs	r3, r3
 8003098:	454b      	cmp	r3, r9
 800309a:	dc01      	bgt.n	80030a0 <_printf_float+0x2c4>
 800309c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800309e:	e792      	b.n	8002fc6 <_printf_float+0x1ea>
 80030a0:	2301      	movs	r3, #1
 80030a2:	4652      	mov	r2, sl
 80030a4:	4631      	mov	r1, r6
 80030a6:	4628      	mov	r0, r5
 80030a8:	47b8      	blx	r7
 80030aa:	3001      	adds	r0, #1
 80030ac:	f43f aef7 	beq.w	8002e9e <_printf_float+0xc2>
 80030b0:	f109 0901 	add.w	r9, r9, #1
 80030b4:	e7ee      	b.n	8003094 <_printf_float+0x2b8>
 80030b6:	bf00      	nop
 80030b8:	7fefffff 	.word	0x7fefffff
 80030bc:	0800573c 	.word	0x0800573c
 80030c0:	08005740 	.word	0x08005740
 80030c4:	08005748 	.word	0x08005748
 80030c8:	08005744 	.word	0x08005744
 80030cc:	0800574c 	.word	0x0800574c
 80030d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80030d2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80030d4:	429a      	cmp	r2, r3
 80030d6:	bfa8      	it	ge
 80030d8:	461a      	movge	r2, r3
 80030da:	2a00      	cmp	r2, #0
 80030dc:	4691      	mov	r9, r2
 80030de:	dc37      	bgt.n	8003150 <_printf_float+0x374>
 80030e0:	f04f 0b00 	mov.w	fp, #0
 80030e4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80030e8:	f104 021a 	add.w	r2, r4, #26
 80030ec:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80030ee:	9305      	str	r3, [sp, #20]
 80030f0:	eba3 0309 	sub.w	r3, r3, r9
 80030f4:	455b      	cmp	r3, fp
 80030f6:	dc33      	bgt.n	8003160 <_printf_float+0x384>
 80030f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80030fc:	429a      	cmp	r2, r3
 80030fe:	db3b      	blt.n	8003178 <_printf_float+0x39c>
 8003100:	6823      	ldr	r3, [r4, #0]
 8003102:	07da      	lsls	r2, r3, #31
 8003104:	d438      	bmi.n	8003178 <_printf_float+0x39c>
 8003106:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003108:	9a05      	ldr	r2, [sp, #20]
 800310a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800310c:	1a9a      	subs	r2, r3, r2
 800310e:	eba3 0901 	sub.w	r9, r3, r1
 8003112:	4591      	cmp	r9, r2
 8003114:	bfa8      	it	ge
 8003116:	4691      	movge	r9, r2
 8003118:	f1b9 0f00 	cmp.w	r9, #0
 800311c:	dc35      	bgt.n	800318a <_printf_float+0x3ae>
 800311e:	f04f 0800 	mov.w	r8, #0
 8003122:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003126:	f104 0a1a 	add.w	sl, r4, #26
 800312a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800312e:	1a9b      	subs	r3, r3, r2
 8003130:	eba3 0309 	sub.w	r3, r3, r9
 8003134:	4543      	cmp	r3, r8
 8003136:	f77f af79 	ble.w	800302c <_printf_float+0x250>
 800313a:	2301      	movs	r3, #1
 800313c:	4652      	mov	r2, sl
 800313e:	4631      	mov	r1, r6
 8003140:	4628      	mov	r0, r5
 8003142:	47b8      	blx	r7
 8003144:	3001      	adds	r0, #1
 8003146:	f43f aeaa 	beq.w	8002e9e <_printf_float+0xc2>
 800314a:	f108 0801 	add.w	r8, r8, #1
 800314e:	e7ec      	b.n	800312a <_printf_float+0x34e>
 8003150:	4613      	mov	r3, r2
 8003152:	4631      	mov	r1, r6
 8003154:	4642      	mov	r2, r8
 8003156:	4628      	mov	r0, r5
 8003158:	47b8      	blx	r7
 800315a:	3001      	adds	r0, #1
 800315c:	d1c0      	bne.n	80030e0 <_printf_float+0x304>
 800315e:	e69e      	b.n	8002e9e <_printf_float+0xc2>
 8003160:	2301      	movs	r3, #1
 8003162:	4631      	mov	r1, r6
 8003164:	4628      	mov	r0, r5
 8003166:	9205      	str	r2, [sp, #20]
 8003168:	47b8      	blx	r7
 800316a:	3001      	adds	r0, #1
 800316c:	f43f ae97 	beq.w	8002e9e <_printf_float+0xc2>
 8003170:	9a05      	ldr	r2, [sp, #20]
 8003172:	f10b 0b01 	add.w	fp, fp, #1
 8003176:	e7b9      	b.n	80030ec <_printf_float+0x310>
 8003178:	ee18 3a10 	vmov	r3, s16
 800317c:	4652      	mov	r2, sl
 800317e:	4631      	mov	r1, r6
 8003180:	4628      	mov	r0, r5
 8003182:	47b8      	blx	r7
 8003184:	3001      	adds	r0, #1
 8003186:	d1be      	bne.n	8003106 <_printf_float+0x32a>
 8003188:	e689      	b.n	8002e9e <_printf_float+0xc2>
 800318a:	9a05      	ldr	r2, [sp, #20]
 800318c:	464b      	mov	r3, r9
 800318e:	4442      	add	r2, r8
 8003190:	4631      	mov	r1, r6
 8003192:	4628      	mov	r0, r5
 8003194:	47b8      	blx	r7
 8003196:	3001      	adds	r0, #1
 8003198:	d1c1      	bne.n	800311e <_printf_float+0x342>
 800319a:	e680      	b.n	8002e9e <_printf_float+0xc2>
 800319c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800319e:	2a01      	cmp	r2, #1
 80031a0:	dc01      	bgt.n	80031a6 <_printf_float+0x3ca>
 80031a2:	07db      	lsls	r3, r3, #31
 80031a4:	d538      	bpl.n	8003218 <_printf_float+0x43c>
 80031a6:	2301      	movs	r3, #1
 80031a8:	4642      	mov	r2, r8
 80031aa:	4631      	mov	r1, r6
 80031ac:	4628      	mov	r0, r5
 80031ae:	47b8      	blx	r7
 80031b0:	3001      	adds	r0, #1
 80031b2:	f43f ae74 	beq.w	8002e9e <_printf_float+0xc2>
 80031b6:	ee18 3a10 	vmov	r3, s16
 80031ba:	4652      	mov	r2, sl
 80031bc:	4631      	mov	r1, r6
 80031be:	4628      	mov	r0, r5
 80031c0:	47b8      	blx	r7
 80031c2:	3001      	adds	r0, #1
 80031c4:	f43f ae6b 	beq.w	8002e9e <_printf_float+0xc2>
 80031c8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80031cc:	2200      	movs	r2, #0
 80031ce:	2300      	movs	r3, #0
 80031d0:	f7fd fc7a 	bl	8000ac8 <__aeabi_dcmpeq>
 80031d4:	b9d8      	cbnz	r0, 800320e <_printf_float+0x432>
 80031d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80031d8:	f108 0201 	add.w	r2, r8, #1
 80031dc:	3b01      	subs	r3, #1
 80031de:	4631      	mov	r1, r6
 80031e0:	4628      	mov	r0, r5
 80031e2:	47b8      	blx	r7
 80031e4:	3001      	adds	r0, #1
 80031e6:	d10e      	bne.n	8003206 <_printf_float+0x42a>
 80031e8:	e659      	b.n	8002e9e <_printf_float+0xc2>
 80031ea:	2301      	movs	r3, #1
 80031ec:	4652      	mov	r2, sl
 80031ee:	4631      	mov	r1, r6
 80031f0:	4628      	mov	r0, r5
 80031f2:	47b8      	blx	r7
 80031f4:	3001      	adds	r0, #1
 80031f6:	f43f ae52 	beq.w	8002e9e <_printf_float+0xc2>
 80031fa:	f108 0801 	add.w	r8, r8, #1
 80031fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003200:	3b01      	subs	r3, #1
 8003202:	4543      	cmp	r3, r8
 8003204:	dcf1      	bgt.n	80031ea <_printf_float+0x40e>
 8003206:	464b      	mov	r3, r9
 8003208:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800320c:	e6dc      	b.n	8002fc8 <_printf_float+0x1ec>
 800320e:	f04f 0800 	mov.w	r8, #0
 8003212:	f104 0a1a 	add.w	sl, r4, #26
 8003216:	e7f2      	b.n	80031fe <_printf_float+0x422>
 8003218:	2301      	movs	r3, #1
 800321a:	4642      	mov	r2, r8
 800321c:	e7df      	b.n	80031de <_printf_float+0x402>
 800321e:	2301      	movs	r3, #1
 8003220:	464a      	mov	r2, r9
 8003222:	4631      	mov	r1, r6
 8003224:	4628      	mov	r0, r5
 8003226:	47b8      	blx	r7
 8003228:	3001      	adds	r0, #1
 800322a:	f43f ae38 	beq.w	8002e9e <_printf_float+0xc2>
 800322e:	f108 0801 	add.w	r8, r8, #1
 8003232:	68e3      	ldr	r3, [r4, #12]
 8003234:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003236:	1a5b      	subs	r3, r3, r1
 8003238:	4543      	cmp	r3, r8
 800323a:	dcf0      	bgt.n	800321e <_printf_float+0x442>
 800323c:	e6fa      	b.n	8003034 <_printf_float+0x258>
 800323e:	f04f 0800 	mov.w	r8, #0
 8003242:	f104 0919 	add.w	r9, r4, #25
 8003246:	e7f4      	b.n	8003232 <_printf_float+0x456>

08003248 <_printf_common>:
 8003248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800324c:	4616      	mov	r6, r2
 800324e:	4699      	mov	r9, r3
 8003250:	688a      	ldr	r2, [r1, #8]
 8003252:	690b      	ldr	r3, [r1, #16]
 8003254:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003258:	4293      	cmp	r3, r2
 800325a:	bfb8      	it	lt
 800325c:	4613      	movlt	r3, r2
 800325e:	6033      	str	r3, [r6, #0]
 8003260:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003264:	4607      	mov	r7, r0
 8003266:	460c      	mov	r4, r1
 8003268:	b10a      	cbz	r2, 800326e <_printf_common+0x26>
 800326a:	3301      	adds	r3, #1
 800326c:	6033      	str	r3, [r6, #0]
 800326e:	6823      	ldr	r3, [r4, #0]
 8003270:	0699      	lsls	r1, r3, #26
 8003272:	bf42      	ittt	mi
 8003274:	6833      	ldrmi	r3, [r6, #0]
 8003276:	3302      	addmi	r3, #2
 8003278:	6033      	strmi	r3, [r6, #0]
 800327a:	6825      	ldr	r5, [r4, #0]
 800327c:	f015 0506 	ands.w	r5, r5, #6
 8003280:	d106      	bne.n	8003290 <_printf_common+0x48>
 8003282:	f104 0a19 	add.w	sl, r4, #25
 8003286:	68e3      	ldr	r3, [r4, #12]
 8003288:	6832      	ldr	r2, [r6, #0]
 800328a:	1a9b      	subs	r3, r3, r2
 800328c:	42ab      	cmp	r3, r5
 800328e:	dc26      	bgt.n	80032de <_printf_common+0x96>
 8003290:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003294:	1e13      	subs	r3, r2, #0
 8003296:	6822      	ldr	r2, [r4, #0]
 8003298:	bf18      	it	ne
 800329a:	2301      	movne	r3, #1
 800329c:	0692      	lsls	r2, r2, #26
 800329e:	d42b      	bmi.n	80032f8 <_printf_common+0xb0>
 80032a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80032a4:	4649      	mov	r1, r9
 80032a6:	4638      	mov	r0, r7
 80032a8:	47c0      	blx	r8
 80032aa:	3001      	adds	r0, #1
 80032ac:	d01e      	beq.n	80032ec <_printf_common+0xa4>
 80032ae:	6823      	ldr	r3, [r4, #0]
 80032b0:	68e5      	ldr	r5, [r4, #12]
 80032b2:	6832      	ldr	r2, [r6, #0]
 80032b4:	f003 0306 	and.w	r3, r3, #6
 80032b8:	2b04      	cmp	r3, #4
 80032ba:	bf08      	it	eq
 80032bc:	1aad      	subeq	r5, r5, r2
 80032be:	68a3      	ldr	r3, [r4, #8]
 80032c0:	6922      	ldr	r2, [r4, #16]
 80032c2:	bf0c      	ite	eq
 80032c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80032c8:	2500      	movne	r5, #0
 80032ca:	4293      	cmp	r3, r2
 80032cc:	bfc4      	itt	gt
 80032ce:	1a9b      	subgt	r3, r3, r2
 80032d0:	18ed      	addgt	r5, r5, r3
 80032d2:	2600      	movs	r6, #0
 80032d4:	341a      	adds	r4, #26
 80032d6:	42b5      	cmp	r5, r6
 80032d8:	d11a      	bne.n	8003310 <_printf_common+0xc8>
 80032da:	2000      	movs	r0, #0
 80032dc:	e008      	b.n	80032f0 <_printf_common+0xa8>
 80032de:	2301      	movs	r3, #1
 80032e0:	4652      	mov	r2, sl
 80032e2:	4649      	mov	r1, r9
 80032e4:	4638      	mov	r0, r7
 80032e6:	47c0      	blx	r8
 80032e8:	3001      	adds	r0, #1
 80032ea:	d103      	bne.n	80032f4 <_printf_common+0xac>
 80032ec:	f04f 30ff 	mov.w	r0, #4294967295
 80032f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80032f4:	3501      	adds	r5, #1
 80032f6:	e7c6      	b.n	8003286 <_printf_common+0x3e>
 80032f8:	18e1      	adds	r1, r4, r3
 80032fa:	1c5a      	adds	r2, r3, #1
 80032fc:	2030      	movs	r0, #48	; 0x30
 80032fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003302:	4422      	add	r2, r4
 8003304:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003308:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800330c:	3302      	adds	r3, #2
 800330e:	e7c7      	b.n	80032a0 <_printf_common+0x58>
 8003310:	2301      	movs	r3, #1
 8003312:	4622      	mov	r2, r4
 8003314:	4649      	mov	r1, r9
 8003316:	4638      	mov	r0, r7
 8003318:	47c0      	blx	r8
 800331a:	3001      	adds	r0, #1
 800331c:	d0e6      	beq.n	80032ec <_printf_common+0xa4>
 800331e:	3601      	adds	r6, #1
 8003320:	e7d9      	b.n	80032d6 <_printf_common+0x8e>
	...

08003324 <_printf_i>:
 8003324:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003328:	7e0f      	ldrb	r7, [r1, #24]
 800332a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800332c:	2f78      	cmp	r7, #120	; 0x78
 800332e:	4691      	mov	r9, r2
 8003330:	4680      	mov	r8, r0
 8003332:	460c      	mov	r4, r1
 8003334:	469a      	mov	sl, r3
 8003336:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800333a:	d807      	bhi.n	800334c <_printf_i+0x28>
 800333c:	2f62      	cmp	r7, #98	; 0x62
 800333e:	d80a      	bhi.n	8003356 <_printf_i+0x32>
 8003340:	2f00      	cmp	r7, #0
 8003342:	f000 80d8 	beq.w	80034f6 <_printf_i+0x1d2>
 8003346:	2f58      	cmp	r7, #88	; 0x58
 8003348:	f000 80a3 	beq.w	8003492 <_printf_i+0x16e>
 800334c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003350:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003354:	e03a      	b.n	80033cc <_printf_i+0xa8>
 8003356:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800335a:	2b15      	cmp	r3, #21
 800335c:	d8f6      	bhi.n	800334c <_printf_i+0x28>
 800335e:	a101      	add	r1, pc, #4	; (adr r1, 8003364 <_printf_i+0x40>)
 8003360:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003364:	080033bd 	.word	0x080033bd
 8003368:	080033d1 	.word	0x080033d1
 800336c:	0800334d 	.word	0x0800334d
 8003370:	0800334d 	.word	0x0800334d
 8003374:	0800334d 	.word	0x0800334d
 8003378:	0800334d 	.word	0x0800334d
 800337c:	080033d1 	.word	0x080033d1
 8003380:	0800334d 	.word	0x0800334d
 8003384:	0800334d 	.word	0x0800334d
 8003388:	0800334d 	.word	0x0800334d
 800338c:	0800334d 	.word	0x0800334d
 8003390:	080034dd 	.word	0x080034dd
 8003394:	08003401 	.word	0x08003401
 8003398:	080034bf 	.word	0x080034bf
 800339c:	0800334d 	.word	0x0800334d
 80033a0:	0800334d 	.word	0x0800334d
 80033a4:	080034ff 	.word	0x080034ff
 80033a8:	0800334d 	.word	0x0800334d
 80033ac:	08003401 	.word	0x08003401
 80033b0:	0800334d 	.word	0x0800334d
 80033b4:	0800334d 	.word	0x0800334d
 80033b8:	080034c7 	.word	0x080034c7
 80033bc:	682b      	ldr	r3, [r5, #0]
 80033be:	1d1a      	adds	r2, r3, #4
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	602a      	str	r2, [r5, #0]
 80033c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80033c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80033cc:	2301      	movs	r3, #1
 80033ce:	e0a3      	b.n	8003518 <_printf_i+0x1f4>
 80033d0:	6820      	ldr	r0, [r4, #0]
 80033d2:	6829      	ldr	r1, [r5, #0]
 80033d4:	0606      	lsls	r6, r0, #24
 80033d6:	f101 0304 	add.w	r3, r1, #4
 80033da:	d50a      	bpl.n	80033f2 <_printf_i+0xce>
 80033dc:	680e      	ldr	r6, [r1, #0]
 80033de:	602b      	str	r3, [r5, #0]
 80033e0:	2e00      	cmp	r6, #0
 80033e2:	da03      	bge.n	80033ec <_printf_i+0xc8>
 80033e4:	232d      	movs	r3, #45	; 0x2d
 80033e6:	4276      	negs	r6, r6
 80033e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80033ec:	485e      	ldr	r0, [pc, #376]	; (8003568 <_printf_i+0x244>)
 80033ee:	230a      	movs	r3, #10
 80033f0:	e019      	b.n	8003426 <_printf_i+0x102>
 80033f2:	680e      	ldr	r6, [r1, #0]
 80033f4:	602b      	str	r3, [r5, #0]
 80033f6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80033fa:	bf18      	it	ne
 80033fc:	b236      	sxthne	r6, r6
 80033fe:	e7ef      	b.n	80033e0 <_printf_i+0xbc>
 8003400:	682b      	ldr	r3, [r5, #0]
 8003402:	6820      	ldr	r0, [r4, #0]
 8003404:	1d19      	adds	r1, r3, #4
 8003406:	6029      	str	r1, [r5, #0]
 8003408:	0601      	lsls	r1, r0, #24
 800340a:	d501      	bpl.n	8003410 <_printf_i+0xec>
 800340c:	681e      	ldr	r6, [r3, #0]
 800340e:	e002      	b.n	8003416 <_printf_i+0xf2>
 8003410:	0646      	lsls	r6, r0, #25
 8003412:	d5fb      	bpl.n	800340c <_printf_i+0xe8>
 8003414:	881e      	ldrh	r6, [r3, #0]
 8003416:	4854      	ldr	r0, [pc, #336]	; (8003568 <_printf_i+0x244>)
 8003418:	2f6f      	cmp	r7, #111	; 0x6f
 800341a:	bf0c      	ite	eq
 800341c:	2308      	moveq	r3, #8
 800341e:	230a      	movne	r3, #10
 8003420:	2100      	movs	r1, #0
 8003422:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003426:	6865      	ldr	r5, [r4, #4]
 8003428:	60a5      	str	r5, [r4, #8]
 800342a:	2d00      	cmp	r5, #0
 800342c:	bfa2      	ittt	ge
 800342e:	6821      	ldrge	r1, [r4, #0]
 8003430:	f021 0104 	bicge.w	r1, r1, #4
 8003434:	6021      	strge	r1, [r4, #0]
 8003436:	b90e      	cbnz	r6, 800343c <_printf_i+0x118>
 8003438:	2d00      	cmp	r5, #0
 800343a:	d04d      	beq.n	80034d8 <_printf_i+0x1b4>
 800343c:	4615      	mov	r5, r2
 800343e:	fbb6 f1f3 	udiv	r1, r6, r3
 8003442:	fb03 6711 	mls	r7, r3, r1, r6
 8003446:	5dc7      	ldrb	r7, [r0, r7]
 8003448:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800344c:	4637      	mov	r7, r6
 800344e:	42bb      	cmp	r3, r7
 8003450:	460e      	mov	r6, r1
 8003452:	d9f4      	bls.n	800343e <_printf_i+0x11a>
 8003454:	2b08      	cmp	r3, #8
 8003456:	d10b      	bne.n	8003470 <_printf_i+0x14c>
 8003458:	6823      	ldr	r3, [r4, #0]
 800345a:	07de      	lsls	r6, r3, #31
 800345c:	d508      	bpl.n	8003470 <_printf_i+0x14c>
 800345e:	6923      	ldr	r3, [r4, #16]
 8003460:	6861      	ldr	r1, [r4, #4]
 8003462:	4299      	cmp	r1, r3
 8003464:	bfde      	ittt	le
 8003466:	2330      	movle	r3, #48	; 0x30
 8003468:	f805 3c01 	strble.w	r3, [r5, #-1]
 800346c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003470:	1b52      	subs	r2, r2, r5
 8003472:	6122      	str	r2, [r4, #16]
 8003474:	f8cd a000 	str.w	sl, [sp]
 8003478:	464b      	mov	r3, r9
 800347a:	aa03      	add	r2, sp, #12
 800347c:	4621      	mov	r1, r4
 800347e:	4640      	mov	r0, r8
 8003480:	f7ff fee2 	bl	8003248 <_printf_common>
 8003484:	3001      	adds	r0, #1
 8003486:	d14c      	bne.n	8003522 <_printf_i+0x1fe>
 8003488:	f04f 30ff 	mov.w	r0, #4294967295
 800348c:	b004      	add	sp, #16
 800348e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003492:	4835      	ldr	r0, [pc, #212]	; (8003568 <_printf_i+0x244>)
 8003494:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003498:	6829      	ldr	r1, [r5, #0]
 800349a:	6823      	ldr	r3, [r4, #0]
 800349c:	f851 6b04 	ldr.w	r6, [r1], #4
 80034a0:	6029      	str	r1, [r5, #0]
 80034a2:	061d      	lsls	r5, r3, #24
 80034a4:	d514      	bpl.n	80034d0 <_printf_i+0x1ac>
 80034a6:	07df      	lsls	r7, r3, #31
 80034a8:	bf44      	itt	mi
 80034aa:	f043 0320 	orrmi.w	r3, r3, #32
 80034ae:	6023      	strmi	r3, [r4, #0]
 80034b0:	b91e      	cbnz	r6, 80034ba <_printf_i+0x196>
 80034b2:	6823      	ldr	r3, [r4, #0]
 80034b4:	f023 0320 	bic.w	r3, r3, #32
 80034b8:	6023      	str	r3, [r4, #0]
 80034ba:	2310      	movs	r3, #16
 80034bc:	e7b0      	b.n	8003420 <_printf_i+0xfc>
 80034be:	6823      	ldr	r3, [r4, #0]
 80034c0:	f043 0320 	orr.w	r3, r3, #32
 80034c4:	6023      	str	r3, [r4, #0]
 80034c6:	2378      	movs	r3, #120	; 0x78
 80034c8:	4828      	ldr	r0, [pc, #160]	; (800356c <_printf_i+0x248>)
 80034ca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80034ce:	e7e3      	b.n	8003498 <_printf_i+0x174>
 80034d0:	0659      	lsls	r1, r3, #25
 80034d2:	bf48      	it	mi
 80034d4:	b2b6      	uxthmi	r6, r6
 80034d6:	e7e6      	b.n	80034a6 <_printf_i+0x182>
 80034d8:	4615      	mov	r5, r2
 80034da:	e7bb      	b.n	8003454 <_printf_i+0x130>
 80034dc:	682b      	ldr	r3, [r5, #0]
 80034de:	6826      	ldr	r6, [r4, #0]
 80034e0:	6961      	ldr	r1, [r4, #20]
 80034e2:	1d18      	adds	r0, r3, #4
 80034e4:	6028      	str	r0, [r5, #0]
 80034e6:	0635      	lsls	r5, r6, #24
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	d501      	bpl.n	80034f0 <_printf_i+0x1cc>
 80034ec:	6019      	str	r1, [r3, #0]
 80034ee:	e002      	b.n	80034f6 <_printf_i+0x1d2>
 80034f0:	0670      	lsls	r0, r6, #25
 80034f2:	d5fb      	bpl.n	80034ec <_printf_i+0x1c8>
 80034f4:	8019      	strh	r1, [r3, #0]
 80034f6:	2300      	movs	r3, #0
 80034f8:	6123      	str	r3, [r4, #16]
 80034fa:	4615      	mov	r5, r2
 80034fc:	e7ba      	b.n	8003474 <_printf_i+0x150>
 80034fe:	682b      	ldr	r3, [r5, #0]
 8003500:	1d1a      	adds	r2, r3, #4
 8003502:	602a      	str	r2, [r5, #0]
 8003504:	681d      	ldr	r5, [r3, #0]
 8003506:	6862      	ldr	r2, [r4, #4]
 8003508:	2100      	movs	r1, #0
 800350a:	4628      	mov	r0, r5
 800350c:	f7fc fe68 	bl	80001e0 <memchr>
 8003510:	b108      	cbz	r0, 8003516 <_printf_i+0x1f2>
 8003512:	1b40      	subs	r0, r0, r5
 8003514:	6060      	str	r0, [r4, #4]
 8003516:	6863      	ldr	r3, [r4, #4]
 8003518:	6123      	str	r3, [r4, #16]
 800351a:	2300      	movs	r3, #0
 800351c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003520:	e7a8      	b.n	8003474 <_printf_i+0x150>
 8003522:	6923      	ldr	r3, [r4, #16]
 8003524:	462a      	mov	r2, r5
 8003526:	4649      	mov	r1, r9
 8003528:	4640      	mov	r0, r8
 800352a:	47d0      	blx	sl
 800352c:	3001      	adds	r0, #1
 800352e:	d0ab      	beq.n	8003488 <_printf_i+0x164>
 8003530:	6823      	ldr	r3, [r4, #0]
 8003532:	079b      	lsls	r3, r3, #30
 8003534:	d413      	bmi.n	800355e <_printf_i+0x23a>
 8003536:	68e0      	ldr	r0, [r4, #12]
 8003538:	9b03      	ldr	r3, [sp, #12]
 800353a:	4298      	cmp	r0, r3
 800353c:	bfb8      	it	lt
 800353e:	4618      	movlt	r0, r3
 8003540:	e7a4      	b.n	800348c <_printf_i+0x168>
 8003542:	2301      	movs	r3, #1
 8003544:	4632      	mov	r2, r6
 8003546:	4649      	mov	r1, r9
 8003548:	4640      	mov	r0, r8
 800354a:	47d0      	blx	sl
 800354c:	3001      	adds	r0, #1
 800354e:	d09b      	beq.n	8003488 <_printf_i+0x164>
 8003550:	3501      	adds	r5, #1
 8003552:	68e3      	ldr	r3, [r4, #12]
 8003554:	9903      	ldr	r1, [sp, #12]
 8003556:	1a5b      	subs	r3, r3, r1
 8003558:	42ab      	cmp	r3, r5
 800355a:	dcf2      	bgt.n	8003542 <_printf_i+0x21e>
 800355c:	e7eb      	b.n	8003536 <_printf_i+0x212>
 800355e:	2500      	movs	r5, #0
 8003560:	f104 0619 	add.w	r6, r4, #25
 8003564:	e7f5      	b.n	8003552 <_printf_i+0x22e>
 8003566:	bf00      	nop
 8003568:	0800574e 	.word	0x0800574e
 800356c:	0800575f 	.word	0x0800575f

08003570 <iprintf>:
 8003570:	b40f      	push	{r0, r1, r2, r3}
 8003572:	4b0a      	ldr	r3, [pc, #40]	; (800359c <iprintf+0x2c>)
 8003574:	b513      	push	{r0, r1, r4, lr}
 8003576:	681c      	ldr	r4, [r3, #0]
 8003578:	b124      	cbz	r4, 8003584 <iprintf+0x14>
 800357a:	69a3      	ldr	r3, [r4, #24]
 800357c:	b913      	cbnz	r3, 8003584 <iprintf+0x14>
 800357e:	4620      	mov	r0, r4
 8003580:	f000 fee0 	bl	8004344 <__sinit>
 8003584:	ab05      	add	r3, sp, #20
 8003586:	9a04      	ldr	r2, [sp, #16]
 8003588:	68a1      	ldr	r1, [r4, #8]
 800358a:	9301      	str	r3, [sp, #4]
 800358c:	4620      	mov	r0, r4
 800358e:	f001 fc39 	bl	8004e04 <_vfiprintf_r>
 8003592:	b002      	add	sp, #8
 8003594:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003598:	b004      	add	sp, #16
 800359a:	4770      	bx	lr
 800359c:	2000000c 	.word	0x2000000c

080035a0 <quorem>:
 80035a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035a4:	6903      	ldr	r3, [r0, #16]
 80035a6:	690c      	ldr	r4, [r1, #16]
 80035a8:	42a3      	cmp	r3, r4
 80035aa:	4607      	mov	r7, r0
 80035ac:	f2c0 8081 	blt.w	80036b2 <quorem+0x112>
 80035b0:	3c01      	subs	r4, #1
 80035b2:	f101 0814 	add.w	r8, r1, #20
 80035b6:	f100 0514 	add.w	r5, r0, #20
 80035ba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80035be:	9301      	str	r3, [sp, #4]
 80035c0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80035c4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80035c8:	3301      	adds	r3, #1
 80035ca:	429a      	cmp	r2, r3
 80035cc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80035d0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80035d4:	fbb2 f6f3 	udiv	r6, r2, r3
 80035d8:	d331      	bcc.n	800363e <quorem+0x9e>
 80035da:	f04f 0e00 	mov.w	lr, #0
 80035de:	4640      	mov	r0, r8
 80035e0:	46ac      	mov	ip, r5
 80035e2:	46f2      	mov	sl, lr
 80035e4:	f850 2b04 	ldr.w	r2, [r0], #4
 80035e8:	b293      	uxth	r3, r2
 80035ea:	fb06 e303 	mla	r3, r6, r3, lr
 80035ee:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80035f2:	b29b      	uxth	r3, r3
 80035f4:	ebaa 0303 	sub.w	r3, sl, r3
 80035f8:	f8dc a000 	ldr.w	sl, [ip]
 80035fc:	0c12      	lsrs	r2, r2, #16
 80035fe:	fa13 f38a 	uxtah	r3, r3, sl
 8003602:	fb06 e202 	mla	r2, r6, r2, lr
 8003606:	9300      	str	r3, [sp, #0]
 8003608:	9b00      	ldr	r3, [sp, #0]
 800360a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800360e:	b292      	uxth	r2, r2
 8003610:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8003614:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003618:	f8bd 3000 	ldrh.w	r3, [sp]
 800361c:	4581      	cmp	r9, r0
 800361e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003622:	f84c 3b04 	str.w	r3, [ip], #4
 8003626:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800362a:	d2db      	bcs.n	80035e4 <quorem+0x44>
 800362c:	f855 300b 	ldr.w	r3, [r5, fp]
 8003630:	b92b      	cbnz	r3, 800363e <quorem+0x9e>
 8003632:	9b01      	ldr	r3, [sp, #4]
 8003634:	3b04      	subs	r3, #4
 8003636:	429d      	cmp	r5, r3
 8003638:	461a      	mov	r2, r3
 800363a:	d32e      	bcc.n	800369a <quorem+0xfa>
 800363c:	613c      	str	r4, [r7, #16]
 800363e:	4638      	mov	r0, r7
 8003640:	f001 f9be 	bl	80049c0 <__mcmp>
 8003644:	2800      	cmp	r0, #0
 8003646:	db24      	blt.n	8003692 <quorem+0xf2>
 8003648:	3601      	adds	r6, #1
 800364a:	4628      	mov	r0, r5
 800364c:	f04f 0c00 	mov.w	ip, #0
 8003650:	f858 2b04 	ldr.w	r2, [r8], #4
 8003654:	f8d0 e000 	ldr.w	lr, [r0]
 8003658:	b293      	uxth	r3, r2
 800365a:	ebac 0303 	sub.w	r3, ip, r3
 800365e:	0c12      	lsrs	r2, r2, #16
 8003660:	fa13 f38e 	uxtah	r3, r3, lr
 8003664:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8003668:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800366c:	b29b      	uxth	r3, r3
 800366e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003672:	45c1      	cmp	r9, r8
 8003674:	f840 3b04 	str.w	r3, [r0], #4
 8003678:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800367c:	d2e8      	bcs.n	8003650 <quorem+0xb0>
 800367e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003682:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003686:	b922      	cbnz	r2, 8003692 <quorem+0xf2>
 8003688:	3b04      	subs	r3, #4
 800368a:	429d      	cmp	r5, r3
 800368c:	461a      	mov	r2, r3
 800368e:	d30a      	bcc.n	80036a6 <quorem+0x106>
 8003690:	613c      	str	r4, [r7, #16]
 8003692:	4630      	mov	r0, r6
 8003694:	b003      	add	sp, #12
 8003696:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800369a:	6812      	ldr	r2, [r2, #0]
 800369c:	3b04      	subs	r3, #4
 800369e:	2a00      	cmp	r2, #0
 80036a0:	d1cc      	bne.n	800363c <quorem+0x9c>
 80036a2:	3c01      	subs	r4, #1
 80036a4:	e7c7      	b.n	8003636 <quorem+0x96>
 80036a6:	6812      	ldr	r2, [r2, #0]
 80036a8:	3b04      	subs	r3, #4
 80036aa:	2a00      	cmp	r2, #0
 80036ac:	d1f0      	bne.n	8003690 <quorem+0xf0>
 80036ae:	3c01      	subs	r4, #1
 80036b0:	e7eb      	b.n	800368a <quorem+0xea>
 80036b2:	2000      	movs	r0, #0
 80036b4:	e7ee      	b.n	8003694 <quorem+0xf4>
	...

080036b8 <_dtoa_r>:
 80036b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036bc:	ed2d 8b04 	vpush	{d8-d9}
 80036c0:	ec57 6b10 	vmov	r6, r7, d0
 80036c4:	b093      	sub	sp, #76	; 0x4c
 80036c6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80036c8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80036cc:	9106      	str	r1, [sp, #24]
 80036ce:	ee10 aa10 	vmov	sl, s0
 80036d2:	4604      	mov	r4, r0
 80036d4:	9209      	str	r2, [sp, #36]	; 0x24
 80036d6:	930c      	str	r3, [sp, #48]	; 0x30
 80036d8:	46bb      	mov	fp, r7
 80036da:	b975      	cbnz	r5, 80036fa <_dtoa_r+0x42>
 80036dc:	2010      	movs	r0, #16
 80036de:	f000 fed7 	bl	8004490 <malloc>
 80036e2:	4602      	mov	r2, r0
 80036e4:	6260      	str	r0, [r4, #36]	; 0x24
 80036e6:	b920      	cbnz	r0, 80036f2 <_dtoa_r+0x3a>
 80036e8:	4ba7      	ldr	r3, [pc, #668]	; (8003988 <_dtoa_r+0x2d0>)
 80036ea:	21ea      	movs	r1, #234	; 0xea
 80036ec:	48a7      	ldr	r0, [pc, #668]	; (800398c <_dtoa_r+0x2d4>)
 80036ee:	f001 fddf 	bl	80052b0 <__assert_func>
 80036f2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80036f6:	6005      	str	r5, [r0, #0]
 80036f8:	60c5      	str	r5, [r0, #12]
 80036fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80036fc:	6819      	ldr	r1, [r3, #0]
 80036fe:	b151      	cbz	r1, 8003716 <_dtoa_r+0x5e>
 8003700:	685a      	ldr	r2, [r3, #4]
 8003702:	604a      	str	r2, [r1, #4]
 8003704:	2301      	movs	r3, #1
 8003706:	4093      	lsls	r3, r2
 8003708:	608b      	str	r3, [r1, #8]
 800370a:	4620      	mov	r0, r4
 800370c:	f000 ff16 	bl	800453c <_Bfree>
 8003710:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003712:	2200      	movs	r2, #0
 8003714:	601a      	str	r2, [r3, #0]
 8003716:	1e3b      	subs	r3, r7, #0
 8003718:	bfaa      	itet	ge
 800371a:	2300      	movge	r3, #0
 800371c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8003720:	f8c8 3000 	strge.w	r3, [r8]
 8003724:	4b9a      	ldr	r3, [pc, #616]	; (8003990 <_dtoa_r+0x2d8>)
 8003726:	bfbc      	itt	lt
 8003728:	2201      	movlt	r2, #1
 800372a:	f8c8 2000 	strlt.w	r2, [r8]
 800372e:	ea33 030b 	bics.w	r3, r3, fp
 8003732:	d11b      	bne.n	800376c <_dtoa_r+0xb4>
 8003734:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003736:	f242 730f 	movw	r3, #9999	; 0x270f
 800373a:	6013      	str	r3, [r2, #0]
 800373c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8003740:	4333      	orrs	r3, r6
 8003742:	f000 8592 	beq.w	800426a <_dtoa_r+0xbb2>
 8003746:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003748:	b963      	cbnz	r3, 8003764 <_dtoa_r+0xac>
 800374a:	4b92      	ldr	r3, [pc, #584]	; (8003994 <_dtoa_r+0x2dc>)
 800374c:	e022      	b.n	8003794 <_dtoa_r+0xdc>
 800374e:	4b92      	ldr	r3, [pc, #584]	; (8003998 <_dtoa_r+0x2e0>)
 8003750:	9301      	str	r3, [sp, #4]
 8003752:	3308      	adds	r3, #8
 8003754:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8003756:	6013      	str	r3, [r2, #0]
 8003758:	9801      	ldr	r0, [sp, #4]
 800375a:	b013      	add	sp, #76	; 0x4c
 800375c:	ecbd 8b04 	vpop	{d8-d9}
 8003760:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003764:	4b8b      	ldr	r3, [pc, #556]	; (8003994 <_dtoa_r+0x2dc>)
 8003766:	9301      	str	r3, [sp, #4]
 8003768:	3303      	adds	r3, #3
 800376a:	e7f3      	b.n	8003754 <_dtoa_r+0x9c>
 800376c:	2200      	movs	r2, #0
 800376e:	2300      	movs	r3, #0
 8003770:	4650      	mov	r0, sl
 8003772:	4659      	mov	r1, fp
 8003774:	f7fd f9a8 	bl	8000ac8 <__aeabi_dcmpeq>
 8003778:	ec4b ab19 	vmov	d9, sl, fp
 800377c:	4680      	mov	r8, r0
 800377e:	b158      	cbz	r0, 8003798 <_dtoa_r+0xe0>
 8003780:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003782:	2301      	movs	r3, #1
 8003784:	6013      	str	r3, [r2, #0]
 8003786:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003788:	2b00      	cmp	r3, #0
 800378a:	f000 856b 	beq.w	8004264 <_dtoa_r+0xbac>
 800378e:	4883      	ldr	r0, [pc, #524]	; (800399c <_dtoa_r+0x2e4>)
 8003790:	6018      	str	r0, [r3, #0]
 8003792:	1e43      	subs	r3, r0, #1
 8003794:	9301      	str	r3, [sp, #4]
 8003796:	e7df      	b.n	8003758 <_dtoa_r+0xa0>
 8003798:	ec4b ab10 	vmov	d0, sl, fp
 800379c:	aa10      	add	r2, sp, #64	; 0x40
 800379e:	a911      	add	r1, sp, #68	; 0x44
 80037a0:	4620      	mov	r0, r4
 80037a2:	f001 f9b3 	bl	8004b0c <__d2b>
 80037a6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80037aa:	ee08 0a10 	vmov	s16, r0
 80037ae:	2d00      	cmp	r5, #0
 80037b0:	f000 8084 	beq.w	80038bc <_dtoa_r+0x204>
 80037b4:	ee19 3a90 	vmov	r3, s19
 80037b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80037bc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80037c0:	4656      	mov	r6, sl
 80037c2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80037c6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80037ca:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80037ce:	4b74      	ldr	r3, [pc, #464]	; (80039a0 <_dtoa_r+0x2e8>)
 80037d0:	2200      	movs	r2, #0
 80037d2:	4630      	mov	r0, r6
 80037d4:	4639      	mov	r1, r7
 80037d6:	f7fc fd57 	bl	8000288 <__aeabi_dsub>
 80037da:	a365      	add	r3, pc, #404	; (adr r3, 8003970 <_dtoa_r+0x2b8>)
 80037dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037e0:	f7fc ff0a 	bl	80005f8 <__aeabi_dmul>
 80037e4:	a364      	add	r3, pc, #400	; (adr r3, 8003978 <_dtoa_r+0x2c0>)
 80037e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037ea:	f7fc fd4f 	bl	800028c <__adddf3>
 80037ee:	4606      	mov	r6, r0
 80037f0:	4628      	mov	r0, r5
 80037f2:	460f      	mov	r7, r1
 80037f4:	f7fc fe96 	bl	8000524 <__aeabi_i2d>
 80037f8:	a361      	add	r3, pc, #388	; (adr r3, 8003980 <_dtoa_r+0x2c8>)
 80037fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037fe:	f7fc fefb 	bl	80005f8 <__aeabi_dmul>
 8003802:	4602      	mov	r2, r0
 8003804:	460b      	mov	r3, r1
 8003806:	4630      	mov	r0, r6
 8003808:	4639      	mov	r1, r7
 800380a:	f7fc fd3f 	bl	800028c <__adddf3>
 800380e:	4606      	mov	r6, r0
 8003810:	460f      	mov	r7, r1
 8003812:	f7fd f9a1 	bl	8000b58 <__aeabi_d2iz>
 8003816:	2200      	movs	r2, #0
 8003818:	9000      	str	r0, [sp, #0]
 800381a:	2300      	movs	r3, #0
 800381c:	4630      	mov	r0, r6
 800381e:	4639      	mov	r1, r7
 8003820:	f7fd f95c 	bl	8000adc <__aeabi_dcmplt>
 8003824:	b150      	cbz	r0, 800383c <_dtoa_r+0x184>
 8003826:	9800      	ldr	r0, [sp, #0]
 8003828:	f7fc fe7c 	bl	8000524 <__aeabi_i2d>
 800382c:	4632      	mov	r2, r6
 800382e:	463b      	mov	r3, r7
 8003830:	f7fd f94a 	bl	8000ac8 <__aeabi_dcmpeq>
 8003834:	b910      	cbnz	r0, 800383c <_dtoa_r+0x184>
 8003836:	9b00      	ldr	r3, [sp, #0]
 8003838:	3b01      	subs	r3, #1
 800383a:	9300      	str	r3, [sp, #0]
 800383c:	9b00      	ldr	r3, [sp, #0]
 800383e:	2b16      	cmp	r3, #22
 8003840:	d85a      	bhi.n	80038f8 <_dtoa_r+0x240>
 8003842:	9a00      	ldr	r2, [sp, #0]
 8003844:	4b57      	ldr	r3, [pc, #348]	; (80039a4 <_dtoa_r+0x2ec>)
 8003846:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800384a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800384e:	ec51 0b19 	vmov	r0, r1, d9
 8003852:	f7fd f943 	bl	8000adc <__aeabi_dcmplt>
 8003856:	2800      	cmp	r0, #0
 8003858:	d050      	beq.n	80038fc <_dtoa_r+0x244>
 800385a:	9b00      	ldr	r3, [sp, #0]
 800385c:	3b01      	subs	r3, #1
 800385e:	9300      	str	r3, [sp, #0]
 8003860:	2300      	movs	r3, #0
 8003862:	930b      	str	r3, [sp, #44]	; 0x2c
 8003864:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003866:	1b5d      	subs	r5, r3, r5
 8003868:	1e6b      	subs	r3, r5, #1
 800386a:	9305      	str	r3, [sp, #20]
 800386c:	bf45      	ittet	mi
 800386e:	f1c5 0301 	rsbmi	r3, r5, #1
 8003872:	9304      	strmi	r3, [sp, #16]
 8003874:	2300      	movpl	r3, #0
 8003876:	2300      	movmi	r3, #0
 8003878:	bf4c      	ite	mi
 800387a:	9305      	strmi	r3, [sp, #20]
 800387c:	9304      	strpl	r3, [sp, #16]
 800387e:	9b00      	ldr	r3, [sp, #0]
 8003880:	2b00      	cmp	r3, #0
 8003882:	db3d      	blt.n	8003900 <_dtoa_r+0x248>
 8003884:	9b05      	ldr	r3, [sp, #20]
 8003886:	9a00      	ldr	r2, [sp, #0]
 8003888:	920a      	str	r2, [sp, #40]	; 0x28
 800388a:	4413      	add	r3, r2
 800388c:	9305      	str	r3, [sp, #20]
 800388e:	2300      	movs	r3, #0
 8003890:	9307      	str	r3, [sp, #28]
 8003892:	9b06      	ldr	r3, [sp, #24]
 8003894:	2b09      	cmp	r3, #9
 8003896:	f200 8089 	bhi.w	80039ac <_dtoa_r+0x2f4>
 800389a:	2b05      	cmp	r3, #5
 800389c:	bfc4      	itt	gt
 800389e:	3b04      	subgt	r3, #4
 80038a0:	9306      	strgt	r3, [sp, #24]
 80038a2:	9b06      	ldr	r3, [sp, #24]
 80038a4:	f1a3 0302 	sub.w	r3, r3, #2
 80038a8:	bfcc      	ite	gt
 80038aa:	2500      	movgt	r5, #0
 80038ac:	2501      	movle	r5, #1
 80038ae:	2b03      	cmp	r3, #3
 80038b0:	f200 8087 	bhi.w	80039c2 <_dtoa_r+0x30a>
 80038b4:	e8df f003 	tbb	[pc, r3]
 80038b8:	59383a2d 	.word	0x59383a2d
 80038bc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80038c0:	441d      	add	r5, r3
 80038c2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80038c6:	2b20      	cmp	r3, #32
 80038c8:	bfc1      	itttt	gt
 80038ca:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80038ce:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80038d2:	fa0b f303 	lslgt.w	r3, fp, r3
 80038d6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80038da:	bfda      	itte	le
 80038dc:	f1c3 0320 	rsble	r3, r3, #32
 80038e0:	fa06 f003 	lslle.w	r0, r6, r3
 80038e4:	4318      	orrgt	r0, r3
 80038e6:	f7fc fe0d 	bl	8000504 <__aeabi_ui2d>
 80038ea:	2301      	movs	r3, #1
 80038ec:	4606      	mov	r6, r0
 80038ee:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80038f2:	3d01      	subs	r5, #1
 80038f4:	930e      	str	r3, [sp, #56]	; 0x38
 80038f6:	e76a      	b.n	80037ce <_dtoa_r+0x116>
 80038f8:	2301      	movs	r3, #1
 80038fa:	e7b2      	b.n	8003862 <_dtoa_r+0x1aa>
 80038fc:	900b      	str	r0, [sp, #44]	; 0x2c
 80038fe:	e7b1      	b.n	8003864 <_dtoa_r+0x1ac>
 8003900:	9b04      	ldr	r3, [sp, #16]
 8003902:	9a00      	ldr	r2, [sp, #0]
 8003904:	1a9b      	subs	r3, r3, r2
 8003906:	9304      	str	r3, [sp, #16]
 8003908:	4253      	negs	r3, r2
 800390a:	9307      	str	r3, [sp, #28]
 800390c:	2300      	movs	r3, #0
 800390e:	930a      	str	r3, [sp, #40]	; 0x28
 8003910:	e7bf      	b.n	8003892 <_dtoa_r+0x1da>
 8003912:	2300      	movs	r3, #0
 8003914:	9308      	str	r3, [sp, #32]
 8003916:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003918:	2b00      	cmp	r3, #0
 800391a:	dc55      	bgt.n	80039c8 <_dtoa_r+0x310>
 800391c:	2301      	movs	r3, #1
 800391e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8003922:	461a      	mov	r2, r3
 8003924:	9209      	str	r2, [sp, #36]	; 0x24
 8003926:	e00c      	b.n	8003942 <_dtoa_r+0x28a>
 8003928:	2301      	movs	r3, #1
 800392a:	e7f3      	b.n	8003914 <_dtoa_r+0x25c>
 800392c:	2300      	movs	r3, #0
 800392e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003930:	9308      	str	r3, [sp, #32]
 8003932:	9b00      	ldr	r3, [sp, #0]
 8003934:	4413      	add	r3, r2
 8003936:	9302      	str	r3, [sp, #8]
 8003938:	3301      	adds	r3, #1
 800393a:	2b01      	cmp	r3, #1
 800393c:	9303      	str	r3, [sp, #12]
 800393e:	bfb8      	it	lt
 8003940:	2301      	movlt	r3, #1
 8003942:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8003944:	2200      	movs	r2, #0
 8003946:	6042      	str	r2, [r0, #4]
 8003948:	2204      	movs	r2, #4
 800394a:	f102 0614 	add.w	r6, r2, #20
 800394e:	429e      	cmp	r6, r3
 8003950:	6841      	ldr	r1, [r0, #4]
 8003952:	d93d      	bls.n	80039d0 <_dtoa_r+0x318>
 8003954:	4620      	mov	r0, r4
 8003956:	f000 fdb1 	bl	80044bc <_Balloc>
 800395a:	9001      	str	r0, [sp, #4]
 800395c:	2800      	cmp	r0, #0
 800395e:	d13b      	bne.n	80039d8 <_dtoa_r+0x320>
 8003960:	4b11      	ldr	r3, [pc, #68]	; (80039a8 <_dtoa_r+0x2f0>)
 8003962:	4602      	mov	r2, r0
 8003964:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8003968:	e6c0      	b.n	80036ec <_dtoa_r+0x34>
 800396a:	2301      	movs	r3, #1
 800396c:	e7df      	b.n	800392e <_dtoa_r+0x276>
 800396e:	bf00      	nop
 8003970:	636f4361 	.word	0x636f4361
 8003974:	3fd287a7 	.word	0x3fd287a7
 8003978:	8b60c8b3 	.word	0x8b60c8b3
 800397c:	3fc68a28 	.word	0x3fc68a28
 8003980:	509f79fb 	.word	0x509f79fb
 8003984:	3fd34413 	.word	0x3fd34413
 8003988:	0800577d 	.word	0x0800577d
 800398c:	08005794 	.word	0x08005794
 8003990:	7ff00000 	.word	0x7ff00000
 8003994:	08005779 	.word	0x08005779
 8003998:	08005770 	.word	0x08005770
 800399c:	0800574d 	.word	0x0800574d
 80039a0:	3ff80000 	.word	0x3ff80000
 80039a4:	080058e8 	.word	0x080058e8
 80039a8:	080057ef 	.word	0x080057ef
 80039ac:	2501      	movs	r5, #1
 80039ae:	2300      	movs	r3, #0
 80039b0:	9306      	str	r3, [sp, #24]
 80039b2:	9508      	str	r5, [sp, #32]
 80039b4:	f04f 33ff 	mov.w	r3, #4294967295
 80039b8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80039bc:	2200      	movs	r2, #0
 80039be:	2312      	movs	r3, #18
 80039c0:	e7b0      	b.n	8003924 <_dtoa_r+0x26c>
 80039c2:	2301      	movs	r3, #1
 80039c4:	9308      	str	r3, [sp, #32]
 80039c6:	e7f5      	b.n	80039b4 <_dtoa_r+0x2fc>
 80039c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80039ca:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80039ce:	e7b8      	b.n	8003942 <_dtoa_r+0x28a>
 80039d0:	3101      	adds	r1, #1
 80039d2:	6041      	str	r1, [r0, #4]
 80039d4:	0052      	lsls	r2, r2, #1
 80039d6:	e7b8      	b.n	800394a <_dtoa_r+0x292>
 80039d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80039da:	9a01      	ldr	r2, [sp, #4]
 80039dc:	601a      	str	r2, [r3, #0]
 80039de:	9b03      	ldr	r3, [sp, #12]
 80039e0:	2b0e      	cmp	r3, #14
 80039e2:	f200 809d 	bhi.w	8003b20 <_dtoa_r+0x468>
 80039e6:	2d00      	cmp	r5, #0
 80039e8:	f000 809a 	beq.w	8003b20 <_dtoa_r+0x468>
 80039ec:	9b00      	ldr	r3, [sp, #0]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	dd32      	ble.n	8003a58 <_dtoa_r+0x3a0>
 80039f2:	4ab7      	ldr	r2, [pc, #732]	; (8003cd0 <_dtoa_r+0x618>)
 80039f4:	f003 030f 	and.w	r3, r3, #15
 80039f8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80039fc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003a00:	9b00      	ldr	r3, [sp, #0]
 8003a02:	05d8      	lsls	r0, r3, #23
 8003a04:	ea4f 1723 	mov.w	r7, r3, asr #4
 8003a08:	d516      	bpl.n	8003a38 <_dtoa_r+0x380>
 8003a0a:	4bb2      	ldr	r3, [pc, #712]	; (8003cd4 <_dtoa_r+0x61c>)
 8003a0c:	ec51 0b19 	vmov	r0, r1, d9
 8003a10:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003a14:	f7fc ff1a 	bl	800084c <__aeabi_ddiv>
 8003a18:	f007 070f 	and.w	r7, r7, #15
 8003a1c:	4682      	mov	sl, r0
 8003a1e:	468b      	mov	fp, r1
 8003a20:	2503      	movs	r5, #3
 8003a22:	4eac      	ldr	r6, [pc, #688]	; (8003cd4 <_dtoa_r+0x61c>)
 8003a24:	b957      	cbnz	r7, 8003a3c <_dtoa_r+0x384>
 8003a26:	4642      	mov	r2, r8
 8003a28:	464b      	mov	r3, r9
 8003a2a:	4650      	mov	r0, sl
 8003a2c:	4659      	mov	r1, fp
 8003a2e:	f7fc ff0d 	bl	800084c <__aeabi_ddiv>
 8003a32:	4682      	mov	sl, r0
 8003a34:	468b      	mov	fp, r1
 8003a36:	e028      	b.n	8003a8a <_dtoa_r+0x3d2>
 8003a38:	2502      	movs	r5, #2
 8003a3a:	e7f2      	b.n	8003a22 <_dtoa_r+0x36a>
 8003a3c:	07f9      	lsls	r1, r7, #31
 8003a3e:	d508      	bpl.n	8003a52 <_dtoa_r+0x39a>
 8003a40:	4640      	mov	r0, r8
 8003a42:	4649      	mov	r1, r9
 8003a44:	e9d6 2300 	ldrd	r2, r3, [r6]
 8003a48:	f7fc fdd6 	bl	80005f8 <__aeabi_dmul>
 8003a4c:	3501      	adds	r5, #1
 8003a4e:	4680      	mov	r8, r0
 8003a50:	4689      	mov	r9, r1
 8003a52:	107f      	asrs	r7, r7, #1
 8003a54:	3608      	adds	r6, #8
 8003a56:	e7e5      	b.n	8003a24 <_dtoa_r+0x36c>
 8003a58:	f000 809b 	beq.w	8003b92 <_dtoa_r+0x4da>
 8003a5c:	9b00      	ldr	r3, [sp, #0]
 8003a5e:	4f9d      	ldr	r7, [pc, #628]	; (8003cd4 <_dtoa_r+0x61c>)
 8003a60:	425e      	negs	r6, r3
 8003a62:	4b9b      	ldr	r3, [pc, #620]	; (8003cd0 <_dtoa_r+0x618>)
 8003a64:	f006 020f 	and.w	r2, r6, #15
 8003a68:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a70:	ec51 0b19 	vmov	r0, r1, d9
 8003a74:	f7fc fdc0 	bl	80005f8 <__aeabi_dmul>
 8003a78:	1136      	asrs	r6, r6, #4
 8003a7a:	4682      	mov	sl, r0
 8003a7c:	468b      	mov	fp, r1
 8003a7e:	2300      	movs	r3, #0
 8003a80:	2502      	movs	r5, #2
 8003a82:	2e00      	cmp	r6, #0
 8003a84:	d17a      	bne.n	8003b7c <_dtoa_r+0x4c4>
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d1d3      	bne.n	8003a32 <_dtoa_r+0x37a>
 8003a8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	f000 8082 	beq.w	8003b96 <_dtoa_r+0x4de>
 8003a92:	4b91      	ldr	r3, [pc, #580]	; (8003cd8 <_dtoa_r+0x620>)
 8003a94:	2200      	movs	r2, #0
 8003a96:	4650      	mov	r0, sl
 8003a98:	4659      	mov	r1, fp
 8003a9a:	f7fd f81f 	bl	8000adc <__aeabi_dcmplt>
 8003a9e:	2800      	cmp	r0, #0
 8003aa0:	d079      	beq.n	8003b96 <_dtoa_r+0x4de>
 8003aa2:	9b03      	ldr	r3, [sp, #12]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d076      	beq.n	8003b96 <_dtoa_r+0x4de>
 8003aa8:	9b02      	ldr	r3, [sp, #8]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	dd36      	ble.n	8003b1c <_dtoa_r+0x464>
 8003aae:	9b00      	ldr	r3, [sp, #0]
 8003ab0:	4650      	mov	r0, sl
 8003ab2:	4659      	mov	r1, fp
 8003ab4:	1e5f      	subs	r7, r3, #1
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	4b88      	ldr	r3, [pc, #544]	; (8003cdc <_dtoa_r+0x624>)
 8003aba:	f7fc fd9d 	bl	80005f8 <__aeabi_dmul>
 8003abe:	9e02      	ldr	r6, [sp, #8]
 8003ac0:	4682      	mov	sl, r0
 8003ac2:	468b      	mov	fp, r1
 8003ac4:	3501      	adds	r5, #1
 8003ac6:	4628      	mov	r0, r5
 8003ac8:	f7fc fd2c 	bl	8000524 <__aeabi_i2d>
 8003acc:	4652      	mov	r2, sl
 8003ace:	465b      	mov	r3, fp
 8003ad0:	f7fc fd92 	bl	80005f8 <__aeabi_dmul>
 8003ad4:	4b82      	ldr	r3, [pc, #520]	; (8003ce0 <_dtoa_r+0x628>)
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	f7fc fbd8 	bl	800028c <__adddf3>
 8003adc:	46d0      	mov	r8, sl
 8003ade:	46d9      	mov	r9, fp
 8003ae0:	4682      	mov	sl, r0
 8003ae2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8003ae6:	2e00      	cmp	r6, #0
 8003ae8:	d158      	bne.n	8003b9c <_dtoa_r+0x4e4>
 8003aea:	4b7e      	ldr	r3, [pc, #504]	; (8003ce4 <_dtoa_r+0x62c>)
 8003aec:	2200      	movs	r2, #0
 8003aee:	4640      	mov	r0, r8
 8003af0:	4649      	mov	r1, r9
 8003af2:	f7fc fbc9 	bl	8000288 <__aeabi_dsub>
 8003af6:	4652      	mov	r2, sl
 8003af8:	465b      	mov	r3, fp
 8003afa:	4680      	mov	r8, r0
 8003afc:	4689      	mov	r9, r1
 8003afe:	f7fd f80b 	bl	8000b18 <__aeabi_dcmpgt>
 8003b02:	2800      	cmp	r0, #0
 8003b04:	f040 8295 	bne.w	8004032 <_dtoa_r+0x97a>
 8003b08:	4652      	mov	r2, sl
 8003b0a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8003b0e:	4640      	mov	r0, r8
 8003b10:	4649      	mov	r1, r9
 8003b12:	f7fc ffe3 	bl	8000adc <__aeabi_dcmplt>
 8003b16:	2800      	cmp	r0, #0
 8003b18:	f040 8289 	bne.w	800402e <_dtoa_r+0x976>
 8003b1c:	ec5b ab19 	vmov	sl, fp, d9
 8003b20:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	f2c0 8148 	blt.w	8003db8 <_dtoa_r+0x700>
 8003b28:	9a00      	ldr	r2, [sp, #0]
 8003b2a:	2a0e      	cmp	r2, #14
 8003b2c:	f300 8144 	bgt.w	8003db8 <_dtoa_r+0x700>
 8003b30:	4b67      	ldr	r3, [pc, #412]	; (8003cd0 <_dtoa_r+0x618>)
 8003b32:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003b36:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003b3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	f280 80d5 	bge.w	8003cec <_dtoa_r+0x634>
 8003b42:	9b03      	ldr	r3, [sp, #12]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	f300 80d1 	bgt.w	8003cec <_dtoa_r+0x634>
 8003b4a:	f040 826f 	bne.w	800402c <_dtoa_r+0x974>
 8003b4e:	4b65      	ldr	r3, [pc, #404]	; (8003ce4 <_dtoa_r+0x62c>)
 8003b50:	2200      	movs	r2, #0
 8003b52:	4640      	mov	r0, r8
 8003b54:	4649      	mov	r1, r9
 8003b56:	f7fc fd4f 	bl	80005f8 <__aeabi_dmul>
 8003b5a:	4652      	mov	r2, sl
 8003b5c:	465b      	mov	r3, fp
 8003b5e:	f7fc ffd1 	bl	8000b04 <__aeabi_dcmpge>
 8003b62:	9e03      	ldr	r6, [sp, #12]
 8003b64:	4637      	mov	r7, r6
 8003b66:	2800      	cmp	r0, #0
 8003b68:	f040 8245 	bne.w	8003ff6 <_dtoa_r+0x93e>
 8003b6c:	9d01      	ldr	r5, [sp, #4]
 8003b6e:	2331      	movs	r3, #49	; 0x31
 8003b70:	f805 3b01 	strb.w	r3, [r5], #1
 8003b74:	9b00      	ldr	r3, [sp, #0]
 8003b76:	3301      	adds	r3, #1
 8003b78:	9300      	str	r3, [sp, #0]
 8003b7a:	e240      	b.n	8003ffe <_dtoa_r+0x946>
 8003b7c:	07f2      	lsls	r2, r6, #31
 8003b7e:	d505      	bpl.n	8003b8c <_dtoa_r+0x4d4>
 8003b80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003b84:	f7fc fd38 	bl	80005f8 <__aeabi_dmul>
 8003b88:	3501      	adds	r5, #1
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	1076      	asrs	r6, r6, #1
 8003b8e:	3708      	adds	r7, #8
 8003b90:	e777      	b.n	8003a82 <_dtoa_r+0x3ca>
 8003b92:	2502      	movs	r5, #2
 8003b94:	e779      	b.n	8003a8a <_dtoa_r+0x3d2>
 8003b96:	9f00      	ldr	r7, [sp, #0]
 8003b98:	9e03      	ldr	r6, [sp, #12]
 8003b9a:	e794      	b.n	8003ac6 <_dtoa_r+0x40e>
 8003b9c:	9901      	ldr	r1, [sp, #4]
 8003b9e:	4b4c      	ldr	r3, [pc, #304]	; (8003cd0 <_dtoa_r+0x618>)
 8003ba0:	4431      	add	r1, r6
 8003ba2:	910d      	str	r1, [sp, #52]	; 0x34
 8003ba4:	9908      	ldr	r1, [sp, #32]
 8003ba6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8003baa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8003bae:	2900      	cmp	r1, #0
 8003bb0:	d043      	beq.n	8003c3a <_dtoa_r+0x582>
 8003bb2:	494d      	ldr	r1, [pc, #308]	; (8003ce8 <_dtoa_r+0x630>)
 8003bb4:	2000      	movs	r0, #0
 8003bb6:	f7fc fe49 	bl	800084c <__aeabi_ddiv>
 8003bba:	4652      	mov	r2, sl
 8003bbc:	465b      	mov	r3, fp
 8003bbe:	f7fc fb63 	bl	8000288 <__aeabi_dsub>
 8003bc2:	9d01      	ldr	r5, [sp, #4]
 8003bc4:	4682      	mov	sl, r0
 8003bc6:	468b      	mov	fp, r1
 8003bc8:	4649      	mov	r1, r9
 8003bca:	4640      	mov	r0, r8
 8003bcc:	f7fc ffc4 	bl	8000b58 <__aeabi_d2iz>
 8003bd0:	4606      	mov	r6, r0
 8003bd2:	f7fc fca7 	bl	8000524 <__aeabi_i2d>
 8003bd6:	4602      	mov	r2, r0
 8003bd8:	460b      	mov	r3, r1
 8003bda:	4640      	mov	r0, r8
 8003bdc:	4649      	mov	r1, r9
 8003bde:	f7fc fb53 	bl	8000288 <__aeabi_dsub>
 8003be2:	3630      	adds	r6, #48	; 0x30
 8003be4:	f805 6b01 	strb.w	r6, [r5], #1
 8003be8:	4652      	mov	r2, sl
 8003bea:	465b      	mov	r3, fp
 8003bec:	4680      	mov	r8, r0
 8003bee:	4689      	mov	r9, r1
 8003bf0:	f7fc ff74 	bl	8000adc <__aeabi_dcmplt>
 8003bf4:	2800      	cmp	r0, #0
 8003bf6:	d163      	bne.n	8003cc0 <_dtoa_r+0x608>
 8003bf8:	4642      	mov	r2, r8
 8003bfa:	464b      	mov	r3, r9
 8003bfc:	4936      	ldr	r1, [pc, #216]	; (8003cd8 <_dtoa_r+0x620>)
 8003bfe:	2000      	movs	r0, #0
 8003c00:	f7fc fb42 	bl	8000288 <__aeabi_dsub>
 8003c04:	4652      	mov	r2, sl
 8003c06:	465b      	mov	r3, fp
 8003c08:	f7fc ff68 	bl	8000adc <__aeabi_dcmplt>
 8003c0c:	2800      	cmp	r0, #0
 8003c0e:	f040 80b5 	bne.w	8003d7c <_dtoa_r+0x6c4>
 8003c12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003c14:	429d      	cmp	r5, r3
 8003c16:	d081      	beq.n	8003b1c <_dtoa_r+0x464>
 8003c18:	4b30      	ldr	r3, [pc, #192]	; (8003cdc <_dtoa_r+0x624>)
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	4650      	mov	r0, sl
 8003c1e:	4659      	mov	r1, fp
 8003c20:	f7fc fcea 	bl	80005f8 <__aeabi_dmul>
 8003c24:	4b2d      	ldr	r3, [pc, #180]	; (8003cdc <_dtoa_r+0x624>)
 8003c26:	4682      	mov	sl, r0
 8003c28:	468b      	mov	fp, r1
 8003c2a:	4640      	mov	r0, r8
 8003c2c:	4649      	mov	r1, r9
 8003c2e:	2200      	movs	r2, #0
 8003c30:	f7fc fce2 	bl	80005f8 <__aeabi_dmul>
 8003c34:	4680      	mov	r8, r0
 8003c36:	4689      	mov	r9, r1
 8003c38:	e7c6      	b.n	8003bc8 <_dtoa_r+0x510>
 8003c3a:	4650      	mov	r0, sl
 8003c3c:	4659      	mov	r1, fp
 8003c3e:	f7fc fcdb 	bl	80005f8 <__aeabi_dmul>
 8003c42:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003c44:	9d01      	ldr	r5, [sp, #4]
 8003c46:	930f      	str	r3, [sp, #60]	; 0x3c
 8003c48:	4682      	mov	sl, r0
 8003c4a:	468b      	mov	fp, r1
 8003c4c:	4649      	mov	r1, r9
 8003c4e:	4640      	mov	r0, r8
 8003c50:	f7fc ff82 	bl	8000b58 <__aeabi_d2iz>
 8003c54:	4606      	mov	r6, r0
 8003c56:	f7fc fc65 	bl	8000524 <__aeabi_i2d>
 8003c5a:	3630      	adds	r6, #48	; 0x30
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	460b      	mov	r3, r1
 8003c60:	4640      	mov	r0, r8
 8003c62:	4649      	mov	r1, r9
 8003c64:	f7fc fb10 	bl	8000288 <__aeabi_dsub>
 8003c68:	f805 6b01 	strb.w	r6, [r5], #1
 8003c6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003c6e:	429d      	cmp	r5, r3
 8003c70:	4680      	mov	r8, r0
 8003c72:	4689      	mov	r9, r1
 8003c74:	f04f 0200 	mov.w	r2, #0
 8003c78:	d124      	bne.n	8003cc4 <_dtoa_r+0x60c>
 8003c7a:	4b1b      	ldr	r3, [pc, #108]	; (8003ce8 <_dtoa_r+0x630>)
 8003c7c:	4650      	mov	r0, sl
 8003c7e:	4659      	mov	r1, fp
 8003c80:	f7fc fb04 	bl	800028c <__adddf3>
 8003c84:	4602      	mov	r2, r0
 8003c86:	460b      	mov	r3, r1
 8003c88:	4640      	mov	r0, r8
 8003c8a:	4649      	mov	r1, r9
 8003c8c:	f7fc ff44 	bl	8000b18 <__aeabi_dcmpgt>
 8003c90:	2800      	cmp	r0, #0
 8003c92:	d173      	bne.n	8003d7c <_dtoa_r+0x6c4>
 8003c94:	4652      	mov	r2, sl
 8003c96:	465b      	mov	r3, fp
 8003c98:	4913      	ldr	r1, [pc, #76]	; (8003ce8 <_dtoa_r+0x630>)
 8003c9a:	2000      	movs	r0, #0
 8003c9c:	f7fc faf4 	bl	8000288 <__aeabi_dsub>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	460b      	mov	r3, r1
 8003ca4:	4640      	mov	r0, r8
 8003ca6:	4649      	mov	r1, r9
 8003ca8:	f7fc ff18 	bl	8000adc <__aeabi_dcmplt>
 8003cac:	2800      	cmp	r0, #0
 8003cae:	f43f af35 	beq.w	8003b1c <_dtoa_r+0x464>
 8003cb2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8003cb4:	1e6b      	subs	r3, r5, #1
 8003cb6:	930f      	str	r3, [sp, #60]	; 0x3c
 8003cb8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003cbc:	2b30      	cmp	r3, #48	; 0x30
 8003cbe:	d0f8      	beq.n	8003cb2 <_dtoa_r+0x5fa>
 8003cc0:	9700      	str	r7, [sp, #0]
 8003cc2:	e049      	b.n	8003d58 <_dtoa_r+0x6a0>
 8003cc4:	4b05      	ldr	r3, [pc, #20]	; (8003cdc <_dtoa_r+0x624>)
 8003cc6:	f7fc fc97 	bl	80005f8 <__aeabi_dmul>
 8003cca:	4680      	mov	r8, r0
 8003ccc:	4689      	mov	r9, r1
 8003cce:	e7bd      	b.n	8003c4c <_dtoa_r+0x594>
 8003cd0:	080058e8 	.word	0x080058e8
 8003cd4:	080058c0 	.word	0x080058c0
 8003cd8:	3ff00000 	.word	0x3ff00000
 8003cdc:	40240000 	.word	0x40240000
 8003ce0:	401c0000 	.word	0x401c0000
 8003ce4:	40140000 	.word	0x40140000
 8003ce8:	3fe00000 	.word	0x3fe00000
 8003cec:	9d01      	ldr	r5, [sp, #4]
 8003cee:	4656      	mov	r6, sl
 8003cf0:	465f      	mov	r7, fp
 8003cf2:	4642      	mov	r2, r8
 8003cf4:	464b      	mov	r3, r9
 8003cf6:	4630      	mov	r0, r6
 8003cf8:	4639      	mov	r1, r7
 8003cfa:	f7fc fda7 	bl	800084c <__aeabi_ddiv>
 8003cfe:	f7fc ff2b 	bl	8000b58 <__aeabi_d2iz>
 8003d02:	4682      	mov	sl, r0
 8003d04:	f7fc fc0e 	bl	8000524 <__aeabi_i2d>
 8003d08:	4642      	mov	r2, r8
 8003d0a:	464b      	mov	r3, r9
 8003d0c:	f7fc fc74 	bl	80005f8 <__aeabi_dmul>
 8003d10:	4602      	mov	r2, r0
 8003d12:	460b      	mov	r3, r1
 8003d14:	4630      	mov	r0, r6
 8003d16:	4639      	mov	r1, r7
 8003d18:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8003d1c:	f7fc fab4 	bl	8000288 <__aeabi_dsub>
 8003d20:	f805 6b01 	strb.w	r6, [r5], #1
 8003d24:	9e01      	ldr	r6, [sp, #4]
 8003d26:	9f03      	ldr	r7, [sp, #12]
 8003d28:	1bae      	subs	r6, r5, r6
 8003d2a:	42b7      	cmp	r7, r6
 8003d2c:	4602      	mov	r2, r0
 8003d2e:	460b      	mov	r3, r1
 8003d30:	d135      	bne.n	8003d9e <_dtoa_r+0x6e6>
 8003d32:	f7fc faab 	bl	800028c <__adddf3>
 8003d36:	4642      	mov	r2, r8
 8003d38:	464b      	mov	r3, r9
 8003d3a:	4606      	mov	r6, r0
 8003d3c:	460f      	mov	r7, r1
 8003d3e:	f7fc feeb 	bl	8000b18 <__aeabi_dcmpgt>
 8003d42:	b9d0      	cbnz	r0, 8003d7a <_dtoa_r+0x6c2>
 8003d44:	4642      	mov	r2, r8
 8003d46:	464b      	mov	r3, r9
 8003d48:	4630      	mov	r0, r6
 8003d4a:	4639      	mov	r1, r7
 8003d4c:	f7fc febc 	bl	8000ac8 <__aeabi_dcmpeq>
 8003d50:	b110      	cbz	r0, 8003d58 <_dtoa_r+0x6a0>
 8003d52:	f01a 0f01 	tst.w	sl, #1
 8003d56:	d110      	bne.n	8003d7a <_dtoa_r+0x6c2>
 8003d58:	4620      	mov	r0, r4
 8003d5a:	ee18 1a10 	vmov	r1, s16
 8003d5e:	f000 fbed 	bl	800453c <_Bfree>
 8003d62:	2300      	movs	r3, #0
 8003d64:	9800      	ldr	r0, [sp, #0]
 8003d66:	702b      	strb	r3, [r5, #0]
 8003d68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003d6a:	3001      	adds	r0, #1
 8003d6c:	6018      	str	r0, [r3, #0]
 8003d6e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	f43f acf1 	beq.w	8003758 <_dtoa_r+0xa0>
 8003d76:	601d      	str	r5, [r3, #0]
 8003d78:	e4ee      	b.n	8003758 <_dtoa_r+0xa0>
 8003d7a:	9f00      	ldr	r7, [sp, #0]
 8003d7c:	462b      	mov	r3, r5
 8003d7e:	461d      	mov	r5, r3
 8003d80:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8003d84:	2a39      	cmp	r2, #57	; 0x39
 8003d86:	d106      	bne.n	8003d96 <_dtoa_r+0x6de>
 8003d88:	9a01      	ldr	r2, [sp, #4]
 8003d8a:	429a      	cmp	r2, r3
 8003d8c:	d1f7      	bne.n	8003d7e <_dtoa_r+0x6c6>
 8003d8e:	9901      	ldr	r1, [sp, #4]
 8003d90:	2230      	movs	r2, #48	; 0x30
 8003d92:	3701      	adds	r7, #1
 8003d94:	700a      	strb	r2, [r1, #0]
 8003d96:	781a      	ldrb	r2, [r3, #0]
 8003d98:	3201      	adds	r2, #1
 8003d9a:	701a      	strb	r2, [r3, #0]
 8003d9c:	e790      	b.n	8003cc0 <_dtoa_r+0x608>
 8003d9e:	4ba6      	ldr	r3, [pc, #664]	; (8004038 <_dtoa_r+0x980>)
 8003da0:	2200      	movs	r2, #0
 8003da2:	f7fc fc29 	bl	80005f8 <__aeabi_dmul>
 8003da6:	2200      	movs	r2, #0
 8003da8:	2300      	movs	r3, #0
 8003daa:	4606      	mov	r6, r0
 8003dac:	460f      	mov	r7, r1
 8003dae:	f7fc fe8b 	bl	8000ac8 <__aeabi_dcmpeq>
 8003db2:	2800      	cmp	r0, #0
 8003db4:	d09d      	beq.n	8003cf2 <_dtoa_r+0x63a>
 8003db6:	e7cf      	b.n	8003d58 <_dtoa_r+0x6a0>
 8003db8:	9a08      	ldr	r2, [sp, #32]
 8003dba:	2a00      	cmp	r2, #0
 8003dbc:	f000 80d7 	beq.w	8003f6e <_dtoa_r+0x8b6>
 8003dc0:	9a06      	ldr	r2, [sp, #24]
 8003dc2:	2a01      	cmp	r2, #1
 8003dc4:	f300 80ba 	bgt.w	8003f3c <_dtoa_r+0x884>
 8003dc8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003dca:	2a00      	cmp	r2, #0
 8003dcc:	f000 80b2 	beq.w	8003f34 <_dtoa_r+0x87c>
 8003dd0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8003dd4:	9e07      	ldr	r6, [sp, #28]
 8003dd6:	9d04      	ldr	r5, [sp, #16]
 8003dd8:	9a04      	ldr	r2, [sp, #16]
 8003dda:	441a      	add	r2, r3
 8003ddc:	9204      	str	r2, [sp, #16]
 8003dde:	9a05      	ldr	r2, [sp, #20]
 8003de0:	2101      	movs	r1, #1
 8003de2:	441a      	add	r2, r3
 8003de4:	4620      	mov	r0, r4
 8003de6:	9205      	str	r2, [sp, #20]
 8003de8:	f000 fc60 	bl	80046ac <__i2b>
 8003dec:	4607      	mov	r7, r0
 8003dee:	2d00      	cmp	r5, #0
 8003df0:	dd0c      	ble.n	8003e0c <_dtoa_r+0x754>
 8003df2:	9b05      	ldr	r3, [sp, #20]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	dd09      	ble.n	8003e0c <_dtoa_r+0x754>
 8003df8:	42ab      	cmp	r3, r5
 8003dfa:	9a04      	ldr	r2, [sp, #16]
 8003dfc:	bfa8      	it	ge
 8003dfe:	462b      	movge	r3, r5
 8003e00:	1ad2      	subs	r2, r2, r3
 8003e02:	9204      	str	r2, [sp, #16]
 8003e04:	9a05      	ldr	r2, [sp, #20]
 8003e06:	1aed      	subs	r5, r5, r3
 8003e08:	1ad3      	subs	r3, r2, r3
 8003e0a:	9305      	str	r3, [sp, #20]
 8003e0c:	9b07      	ldr	r3, [sp, #28]
 8003e0e:	b31b      	cbz	r3, 8003e58 <_dtoa_r+0x7a0>
 8003e10:	9b08      	ldr	r3, [sp, #32]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	f000 80af 	beq.w	8003f76 <_dtoa_r+0x8be>
 8003e18:	2e00      	cmp	r6, #0
 8003e1a:	dd13      	ble.n	8003e44 <_dtoa_r+0x78c>
 8003e1c:	4639      	mov	r1, r7
 8003e1e:	4632      	mov	r2, r6
 8003e20:	4620      	mov	r0, r4
 8003e22:	f000 fd03 	bl	800482c <__pow5mult>
 8003e26:	ee18 2a10 	vmov	r2, s16
 8003e2a:	4601      	mov	r1, r0
 8003e2c:	4607      	mov	r7, r0
 8003e2e:	4620      	mov	r0, r4
 8003e30:	f000 fc52 	bl	80046d8 <__multiply>
 8003e34:	ee18 1a10 	vmov	r1, s16
 8003e38:	4680      	mov	r8, r0
 8003e3a:	4620      	mov	r0, r4
 8003e3c:	f000 fb7e 	bl	800453c <_Bfree>
 8003e40:	ee08 8a10 	vmov	s16, r8
 8003e44:	9b07      	ldr	r3, [sp, #28]
 8003e46:	1b9a      	subs	r2, r3, r6
 8003e48:	d006      	beq.n	8003e58 <_dtoa_r+0x7a0>
 8003e4a:	ee18 1a10 	vmov	r1, s16
 8003e4e:	4620      	mov	r0, r4
 8003e50:	f000 fcec 	bl	800482c <__pow5mult>
 8003e54:	ee08 0a10 	vmov	s16, r0
 8003e58:	2101      	movs	r1, #1
 8003e5a:	4620      	mov	r0, r4
 8003e5c:	f000 fc26 	bl	80046ac <__i2b>
 8003e60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	4606      	mov	r6, r0
 8003e66:	f340 8088 	ble.w	8003f7a <_dtoa_r+0x8c2>
 8003e6a:	461a      	mov	r2, r3
 8003e6c:	4601      	mov	r1, r0
 8003e6e:	4620      	mov	r0, r4
 8003e70:	f000 fcdc 	bl	800482c <__pow5mult>
 8003e74:	9b06      	ldr	r3, [sp, #24]
 8003e76:	2b01      	cmp	r3, #1
 8003e78:	4606      	mov	r6, r0
 8003e7a:	f340 8081 	ble.w	8003f80 <_dtoa_r+0x8c8>
 8003e7e:	f04f 0800 	mov.w	r8, #0
 8003e82:	6933      	ldr	r3, [r6, #16]
 8003e84:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8003e88:	6918      	ldr	r0, [r3, #16]
 8003e8a:	f000 fbbf 	bl	800460c <__hi0bits>
 8003e8e:	f1c0 0020 	rsb	r0, r0, #32
 8003e92:	9b05      	ldr	r3, [sp, #20]
 8003e94:	4418      	add	r0, r3
 8003e96:	f010 001f 	ands.w	r0, r0, #31
 8003e9a:	f000 8092 	beq.w	8003fc2 <_dtoa_r+0x90a>
 8003e9e:	f1c0 0320 	rsb	r3, r0, #32
 8003ea2:	2b04      	cmp	r3, #4
 8003ea4:	f340 808a 	ble.w	8003fbc <_dtoa_r+0x904>
 8003ea8:	f1c0 001c 	rsb	r0, r0, #28
 8003eac:	9b04      	ldr	r3, [sp, #16]
 8003eae:	4403      	add	r3, r0
 8003eb0:	9304      	str	r3, [sp, #16]
 8003eb2:	9b05      	ldr	r3, [sp, #20]
 8003eb4:	4403      	add	r3, r0
 8003eb6:	4405      	add	r5, r0
 8003eb8:	9305      	str	r3, [sp, #20]
 8003eba:	9b04      	ldr	r3, [sp, #16]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	dd07      	ble.n	8003ed0 <_dtoa_r+0x818>
 8003ec0:	ee18 1a10 	vmov	r1, s16
 8003ec4:	461a      	mov	r2, r3
 8003ec6:	4620      	mov	r0, r4
 8003ec8:	f000 fd0a 	bl	80048e0 <__lshift>
 8003ecc:	ee08 0a10 	vmov	s16, r0
 8003ed0:	9b05      	ldr	r3, [sp, #20]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	dd05      	ble.n	8003ee2 <_dtoa_r+0x82a>
 8003ed6:	4631      	mov	r1, r6
 8003ed8:	461a      	mov	r2, r3
 8003eda:	4620      	mov	r0, r4
 8003edc:	f000 fd00 	bl	80048e0 <__lshift>
 8003ee0:	4606      	mov	r6, r0
 8003ee2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d06e      	beq.n	8003fc6 <_dtoa_r+0x90e>
 8003ee8:	ee18 0a10 	vmov	r0, s16
 8003eec:	4631      	mov	r1, r6
 8003eee:	f000 fd67 	bl	80049c0 <__mcmp>
 8003ef2:	2800      	cmp	r0, #0
 8003ef4:	da67      	bge.n	8003fc6 <_dtoa_r+0x90e>
 8003ef6:	9b00      	ldr	r3, [sp, #0]
 8003ef8:	3b01      	subs	r3, #1
 8003efa:	ee18 1a10 	vmov	r1, s16
 8003efe:	9300      	str	r3, [sp, #0]
 8003f00:	220a      	movs	r2, #10
 8003f02:	2300      	movs	r3, #0
 8003f04:	4620      	mov	r0, r4
 8003f06:	f000 fb3b 	bl	8004580 <__multadd>
 8003f0a:	9b08      	ldr	r3, [sp, #32]
 8003f0c:	ee08 0a10 	vmov	s16, r0
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	f000 81b1 	beq.w	8004278 <_dtoa_r+0xbc0>
 8003f16:	2300      	movs	r3, #0
 8003f18:	4639      	mov	r1, r7
 8003f1a:	220a      	movs	r2, #10
 8003f1c:	4620      	mov	r0, r4
 8003f1e:	f000 fb2f 	bl	8004580 <__multadd>
 8003f22:	9b02      	ldr	r3, [sp, #8]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	4607      	mov	r7, r0
 8003f28:	f300 808e 	bgt.w	8004048 <_dtoa_r+0x990>
 8003f2c:	9b06      	ldr	r3, [sp, #24]
 8003f2e:	2b02      	cmp	r3, #2
 8003f30:	dc51      	bgt.n	8003fd6 <_dtoa_r+0x91e>
 8003f32:	e089      	b.n	8004048 <_dtoa_r+0x990>
 8003f34:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003f36:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8003f3a:	e74b      	b.n	8003dd4 <_dtoa_r+0x71c>
 8003f3c:	9b03      	ldr	r3, [sp, #12]
 8003f3e:	1e5e      	subs	r6, r3, #1
 8003f40:	9b07      	ldr	r3, [sp, #28]
 8003f42:	42b3      	cmp	r3, r6
 8003f44:	bfbf      	itttt	lt
 8003f46:	9b07      	ldrlt	r3, [sp, #28]
 8003f48:	9607      	strlt	r6, [sp, #28]
 8003f4a:	1af2      	sublt	r2, r6, r3
 8003f4c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8003f4e:	bfb6      	itet	lt
 8003f50:	189b      	addlt	r3, r3, r2
 8003f52:	1b9e      	subge	r6, r3, r6
 8003f54:	930a      	strlt	r3, [sp, #40]	; 0x28
 8003f56:	9b03      	ldr	r3, [sp, #12]
 8003f58:	bfb8      	it	lt
 8003f5a:	2600      	movlt	r6, #0
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	bfb7      	itett	lt
 8003f60:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8003f64:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8003f68:	1a9d      	sublt	r5, r3, r2
 8003f6a:	2300      	movlt	r3, #0
 8003f6c:	e734      	b.n	8003dd8 <_dtoa_r+0x720>
 8003f6e:	9e07      	ldr	r6, [sp, #28]
 8003f70:	9d04      	ldr	r5, [sp, #16]
 8003f72:	9f08      	ldr	r7, [sp, #32]
 8003f74:	e73b      	b.n	8003dee <_dtoa_r+0x736>
 8003f76:	9a07      	ldr	r2, [sp, #28]
 8003f78:	e767      	b.n	8003e4a <_dtoa_r+0x792>
 8003f7a:	9b06      	ldr	r3, [sp, #24]
 8003f7c:	2b01      	cmp	r3, #1
 8003f7e:	dc18      	bgt.n	8003fb2 <_dtoa_r+0x8fa>
 8003f80:	f1ba 0f00 	cmp.w	sl, #0
 8003f84:	d115      	bne.n	8003fb2 <_dtoa_r+0x8fa>
 8003f86:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8003f8a:	b993      	cbnz	r3, 8003fb2 <_dtoa_r+0x8fa>
 8003f8c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8003f90:	0d1b      	lsrs	r3, r3, #20
 8003f92:	051b      	lsls	r3, r3, #20
 8003f94:	b183      	cbz	r3, 8003fb8 <_dtoa_r+0x900>
 8003f96:	9b04      	ldr	r3, [sp, #16]
 8003f98:	3301      	adds	r3, #1
 8003f9a:	9304      	str	r3, [sp, #16]
 8003f9c:	9b05      	ldr	r3, [sp, #20]
 8003f9e:	3301      	adds	r3, #1
 8003fa0:	9305      	str	r3, [sp, #20]
 8003fa2:	f04f 0801 	mov.w	r8, #1
 8003fa6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	f47f af6a 	bne.w	8003e82 <_dtoa_r+0x7ca>
 8003fae:	2001      	movs	r0, #1
 8003fb0:	e76f      	b.n	8003e92 <_dtoa_r+0x7da>
 8003fb2:	f04f 0800 	mov.w	r8, #0
 8003fb6:	e7f6      	b.n	8003fa6 <_dtoa_r+0x8ee>
 8003fb8:	4698      	mov	r8, r3
 8003fba:	e7f4      	b.n	8003fa6 <_dtoa_r+0x8ee>
 8003fbc:	f43f af7d 	beq.w	8003eba <_dtoa_r+0x802>
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	301c      	adds	r0, #28
 8003fc4:	e772      	b.n	8003eac <_dtoa_r+0x7f4>
 8003fc6:	9b03      	ldr	r3, [sp, #12]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	dc37      	bgt.n	800403c <_dtoa_r+0x984>
 8003fcc:	9b06      	ldr	r3, [sp, #24]
 8003fce:	2b02      	cmp	r3, #2
 8003fd0:	dd34      	ble.n	800403c <_dtoa_r+0x984>
 8003fd2:	9b03      	ldr	r3, [sp, #12]
 8003fd4:	9302      	str	r3, [sp, #8]
 8003fd6:	9b02      	ldr	r3, [sp, #8]
 8003fd8:	b96b      	cbnz	r3, 8003ff6 <_dtoa_r+0x93e>
 8003fda:	4631      	mov	r1, r6
 8003fdc:	2205      	movs	r2, #5
 8003fde:	4620      	mov	r0, r4
 8003fe0:	f000 face 	bl	8004580 <__multadd>
 8003fe4:	4601      	mov	r1, r0
 8003fe6:	4606      	mov	r6, r0
 8003fe8:	ee18 0a10 	vmov	r0, s16
 8003fec:	f000 fce8 	bl	80049c0 <__mcmp>
 8003ff0:	2800      	cmp	r0, #0
 8003ff2:	f73f adbb 	bgt.w	8003b6c <_dtoa_r+0x4b4>
 8003ff6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ff8:	9d01      	ldr	r5, [sp, #4]
 8003ffa:	43db      	mvns	r3, r3
 8003ffc:	9300      	str	r3, [sp, #0]
 8003ffe:	f04f 0800 	mov.w	r8, #0
 8004002:	4631      	mov	r1, r6
 8004004:	4620      	mov	r0, r4
 8004006:	f000 fa99 	bl	800453c <_Bfree>
 800400a:	2f00      	cmp	r7, #0
 800400c:	f43f aea4 	beq.w	8003d58 <_dtoa_r+0x6a0>
 8004010:	f1b8 0f00 	cmp.w	r8, #0
 8004014:	d005      	beq.n	8004022 <_dtoa_r+0x96a>
 8004016:	45b8      	cmp	r8, r7
 8004018:	d003      	beq.n	8004022 <_dtoa_r+0x96a>
 800401a:	4641      	mov	r1, r8
 800401c:	4620      	mov	r0, r4
 800401e:	f000 fa8d 	bl	800453c <_Bfree>
 8004022:	4639      	mov	r1, r7
 8004024:	4620      	mov	r0, r4
 8004026:	f000 fa89 	bl	800453c <_Bfree>
 800402a:	e695      	b.n	8003d58 <_dtoa_r+0x6a0>
 800402c:	2600      	movs	r6, #0
 800402e:	4637      	mov	r7, r6
 8004030:	e7e1      	b.n	8003ff6 <_dtoa_r+0x93e>
 8004032:	9700      	str	r7, [sp, #0]
 8004034:	4637      	mov	r7, r6
 8004036:	e599      	b.n	8003b6c <_dtoa_r+0x4b4>
 8004038:	40240000 	.word	0x40240000
 800403c:	9b08      	ldr	r3, [sp, #32]
 800403e:	2b00      	cmp	r3, #0
 8004040:	f000 80ca 	beq.w	80041d8 <_dtoa_r+0xb20>
 8004044:	9b03      	ldr	r3, [sp, #12]
 8004046:	9302      	str	r3, [sp, #8]
 8004048:	2d00      	cmp	r5, #0
 800404a:	dd05      	ble.n	8004058 <_dtoa_r+0x9a0>
 800404c:	4639      	mov	r1, r7
 800404e:	462a      	mov	r2, r5
 8004050:	4620      	mov	r0, r4
 8004052:	f000 fc45 	bl	80048e0 <__lshift>
 8004056:	4607      	mov	r7, r0
 8004058:	f1b8 0f00 	cmp.w	r8, #0
 800405c:	d05b      	beq.n	8004116 <_dtoa_r+0xa5e>
 800405e:	6879      	ldr	r1, [r7, #4]
 8004060:	4620      	mov	r0, r4
 8004062:	f000 fa2b 	bl	80044bc <_Balloc>
 8004066:	4605      	mov	r5, r0
 8004068:	b928      	cbnz	r0, 8004076 <_dtoa_r+0x9be>
 800406a:	4b87      	ldr	r3, [pc, #540]	; (8004288 <_dtoa_r+0xbd0>)
 800406c:	4602      	mov	r2, r0
 800406e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8004072:	f7ff bb3b 	b.w	80036ec <_dtoa_r+0x34>
 8004076:	693a      	ldr	r2, [r7, #16]
 8004078:	3202      	adds	r2, #2
 800407a:	0092      	lsls	r2, r2, #2
 800407c:	f107 010c 	add.w	r1, r7, #12
 8004080:	300c      	adds	r0, #12
 8004082:	f000 fa0d 	bl	80044a0 <memcpy>
 8004086:	2201      	movs	r2, #1
 8004088:	4629      	mov	r1, r5
 800408a:	4620      	mov	r0, r4
 800408c:	f000 fc28 	bl	80048e0 <__lshift>
 8004090:	9b01      	ldr	r3, [sp, #4]
 8004092:	f103 0901 	add.w	r9, r3, #1
 8004096:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800409a:	4413      	add	r3, r2
 800409c:	9305      	str	r3, [sp, #20]
 800409e:	f00a 0301 	and.w	r3, sl, #1
 80040a2:	46b8      	mov	r8, r7
 80040a4:	9304      	str	r3, [sp, #16]
 80040a6:	4607      	mov	r7, r0
 80040a8:	4631      	mov	r1, r6
 80040aa:	ee18 0a10 	vmov	r0, s16
 80040ae:	f7ff fa77 	bl	80035a0 <quorem>
 80040b2:	4641      	mov	r1, r8
 80040b4:	9002      	str	r0, [sp, #8]
 80040b6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80040ba:	ee18 0a10 	vmov	r0, s16
 80040be:	f000 fc7f 	bl	80049c0 <__mcmp>
 80040c2:	463a      	mov	r2, r7
 80040c4:	9003      	str	r0, [sp, #12]
 80040c6:	4631      	mov	r1, r6
 80040c8:	4620      	mov	r0, r4
 80040ca:	f000 fc95 	bl	80049f8 <__mdiff>
 80040ce:	68c2      	ldr	r2, [r0, #12]
 80040d0:	f109 3bff 	add.w	fp, r9, #4294967295
 80040d4:	4605      	mov	r5, r0
 80040d6:	bb02      	cbnz	r2, 800411a <_dtoa_r+0xa62>
 80040d8:	4601      	mov	r1, r0
 80040da:	ee18 0a10 	vmov	r0, s16
 80040de:	f000 fc6f 	bl	80049c0 <__mcmp>
 80040e2:	4602      	mov	r2, r0
 80040e4:	4629      	mov	r1, r5
 80040e6:	4620      	mov	r0, r4
 80040e8:	9207      	str	r2, [sp, #28]
 80040ea:	f000 fa27 	bl	800453c <_Bfree>
 80040ee:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80040f2:	ea43 0102 	orr.w	r1, r3, r2
 80040f6:	9b04      	ldr	r3, [sp, #16]
 80040f8:	430b      	orrs	r3, r1
 80040fa:	464d      	mov	r5, r9
 80040fc:	d10f      	bne.n	800411e <_dtoa_r+0xa66>
 80040fe:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8004102:	d02a      	beq.n	800415a <_dtoa_r+0xaa2>
 8004104:	9b03      	ldr	r3, [sp, #12]
 8004106:	2b00      	cmp	r3, #0
 8004108:	dd02      	ble.n	8004110 <_dtoa_r+0xa58>
 800410a:	9b02      	ldr	r3, [sp, #8]
 800410c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8004110:	f88b a000 	strb.w	sl, [fp]
 8004114:	e775      	b.n	8004002 <_dtoa_r+0x94a>
 8004116:	4638      	mov	r0, r7
 8004118:	e7ba      	b.n	8004090 <_dtoa_r+0x9d8>
 800411a:	2201      	movs	r2, #1
 800411c:	e7e2      	b.n	80040e4 <_dtoa_r+0xa2c>
 800411e:	9b03      	ldr	r3, [sp, #12]
 8004120:	2b00      	cmp	r3, #0
 8004122:	db04      	blt.n	800412e <_dtoa_r+0xa76>
 8004124:	9906      	ldr	r1, [sp, #24]
 8004126:	430b      	orrs	r3, r1
 8004128:	9904      	ldr	r1, [sp, #16]
 800412a:	430b      	orrs	r3, r1
 800412c:	d122      	bne.n	8004174 <_dtoa_r+0xabc>
 800412e:	2a00      	cmp	r2, #0
 8004130:	ddee      	ble.n	8004110 <_dtoa_r+0xa58>
 8004132:	ee18 1a10 	vmov	r1, s16
 8004136:	2201      	movs	r2, #1
 8004138:	4620      	mov	r0, r4
 800413a:	f000 fbd1 	bl	80048e0 <__lshift>
 800413e:	4631      	mov	r1, r6
 8004140:	ee08 0a10 	vmov	s16, r0
 8004144:	f000 fc3c 	bl	80049c0 <__mcmp>
 8004148:	2800      	cmp	r0, #0
 800414a:	dc03      	bgt.n	8004154 <_dtoa_r+0xa9c>
 800414c:	d1e0      	bne.n	8004110 <_dtoa_r+0xa58>
 800414e:	f01a 0f01 	tst.w	sl, #1
 8004152:	d0dd      	beq.n	8004110 <_dtoa_r+0xa58>
 8004154:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8004158:	d1d7      	bne.n	800410a <_dtoa_r+0xa52>
 800415a:	2339      	movs	r3, #57	; 0x39
 800415c:	f88b 3000 	strb.w	r3, [fp]
 8004160:	462b      	mov	r3, r5
 8004162:	461d      	mov	r5, r3
 8004164:	3b01      	subs	r3, #1
 8004166:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800416a:	2a39      	cmp	r2, #57	; 0x39
 800416c:	d071      	beq.n	8004252 <_dtoa_r+0xb9a>
 800416e:	3201      	adds	r2, #1
 8004170:	701a      	strb	r2, [r3, #0]
 8004172:	e746      	b.n	8004002 <_dtoa_r+0x94a>
 8004174:	2a00      	cmp	r2, #0
 8004176:	dd07      	ble.n	8004188 <_dtoa_r+0xad0>
 8004178:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800417c:	d0ed      	beq.n	800415a <_dtoa_r+0xaa2>
 800417e:	f10a 0301 	add.w	r3, sl, #1
 8004182:	f88b 3000 	strb.w	r3, [fp]
 8004186:	e73c      	b.n	8004002 <_dtoa_r+0x94a>
 8004188:	9b05      	ldr	r3, [sp, #20]
 800418a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800418e:	4599      	cmp	r9, r3
 8004190:	d047      	beq.n	8004222 <_dtoa_r+0xb6a>
 8004192:	ee18 1a10 	vmov	r1, s16
 8004196:	2300      	movs	r3, #0
 8004198:	220a      	movs	r2, #10
 800419a:	4620      	mov	r0, r4
 800419c:	f000 f9f0 	bl	8004580 <__multadd>
 80041a0:	45b8      	cmp	r8, r7
 80041a2:	ee08 0a10 	vmov	s16, r0
 80041a6:	f04f 0300 	mov.w	r3, #0
 80041aa:	f04f 020a 	mov.w	r2, #10
 80041ae:	4641      	mov	r1, r8
 80041b0:	4620      	mov	r0, r4
 80041b2:	d106      	bne.n	80041c2 <_dtoa_r+0xb0a>
 80041b4:	f000 f9e4 	bl	8004580 <__multadd>
 80041b8:	4680      	mov	r8, r0
 80041ba:	4607      	mov	r7, r0
 80041bc:	f109 0901 	add.w	r9, r9, #1
 80041c0:	e772      	b.n	80040a8 <_dtoa_r+0x9f0>
 80041c2:	f000 f9dd 	bl	8004580 <__multadd>
 80041c6:	4639      	mov	r1, r7
 80041c8:	4680      	mov	r8, r0
 80041ca:	2300      	movs	r3, #0
 80041cc:	220a      	movs	r2, #10
 80041ce:	4620      	mov	r0, r4
 80041d0:	f000 f9d6 	bl	8004580 <__multadd>
 80041d4:	4607      	mov	r7, r0
 80041d6:	e7f1      	b.n	80041bc <_dtoa_r+0xb04>
 80041d8:	9b03      	ldr	r3, [sp, #12]
 80041da:	9302      	str	r3, [sp, #8]
 80041dc:	9d01      	ldr	r5, [sp, #4]
 80041de:	ee18 0a10 	vmov	r0, s16
 80041e2:	4631      	mov	r1, r6
 80041e4:	f7ff f9dc 	bl	80035a0 <quorem>
 80041e8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80041ec:	9b01      	ldr	r3, [sp, #4]
 80041ee:	f805 ab01 	strb.w	sl, [r5], #1
 80041f2:	1aea      	subs	r2, r5, r3
 80041f4:	9b02      	ldr	r3, [sp, #8]
 80041f6:	4293      	cmp	r3, r2
 80041f8:	dd09      	ble.n	800420e <_dtoa_r+0xb56>
 80041fa:	ee18 1a10 	vmov	r1, s16
 80041fe:	2300      	movs	r3, #0
 8004200:	220a      	movs	r2, #10
 8004202:	4620      	mov	r0, r4
 8004204:	f000 f9bc 	bl	8004580 <__multadd>
 8004208:	ee08 0a10 	vmov	s16, r0
 800420c:	e7e7      	b.n	80041de <_dtoa_r+0xb26>
 800420e:	9b02      	ldr	r3, [sp, #8]
 8004210:	2b00      	cmp	r3, #0
 8004212:	bfc8      	it	gt
 8004214:	461d      	movgt	r5, r3
 8004216:	9b01      	ldr	r3, [sp, #4]
 8004218:	bfd8      	it	le
 800421a:	2501      	movle	r5, #1
 800421c:	441d      	add	r5, r3
 800421e:	f04f 0800 	mov.w	r8, #0
 8004222:	ee18 1a10 	vmov	r1, s16
 8004226:	2201      	movs	r2, #1
 8004228:	4620      	mov	r0, r4
 800422a:	f000 fb59 	bl	80048e0 <__lshift>
 800422e:	4631      	mov	r1, r6
 8004230:	ee08 0a10 	vmov	s16, r0
 8004234:	f000 fbc4 	bl	80049c0 <__mcmp>
 8004238:	2800      	cmp	r0, #0
 800423a:	dc91      	bgt.n	8004160 <_dtoa_r+0xaa8>
 800423c:	d102      	bne.n	8004244 <_dtoa_r+0xb8c>
 800423e:	f01a 0f01 	tst.w	sl, #1
 8004242:	d18d      	bne.n	8004160 <_dtoa_r+0xaa8>
 8004244:	462b      	mov	r3, r5
 8004246:	461d      	mov	r5, r3
 8004248:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800424c:	2a30      	cmp	r2, #48	; 0x30
 800424e:	d0fa      	beq.n	8004246 <_dtoa_r+0xb8e>
 8004250:	e6d7      	b.n	8004002 <_dtoa_r+0x94a>
 8004252:	9a01      	ldr	r2, [sp, #4]
 8004254:	429a      	cmp	r2, r3
 8004256:	d184      	bne.n	8004162 <_dtoa_r+0xaaa>
 8004258:	9b00      	ldr	r3, [sp, #0]
 800425a:	3301      	adds	r3, #1
 800425c:	9300      	str	r3, [sp, #0]
 800425e:	2331      	movs	r3, #49	; 0x31
 8004260:	7013      	strb	r3, [r2, #0]
 8004262:	e6ce      	b.n	8004002 <_dtoa_r+0x94a>
 8004264:	4b09      	ldr	r3, [pc, #36]	; (800428c <_dtoa_r+0xbd4>)
 8004266:	f7ff ba95 	b.w	8003794 <_dtoa_r+0xdc>
 800426a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800426c:	2b00      	cmp	r3, #0
 800426e:	f47f aa6e 	bne.w	800374e <_dtoa_r+0x96>
 8004272:	4b07      	ldr	r3, [pc, #28]	; (8004290 <_dtoa_r+0xbd8>)
 8004274:	f7ff ba8e 	b.w	8003794 <_dtoa_r+0xdc>
 8004278:	9b02      	ldr	r3, [sp, #8]
 800427a:	2b00      	cmp	r3, #0
 800427c:	dcae      	bgt.n	80041dc <_dtoa_r+0xb24>
 800427e:	9b06      	ldr	r3, [sp, #24]
 8004280:	2b02      	cmp	r3, #2
 8004282:	f73f aea8 	bgt.w	8003fd6 <_dtoa_r+0x91e>
 8004286:	e7a9      	b.n	80041dc <_dtoa_r+0xb24>
 8004288:	080057ef 	.word	0x080057ef
 800428c:	0800574c 	.word	0x0800574c
 8004290:	08005770 	.word	0x08005770

08004294 <std>:
 8004294:	2300      	movs	r3, #0
 8004296:	b510      	push	{r4, lr}
 8004298:	4604      	mov	r4, r0
 800429a:	e9c0 3300 	strd	r3, r3, [r0]
 800429e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80042a2:	6083      	str	r3, [r0, #8]
 80042a4:	8181      	strh	r1, [r0, #12]
 80042a6:	6643      	str	r3, [r0, #100]	; 0x64
 80042a8:	81c2      	strh	r2, [r0, #14]
 80042aa:	6183      	str	r3, [r0, #24]
 80042ac:	4619      	mov	r1, r3
 80042ae:	2208      	movs	r2, #8
 80042b0:	305c      	adds	r0, #92	; 0x5c
 80042b2:	f7fe fceb 	bl	8002c8c <memset>
 80042b6:	4b05      	ldr	r3, [pc, #20]	; (80042cc <std+0x38>)
 80042b8:	6263      	str	r3, [r4, #36]	; 0x24
 80042ba:	4b05      	ldr	r3, [pc, #20]	; (80042d0 <std+0x3c>)
 80042bc:	62a3      	str	r3, [r4, #40]	; 0x28
 80042be:	4b05      	ldr	r3, [pc, #20]	; (80042d4 <std+0x40>)
 80042c0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80042c2:	4b05      	ldr	r3, [pc, #20]	; (80042d8 <std+0x44>)
 80042c4:	6224      	str	r4, [r4, #32]
 80042c6:	6323      	str	r3, [r4, #48]	; 0x30
 80042c8:	bd10      	pop	{r4, pc}
 80042ca:	bf00      	nop
 80042cc:	08005085 	.word	0x08005085
 80042d0:	080050a7 	.word	0x080050a7
 80042d4:	080050df 	.word	0x080050df
 80042d8:	08005103 	.word	0x08005103

080042dc <_cleanup_r>:
 80042dc:	4901      	ldr	r1, [pc, #4]	; (80042e4 <_cleanup_r+0x8>)
 80042de:	f000 b8af 	b.w	8004440 <_fwalk_reent>
 80042e2:	bf00      	nop
 80042e4:	08005419 	.word	0x08005419

080042e8 <__sfmoreglue>:
 80042e8:	b570      	push	{r4, r5, r6, lr}
 80042ea:	2268      	movs	r2, #104	; 0x68
 80042ec:	1e4d      	subs	r5, r1, #1
 80042ee:	4355      	muls	r5, r2
 80042f0:	460e      	mov	r6, r1
 80042f2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80042f6:	f000 fce7 	bl	8004cc8 <_malloc_r>
 80042fa:	4604      	mov	r4, r0
 80042fc:	b140      	cbz	r0, 8004310 <__sfmoreglue+0x28>
 80042fe:	2100      	movs	r1, #0
 8004300:	e9c0 1600 	strd	r1, r6, [r0]
 8004304:	300c      	adds	r0, #12
 8004306:	60a0      	str	r0, [r4, #8]
 8004308:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800430c:	f7fe fcbe 	bl	8002c8c <memset>
 8004310:	4620      	mov	r0, r4
 8004312:	bd70      	pop	{r4, r5, r6, pc}

08004314 <__sfp_lock_acquire>:
 8004314:	4801      	ldr	r0, [pc, #4]	; (800431c <__sfp_lock_acquire+0x8>)
 8004316:	f000 b8b8 	b.w	800448a <__retarget_lock_acquire_recursive>
 800431a:	bf00      	nop
 800431c:	20000245 	.word	0x20000245

08004320 <__sfp_lock_release>:
 8004320:	4801      	ldr	r0, [pc, #4]	; (8004328 <__sfp_lock_release+0x8>)
 8004322:	f000 b8b3 	b.w	800448c <__retarget_lock_release_recursive>
 8004326:	bf00      	nop
 8004328:	20000245 	.word	0x20000245

0800432c <__sinit_lock_acquire>:
 800432c:	4801      	ldr	r0, [pc, #4]	; (8004334 <__sinit_lock_acquire+0x8>)
 800432e:	f000 b8ac 	b.w	800448a <__retarget_lock_acquire_recursive>
 8004332:	bf00      	nop
 8004334:	20000246 	.word	0x20000246

08004338 <__sinit_lock_release>:
 8004338:	4801      	ldr	r0, [pc, #4]	; (8004340 <__sinit_lock_release+0x8>)
 800433a:	f000 b8a7 	b.w	800448c <__retarget_lock_release_recursive>
 800433e:	bf00      	nop
 8004340:	20000246 	.word	0x20000246

08004344 <__sinit>:
 8004344:	b510      	push	{r4, lr}
 8004346:	4604      	mov	r4, r0
 8004348:	f7ff fff0 	bl	800432c <__sinit_lock_acquire>
 800434c:	69a3      	ldr	r3, [r4, #24]
 800434e:	b11b      	cbz	r3, 8004358 <__sinit+0x14>
 8004350:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004354:	f7ff bff0 	b.w	8004338 <__sinit_lock_release>
 8004358:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800435c:	6523      	str	r3, [r4, #80]	; 0x50
 800435e:	4b13      	ldr	r3, [pc, #76]	; (80043ac <__sinit+0x68>)
 8004360:	4a13      	ldr	r2, [pc, #76]	; (80043b0 <__sinit+0x6c>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	62a2      	str	r2, [r4, #40]	; 0x28
 8004366:	42a3      	cmp	r3, r4
 8004368:	bf04      	itt	eq
 800436a:	2301      	moveq	r3, #1
 800436c:	61a3      	streq	r3, [r4, #24]
 800436e:	4620      	mov	r0, r4
 8004370:	f000 f820 	bl	80043b4 <__sfp>
 8004374:	6060      	str	r0, [r4, #4]
 8004376:	4620      	mov	r0, r4
 8004378:	f000 f81c 	bl	80043b4 <__sfp>
 800437c:	60a0      	str	r0, [r4, #8]
 800437e:	4620      	mov	r0, r4
 8004380:	f000 f818 	bl	80043b4 <__sfp>
 8004384:	2200      	movs	r2, #0
 8004386:	60e0      	str	r0, [r4, #12]
 8004388:	2104      	movs	r1, #4
 800438a:	6860      	ldr	r0, [r4, #4]
 800438c:	f7ff ff82 	bl	8004294 <std>
 8004390:	68a0      	ldr	r0, [r4, #8]
 8004392:	2201      	movs	r2, #1
 8004394:	2109      	movs	r1, #9
 8004396:	f7ff ff7d 	bl	8004294 <std>
 800439a:	68e0      	ldr	r0, [r4, #12]
 800439c:	2202      	movs	r2, #2
 800439e:	2112      	movs	r1, #18
 80043a0:	f7ff ff78 	bl	8004294 <std>
 80043a4:	2301      	movs	r3, #1
 80043a6:	61a3      	str	r3, [r4, #24]
 80043a8:	e7d2      	b.n	8004350 <__sinit+0xc>
 80043aa:	bf00      	nop
 80043ac:	08005738 	.word	0x08005738
 80043b0:	080042dd 	.word	0x080042dd

080043b4 <__sfp>:
 80043b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043b6:	4607      	mov	r7, r0
 80043b8:	f7ff ffac 	bl	8004314 <__sfp_lock_acquire>
 80043bc:	4b1e      	ldr	r3, [pc, #120]	; (8004438 <__sfp+0x84>)
 80043be:	681e      	ldr	r6, [r3, #0]
 80043c0:	69b3      	ldr	r3, [r6, #24]
 80043c2:	b913      	cbnz	r3, 80043ca <__sfp+0x16>
 80043c4:	4630      	mov	r0, r6
 80043c6:	f7ff ffbd 	bl	8004344 <__sinit>
 80043ca:	3648      	adds	r6, #72	; 0x48
 80043cc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80043d0:	3b01      	subs	r3, #1
 80043d2:	d503      	bpl.n	80043dc <__sfp+0x28>
 80043d4:	6833      	ldr	r3, [r6, #0]
 80043d6:	b30b      	cbz	r3, 800441c <__sfp+0x68>
 80043d8:	6836      	ldr	r6, [r6, #0]
 80043da:	e7f7      	b.n	80043cc <__sfp+0x18>
 80043dc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80043e0:	b9d5      	cbnz	r5, 8004418 <__sfp+0x64>
 80043e2:	4b16      	ldr	r3, [pc, #88]	; (800443c <__sfp+0x88>)
 80043e4:	60e3      	str	r3, [r4, #12]
 80043e6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80043ea:	6665      	str	r5, [r4, #100]	; 0x64
 80043ec:	f000 f84c 	bl	8004488 <__retarget_lock_init_recursive>
 80043f0:	f7ff ff96 	bl	8004320 <__sfp_lock_release>
 80043f4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80043f8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80043fc:	6025      	str	r5, [r4, #0]
 80043fe:	61a5      	str	r5, [r4, #24]
 8004400:	2208      	movs	r2, #8
 8004402:	4629      	mov	r1, r5
 8004404:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004408:	f7fe fc40 	bl	8002c8c <memset>
 800440c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004410:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004414:	4620      	mov	r0, r4
 8004416:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004418:	3468      	adds	r4, #104	; 0x68
 800441a:	e7d9      	b.n	80043d0 <__sfp+0x1c>
 800441c:	2104      	movs	r1, #4
 800441e:	4638      	mov	r0, r7
 8004420:	f7ff ff62 	bl	80042e8 <__sfmoreglue>
 8004424:	4604      	mov	r4, r0
 8004426:	6030      	str	r0, [r6, #0]
 8004428:	2800      	cmp	r0, #0
 800442a:	d1d5      	bne.n	80043d8 <__sfp+0x24>
 800442c:	f7ff ff78 	bl	8004320 <__sfp_lock_release>
 8004430:	230c      	movs	r3, #12
 8004432:	603b      	str	r3, [r7, #0]
 8004434:	e7ee      	b.n	8004414 <__sfp+0x60>
 8004436:	bf00      	nop
 8004438:	08005738 	.word	0x08005738
 800443c:	ffff0001 	.word	0xffff0001

08004440 <_fwalk_reent>:
 8004440:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004444:	4606      	mov	r6, r0
 8004446:	4688      	mov	r8, r1
 8004448:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800444c:	2700      	movs	r7, #0
 800444e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004452:	f1b9 0901 	subs.w	r9, r9, #1
 8004456:	d505      	bpl.n	8004464 <_fwalk_reent+0x24>
 8004458:	6824      	ldr	r4, [r4, #0]
 800445a:	2c00      	cmp	r4, #0
 800445c:	d1f7      	bne.n	800444e <_fwalk_reent+0xe>
 800445e:	4638      	mov	r0, r7
 8004460:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004464:	89ab      	ldrh	r3, [r5, #12]
 8004466:	2b01      	cmp	r3, #1
 8004468:	d907      	bls.n	800447a <_fwalk_reent+0x3a>
 800446a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800446e:	3301      	adds	r3, #1
 8004470:	d003      	beq.n	800447a <_fwalk_reent+0x3a>
 8004472:	4629      	mov	r1, r5
 8004474:	4630      	mov	r0, r6
 8004476:	47c0      	blx	r8
 8004478:	4307      	orrs	r7, r0
 800447a:	3568      	adds	r5, #104	; 0x68
 800447c:	e7e9      	b.n	8004452 <_fwalk_reent+0x12>
	...

08004480 <_localeconv_r>:
 8004480:	4800      	ldr	r0, [pc, #0]	; (8004484 <_localeconv_r+0x4>)
 8004482:	4770      	bx	lr
 8004484:	20000160 	.word	0x20000160

08004488 <__retarget_lock_init_recursive>:
 8004488:	4770      	bx	lr

0800448a <__retarget_lock_acquire_recursive>:
 800448a:	4770      	bx	lr

0800448c <__retarget_lock_release_recursive>:
 800448c:	4770      	bx	lr
	...

08004490 <malloc>:
 8004490:	4b02      	ldr	r3, [pc, #8]	; (800449c <malloc+0xc>)
 8004492:	4601      	mov	r1, r0
 8004494:	6818      	ldr	r0, [r3, #0]
 8004496:	f000 bc17 	b.w	8004cc8 <_malloc_r>
 800449a:	bf00      	nop
 800449c:	2000000c 	.word	0x2000000c

080044a0 <memcpy>:
 80044a0:	440a      	add	r2, r1
 80044a2:	4291      	cmp	r1, r2
 80044a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80044a8:	d100      	bne.n	80044ac <memcpy+0xc>
 80044aa:	4770      	bx	lr
 80044ac:	b510      	push	{r4, lr}
 80044ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80044b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80044b6:	4291      	cmp	r1, r2
 80044b8:	d1f9      	bne.n	80044ae <memcpy+0xe>
 80044ba:	bd10      	pop	{r4, pc}

080044bc <_Balloc>:
 80044bc:	b570      	push	{r4, r5, r6, lr}
 80044be:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80044c0:	4604      	mov	r4, r0
 80044c2:	460d      	mov	r5, r1
 80044c4:	b976      	cbnz	r6, 80044e4 <_Balloc+0x28>
 80044c6:	2010      	movs	r0, #16
 80044c8:	f7ff ffe2 	bl	8004490 <malloc>
 80044cc:	4602      	mov	r2, r0
 80044ce:	6260      	str	r0, [r4, #36]	; 0x24
 80044d0:	b920      	cbnz	r0, 80044dc <_Balloc+0x20>
 80044d2:	4b18      	ldr	r3, [pc, #96]	; (8004534 <_Balloc+0x78>)
 80044d4:	4818      	ldr	r0, [pc, #96]	; (8004538 <_Balloc+0x7c>)
 80044d6:	2166      	movs	r1, #102	; 0x66
 80044d8:	f000 feea 	bl	80052b0 <__assert_func>
 80044dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80044e0:	6006      	str	r6, [r0, #0]
 80044e2:	60c6      	str	r6, [r0, #12]
 80044e4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80044e6:	68f3      	ldr	r3, [r6, #12]
 80044e8:	b183      	cbz	r3, 800450c <_Balloc+0x50>
 80044ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80044ec:	68db      	ldr	r3, [r3, #12]
 80044ee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80044f2:	b9b8      	cbnz	r0, 8004524 <_Balloc+0x68>
 80044f4:	2101      	movs	r1, #1
 80044f6:	fa01 f605 	lsl.w	r6, r1, r5
 80044fa:	1d72      	adds	r2, r6, #5
 80044fc:	0092      	lsls	r2, r2, #2
 80044fe:	4620      	mov	r0, r4
 8004500:	f000 fb60 	bl	8004bc4 <_calloc_r>
 8004504:	b160      	cbz	r0, 8004520 <_Balloc+0x64>
 8004506:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800450a:	e00e      	b.n	800452a <_Balloc+0x6e>
 800450c:	2221      	movs	r2, #33	; 0x21
 800450e:	2104      	movs	r1, #4
 8004510:	4620      	mov	r0, r4
 8004512:	f000 fb57 	bl	8004bc4 <_calloc_r>
 8004516:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004518:	60f0      	str	r0, [r6, #12]
 800451a:	68db      	ldr	r3, [r3, #12]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d1e4      	bne.n	80044ea <_Balloc+0x2e>
 8004520:	2000      	movs	r0, #0
 8004522:	bd70      	pop	{r4, r5, r6, pc}
 8004524:	6802      	ldr	r2, [r0, #0]
 8004526:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800452a:	2300      	movs	r3, #0
 800452c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004530:	e7f7      	b.n	8004522 <_Balloc+0x66>
 8004532:	bf00      	nop
 8004534:	0800577d 	.word	0x0800577d
 8004538:	08005860 	.word	0x08005860

0800453c <_Bfree>:
 800453c:	b570      	push	{r4, r5, r6, lr}
 800453e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004540:	4605      	mov	r5, r0
 8004542:	460c      	mov	r4, r1
 8004544:	b976      	cbnz	r6, 8004564 <_Bfree+0x28>
 8004546:	2010      	movs	r0, #16
 8004548:	f7ff ffa2 	bl	8004490 <malloc>
 800454c:	4602      	mov	r2, r0
 800454e:	6268      	str	r0, [r5, #36]	; 0x24
 8004550:	b920      	cbnz	r0, 800455c <_Bfree+0x20>
 8004552:	4b09      	ldr	r3, [pc, #36]	; (8004578 <_Bfree+0x3c>)
 8004554:	4809      	ldr	r0, [pc, #36]	; (800457c <_Bfree+0x40>)
 8004556:	218a      	movs	r1, #138	; 0x8a
 8004558:	f000 feaa 	bl	80052b0 <__assert_func>
 800455c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004560:	6006      	str	r6, [r0, #0]
 8004562:	60c6      	str	r6, [r0, #12]
 8004564:	b13c      	cbz	r4, 8004576 <_Bfree+0x3a>
 8004566:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004568:	6862      	ldr	r2, [r4, #4]
 800456a:	68db      	ldr	r3, [r3, #12]
 800456c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004570:	6021      	str	r1, [r4, #0]
 8004572:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004576:	bd70      	pop	{r4, r5, r6, pc}
 8004578:	0800577d 	.word	0x0800577d
 800457c:	08005860 	.word	0x08005860

08004580 <__multadd>:
 8004580:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004584:	690d      	ldr	r5, [r1, #16]
 8004586:	4607      	mov	r7, r0
 8004588:	460c      	mov	r4, r1
 800458a:	461e      	mov	r6, r3
 800458c:	f101 0c14 	add.w	ip, r1, #20
 8004590:	2000      	movs	r0, #0
 8004592:	f8dc 3000 	ldr.w	r3, [ip]
 8004596:	b299      	uxth	r1, r3
 8004598:	fb02 6101 	mla	r1, r2, r1, r6
 800459c:	0c1e      	lsrs	r6, r3, #16
 800459e:	0c0b      	lsrs	r3, r1, #16
 80045a0:	fb02 3306 	mla	r3, r2, r6, r3
 80045a4:	b289      	uxth	r1, r1
 80045a6:	3001      	adds	r0, #1
 80045a8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80045ac:	4285      	cmp	r5, r0
 80045ae:	f84c 1b04 	str.w	r1, [ip], #4
 80045b2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80045b6:	dcec      	bgt.n	8004592 <__multadd+0x12>
 80045b8:	b30e      	cbz	r6, 80045fe <__multadd+0x7e>
 80045ba:	68a3      	ldr	r3, [r4, #8]
 80045bc:	42ab      	cmp	r3, r5
 80045be:	dc19      	bgt.n	80045f4 <__multadd+0x74>
 80045c0:	6861      	ldr	r1, [r4, #4]
 80045c2:	4638      	mov	r0, r7
 80045c4:	3101      	adds	r1, #1
 80045c6:	f7ff ff79 	bl	80044bc <_Balloc>
 80045ca:	4680      	mov	r8, r0
 80045cc:	b928      	cbnz	r0, 80045da <__multadd+0x5a>
 80045ce:	4602      	mov	r2, r0
 80045d0:	4b0c      	ldr	r3, [pc, #48]	; (8004604 <__multadd+0x84>)
 80045d2:	480d      	ldr	r0, [pc, #52]	; (8004608 <__multadd+0x88>)
 80045d4:	21b5      	movs	r1, #181	; 0xb5
 80045d6:	f000 fe6b 	bl	80052b0 <__assert_func>
 80045da:	6922      	ldr	r2, [r4, #16]
 80045dc:	3202      	adds	r2, #2
 80045de:	f104 010c 	add.w	r1, r4, #12
 80045e2:	0092      	lsls	r2, r2, #2
 80045e4:	300c      	adds	r0, #12
 80045e6:	f7ff ff5b 	bl	80044a0 <memcpy>
 80045ea:	4621      	mov	r1, r4
 80045ec:	4638      	mov	r0, r7
 80045ee:	f7ff ffa5 	bl	800453c <_Bfree>
 80045f2:	4644      	mov	r4, r8
 80045f4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80045f8:	3501      	adds	r5, #1
 80045fa:	615e      	str	r6, [r3, #20]
 80045fc:	6125      	str	r5, [r4, #16]
 80045fe:	4620      	mov	r0, r4
 8004600:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004604:	080057ef 	.word	0x080057ef
 8004608:	08005860 	.word	0x08005860

0800460c <__hi0bits>:
 800460c:	0c03      	lsrs	r3, r0, #16
 800460e:	041b      	lsls	r3, r3, #16
 8004610:	b9d3      	cbnz	r3, 8004648 <__hi0bits+0x3c>
 8004612:	0400      	lsls	r0, r0, #16
 8004614:	2310      	movs	r3, #16
 8004616:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800461a:	bf04      	itt	eq
 800461c:	0200      	lsleq	r0, r0, #8
 800461e:	3308      	addeq	r3, #8
 8004620:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8004624:	bf04      	itt	eq
 8004626:	0100      	lsleq	r0, r0, #4
 8004628:	3304      	addeq	r3, #4
 800462a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800462e:	bf04      	itt	eq
 8004630:	0080      	lsleq	r0, r0, #2
 8004632:	3302      	addeq	r3, #2
 8004634:	2800      	cmp	r0, #0
 8004636:	db05      	blt.n	8004644 <__hi0bits+0x38>
 8004638:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800463c:	f103 0301 	add.w	r3, r3, #1
 8004640:	bf08      	it	eq
 8004642:	2320      	moveq	r3, #32
 8004644:	4618      	mov	r0, r3
 8004646:	4770      	bx	lr
 8004648:	2300      	movs	r3, #0
 800464a:	e7e4      	b.n	8004616 <__hi0bits+0xa>

0800464c <__lo0bits>:
 800464c:	6803      	ldr	r3, [r0, #0]
 800464e:	f013 0207 	ands.w	r2, r3, #7
 8004652:	4601      	mov	r1, r0
 8004654:	d00b      	beq.n	800466e <__lo0bits+0x22>
 8004656:	07da      	lsls	r2, r3, #31
 8004658:	d423      	bmi.n	80046a2 <__lo0bits+0x56>
 800465a:	0798      	lsls	r0, r3, #30
 800465c:	bf49      	itett	mi
 800465e:	085b      	lsrmi	r3, r3, #1
 8004660:	089b      	lsrpl	r3, r3, #2
 8004662:	2001      	movmi	r0, #1
 8004664:	600b      	strmi	r3, [r1, #0]
 8004666:	bf5c      	itt	pl
 8004668:	600b      	strpl	r3, [r1, #0]
 800466a:	2002      	movpl	r0, #2
 800466c:	4770      	bx	lr
 800466e:	b298      	uxth	r0, r3
 8004670:	b9a8      	cbnz	r0, 800469e <__lo0bits+0x52>
 8004672:	0c1b      	lsrs	r3, r3, #16
 8004674:	2010      	movs	r0, #16
 8004676:	b2da      	uxtb	r2, r3
 8004678:	b90a      	cbnz	r2, 800467e <__lo0bits+0x32>
 800467a:	3008      	adds	r0, #8
 800467c:	0a1b      	lsrs	r3, r3, #8
 800467e:	071a      	lsls	r2, r3, #28
 8004680:	bf04      	itt	eq
 8004682:	091b      	lsreq	r3, r3, #4
 8004684:	3004      	addeq	r0, #4
 8004686:	079a      	lsls	r2, r3, #30
 8004688:	bf04      	itt	eq
 800468a:	089b      	lsreq	r3, r3, #2
 800468c:	3002      	addeq	r0, #2
 800468e:	07da      	lsls	r2, r3, #31
 8004690:	d403      	bmi.n	800469a <__lo0bits+0x4e>
 8004692:	085b      	lsrs	r3, r3, #1
 8004694:	f100 0001 	add.w	r0, r0, #1
 8004698:	d005      	beq.n	80046a6 <__lo0bits+0x5a>
 800469a:	600b      	str	r3, [r1, #0]
 800469c:	4770      	bx	lr
 800469e:	4610      	mov	r0, r2
 80046a0:	e7e9      	b.n	8004676 <__lo0bits+0x2a>
 80046a2:	2000      	movs	r0, #0
 80046a4:	4770      	bx	lr
 80046a6:	2020      	movs	r0, #32
 80046a8:	4770      	bx	lr
	...

080046ac <__i2b>:
 80046ac:	b510      	push	{r4, lr}
 80046ae:	460c      	mov	r4, r1
 80046b0:	2101      	movs	r1, #1
 80046b2:	f7ff ff03 	bl	80044bc <_Balloc>
 80046b6:	4602      	mov	r2, r0
 80046b8:	b928      	cbnz	r0, 80046c6 <__i2b+0x1a>
 80046ba:	4b05      	ldr	r3, [pc, #20]	; (80046d0 <__i2b+0x24>)
 80046bc:	4805      	ldr	r0, [pc, #20]	; (80046d4 <__i2b+0x28>)
 80046be:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80046c2:	f000 fdf5 	bl	80052b0 <__assert_func>
 80046c6:	2301      	movs	r3, #1
 80046c8:	6144      	str	r4, [r0, #20]
 80046ca:	6103      	str	r3, [r0, #16]
 80046cc:	bd10      	pop	{r4, pc}
 80046ce:	bf00      	nop
 80046d0:	080057ef 	.word	0x080057ef
 80046d4:	08005860 	.word	0x08005860

080046d8 <__multiply>:
 80046d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046dc:	4691      	mov	r9, r2
 80046de:	690a      	ldr	r2, [r1, #16]
 80046e0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80046e4:	429a      	cmp	r2, r3
 80046e6:	bfb8      	it	lt
 80046e8:	460b      	movlt	r3, r1
 80046ea:	460c      	mov	r4, r1
 80046ec:	bfbc      	itt	lt
 80046ee:	464c      	movlt	r4, r9
 80046f0:	4699      	movlt	r9, r3
 80046f2:	6927      	ldr	r7, [r4, #16]
 80046f4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80046f8:	68a3      	ldr	r3, [r4, #8]
 80046fa:	6861      	ldr	r1, [r4, #4]
 80046fc:	eb07 060a 	add.w	r6, r7, sl
 8004700:	42b3      	cmp	r3, r6
 8004702:	b085      	sub	sp, #20
 8004704:	bfb8      	it	lt
 8004706:	3101      	addlt	r1, #1
 8004708:	f7ff fed8 	bl	80044bc <_Balloc>
 800470c:	b930      	cbnz	r0, 800471c <__multiply+0x44>
 800470e:	4602      	mov	r2, r0
 8004710:	4b44      	ldr	r3, [pc, #272]	; (8004824 <__multiply+0x14c>)
 8004712:	4845      	ldr	r0, [pc, #276]	; (8004828 <__multiply+0x150>)
 8004714:	f240 115d 	movw	r1, #349	; 0x15d
 8004718:	f000 fdca 	bl	80052b0 <__assert_func>
 800471c:	f100 0514 	add.w	r5, r0, #20
 8004720:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8004724:	462b      	mov	r3, r5
 8004726:	2200      	movs	r2, #0
 8004728:	4543      	cmp	r3, r8
 800472a:	d321      	bcc.n	8004770 <__multiply+0x98>
 800472c:	f104 0314 	add.w	r3, r4, #20
 8004730:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8004734:	f109 0314 	add.w	r3, r9, #20
 8004738:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800473c:	9202      	str	r2, [sp, #8]
 800473e:	1b3a      	subs	r2, r7, r4
 8004740:	3a15      	subs	r2, #21
 8004742:	f022 0203 	bic.w	r2, r2, #3
 8004746:	3204      	adds	r2, #4
 8004748:	f104 0115 	add.w	r1, r4, #21
 800474c:	428f      	cmp	r7, r1
 800474e:	bf38      	it	cc
 8004750:	2204      	movcc	r2, #4
 8004752:	9201      	str	r2, [sp, #4]
 8004754:	9a02      	ldr	r2, [sp, #8]
 8004756:	9303      	str	r3, [sp, #12]
 8004758:	429a      	cmp	r2, r3
 800475a:	d80c      	bhi.n	8004776 <__multiply+0x9e>
 800475c:	2e00      	cmp	r6, #0
 800475e:	dd03      	ble.n	8004768 <__multiply+0x90>
 8004760:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004764:	2b00      	cmp	r3, #0
 8004766:	d05a      	beq.n	800481e <__multiply+0x146>
 8004768:	6106      	str	r6, [r0, #16]
 800476a:	b005      	add	sp, #20
 800476c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004770:	f843 2b04 	str.w	r2, [r3], #4
 8004774:	e7d8      	b.n	8004728 <__multiply+0x50>
 8004776:	f8b3 a000 	ldrh.w	sl, [r3]
 800477a:	f1ba 0f00 	cmp.w	sl, #0
 800477e:	d024      	beq.n	80047ca <__multiply+0xf2>
 8004780:	f104 0e14 	add.w	lr, r4, #20
 8004784:	46a9      	mov	r9, r5
 8004786:	f04f 0c00 	mov.w	ip, #0
 800478a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800478e:	f8d9 1000 	ldr.w	r1, [r9]
 8004792:	fa1f fb82 	uxth.w	fp, r2
 8004796:	b289      	uxth	r1, r1
 8004798:	fb0a 110b 	mla	r1, sl, fp, r1
 800479c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80047a0:	f8d9 2000 	ldr.w	r2, [r9]
 80047a4:	4461      	add	r1, ip
 80047a6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80047aa:	fb0a c20b 	mla	r2, sl, fp, ip
 80047ae:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80047b2:	b289      	uxth	r1, r1
 80047b4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80047b8:	4577      	cmp	r7, lr
 80047ba:	f849 1b04 	str.w	r1, [r9], #4
 80047be:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80047c2:	d8e2      	bhi.n	800478a <__multiply+0xb2>
 80047c4:	9a01      	ldr	r2, [sp, #4]
 80047c6:	f845 c002 	str.w	ip, [r5, r2]
 80047ca:	9a03      	ldr	r2, [sp, #12]
 80047cc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80047d0:	3304      	adds	r3, #4
 80047d2:	f1b9 0f00 	cmp.w	r9, #0
 80047d6:	d020      	beq.n	800481a <__multiply+0x142>
 80047d8:	6829      	ldr	r1, [r5, #0]
 80047da:	f104 0c14 	add.w	ip, r4, #20
 80047de:	46ae      	mov	lr, r5
 80047e0:	f04f 0a00 	mov.w	sl, #0
 80047e4:	f8bc b000 	ldrh.w	fp, [ip]
 80047e8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80047ec:	fb09 220b 	mla	r2, r9, fp, r2
 80047f0:	4492      	add	sl, r2
 80047f2:	b289      	uxth	r1, r1
 80047f4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80047f8:	f84e 1b04 	str.w	r1, [lr], #4
 80047fc:	f85c 2b04 	ldr.w	r2, [ip], #4
 8004800:	f8be 1000 	ldrh.w	r1, [lr]
 8004804:	0c12      	lsrs	r2, r2, #16
 8004806:	fb09 1102 	mla	r1, r9, r2, r1
 800480a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800480e:	4567      	cmp	r7, ip
 8004810:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8004814:	d8e6      	bhi.n	80047e4 <__multiply+0x10c>
 8004816:	9a01      	ldr	r2, [sp, #4]
 8004818:	50a9      	str	r1, [r5, r2]
 800481a:	3504      	adds	r5, #4
 800481c:	e79a      	b.n	8004754 <__multiply+0x7c>
 800481e:	3e01      	subs	r6, #1
 8004820:	e79c      	b.n	800475c <__multiply+0x84>
 8004822:	bf00      	nop
 8004824:	080057ef 	.word	0x080057ef
 8004828:	08005860 	.word	0x08005860

0800482c <__pow5mult>:
 800482c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004830:	4615      	mov	r5, r2
 8004832:	f012 0203 	ands.w	r2, r2, #3
 8004836:	4606      	mov	r6, r0
 8004838:	460f      	mov	r7, r1
 800483a:	d007      	beq.n	800484c <__pow5mult+0x20>
 800483c:	4c25      	ldr	r4, [pc, #148]	; (80048d4 <__pow5mult+0xa8>)
 800483e:	3a01      	subs	r2, #1
 8004840:	2300      	movs	r3, #0
 8004842:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004846:	f7ff fe9b 	bl	8004580 <__multadd>
 800484a:	4607      	mov	r7, r0
 800484c:	10ad      	asrs	r5, r5, #2
 800484e:	d03d      	beq.n	80048cc <__pow5mult+0xa0>
 8004850:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8004852:	b97c      	cbnz	r4, 8004874 <__pow5mult+0x48>
 8004854:	2010      	movs	r0, #16
 8004856:	f7ff fe1b 	bl	8004490 <malloc>
 800485a:	4602      	mov	r2, r0
 800485c:	6270      	str	r0, [r6, #36]	; 0x24
 800485e:	b928      	cbnz	r0, 800486c <__pow5mult+0x40>
 8004860:	4b1d      	ldr	r3, [pc, #116]	; (80048d8 <__pow5mult+0xac>)
 8004862:	481e      	ldr	r0, [pc, #120]	; (80048dc <__pow5mult+0xb0>)
 8004864:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8004868:	f000 fd22 	bl	80052b0 <__assert_func>
 800486c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004870:	6004      	str	r4, [r0, #0]
 8004872:	60c4      	str	r4, [r0, #12]
 8004874:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8004878:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800487c:	b94c      	cbnz	r4, 8004892 <__pow5mult+0x66>
 800487e:	f240 2171 	movw	r1, #625	; 0x271
 8004882:	4630      	mov	r0, r6
 8004884:	f7ff ff12 	bl	80046ac <__i2b>
 8004888:	2300      	movs	r3, #0
 800488a:	f8c8 0008 	str.w	r0, [r8, #8]
 800488e:	4604      	mov	r4, r0
 8004890:	6003      	str	r3, [r0, #0]
 8004892:	f04f 0900 	mov.w	r9, #0
 8004896:	07eb      	lsls	r3, r5, #31
 8004898:	d50a      	bpl.n	80048b0 <__pow5mult+0x84>
 800489a:	4639      	mov	r1, r7
 800489c:	4622      	mov	r2, r4
 800489e:	4630      	mov	r0, r6
 80048a0:	f7ff ff1a 	bl	80046d8 <__multiply>
 80048a4:	4639      	mov	r1, r7
 80048a6:	4680      	mov	r8, r0
 80048a8:	4630      	mov	r0, r6
 80048aa:	f7ff fe47 	bl	800453c <_Bfree>
 80048ae:	4647      	mov	r7, r8
 80048b0:	106d      	asrs	r5, r5, #1
 80048b2:	d00b      	beq.n	80048cc <__pow5mult+0xa0>
 80048b4:	6820      	ldr	r0, [r4, #0]
 80048b6:	b938      	cbnz	r0, 80048c8 <__pow5mult+0x9c>
 80048b8:	4622      	mov	r2, r4
 80048ba:	4621      	mov	r1, r4
 80048bc:	4630      	mov	r0, r6
 80048be:	f7ff ff0b 	bl	80046d8 <__multiply>
 80048c2:	6020      	str	r0, [r4, #0]
 80048c4:	f8c0 9000 	str.w	r9, [r0]
 80048c8:	4604      	mov	r4, r0
 80048ca:	e7e4      	b.n	8004896 <__pow5mult+0x6a>
 80048cc:	4638      	mov	r0, r7
 80048ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80048d2:	bf00      	nop
 80048d4:	080059b0 	.word	0x080059b0
 80048d8:	0800577d 	.word	0x0800577d
 80048dc:	08005860 	.word	0x08005860

080048e0 <__lshift>:
 80048e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048e4:	460c      	mov	r4, r1
 80048e6:	6849      	ldr	r1, [r1, #4]
 80048e8:	6923      	ldr	r3, [r4, #16]
 80048ea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80048ee:	68a3      	ldr	r3, [r4, #8]
 80048f0:	4607      	mov	r7, r0
 80048f2:	4691      	mov	r9, r2
 80048f4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80048f8:	f108 0601 	add.w	r6, r8, #1
 80048fc:	42b3      	cmp	r3, r6
 80048fe:	db0b      	blt.n	8004918 <__lshift+0x38>
 8004900:	4638      	mov	r0, r7
 8004902:	f7ff fddb 	bl	80044bc <_Balloc>
 8004906:	4605      	mov	r5, r0
 8004908:	b948      	cbnz	r0, 800491e <__lshift+0x3e>
 800490a:	4602      	mov	r2, r0
 800490c:	4b2a      	ldr	r3, [pc, #168]	; (80049b8 <__lshift+0xd8>)
 800490e:	482b      	ldr	r0, [pc, #172]	; (80049bc <__lshift+0xdc>)
 8004910:	f240 11d9 	movw	r1, #473	; 0x1d9
 8004914:	f000 fccc 	bl	80052b0 <__assert_func>
 8004918:	3101      	adds	r1, #1
 800491a:	005b      	lsls	r3, r3, #1
 800491c:	e7ee      	b.n	80048fc <__lshift+0x1c>
 800491e:	2300      	movs	r3, #0
 8004920:	f100 0114 	add.w	r1, r0, #20
 8004924:	f100 0210 	add.w	r2, r0, #16
 8004928:	4618      	mov	r0, r3
 800492a:	4553      	cmp	r3, sl
 800492c:	db37      	blt.n	800499e <__lshift+0xbe>
 800492e:	6920      	ldr	r0, [r4, #16]
 8004930:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004934:	f104 0314 	add.w	r3, r4, #20
 8004938:	f019 091f 	ands.w	r9, r9, #31
 800493c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004940:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8004944:	d02f      	beq.n	80049a6 <__lshift+0xc6>
 8004946:	f1c9 0e20 	rsb	lr, r9, #32
 800494a:	468a      	mov	sl, r1
 800494c:	f04f 0c00 	mov.w	ip, #0
 8004950:	681a      	ldr	r2, [r3, #0]
 8004952:	fa02 f209 	lsl.w	r2, r2, r9
 8004956:	ea42 020c 	orr.w	r2, r2, ip
 800495a:	f84a 2b04 	str.w	r2, [sl], #4
 800495e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004962:	4298      	cmp	r0, r3
 8004964:	fa22 fc0e 	lsr.w	ip, r2, lr
 8004968:	d8f2      	bhi.n	8004950 <__lshift+0x70>
 800496a:	1b03      	subs	r3, r0, r4
 800496c:	3b15      	subs	r3, #21
 800496e:	f023 0303 	bic.w	r3, r3, #3
 8004972:	3304      	adds	r3, #4
 8004974:	f104 0215 	add.w	r2, r4, #21
 8004978:	4290      	cmp	r0, r2
 800497a:	bf38      	it	cc
 800497c:	2304      	movcc	r3, #4
 800497e:	f841 c003 	str.w	ip, [r1, r3]
 8004982:	f1bc 0f00 	cmp.w	ip, #0
 8004986:	d001      	beq.n	800498c <__lshift+0xac>
 8004988:	f108 0602 	add.w	r6, r8, #2
 800498c:	3e01      	subs	r6, #1
 800498e:	4638      	mov	r0, r7
 8004990:	612e      	str	r6, [r5, #16]
 8004992:	4621      	mov	r1, r4
 8004994:	f7ff fdd2 	bl	800453c <_Bfree>
 8004998:	4628      	mov	r0, r5
 800499a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800499e:	f842 0f04 	str.w	r0, [r2, #4]!
 80049a2:	3301      	adds	r3, #1
 80049a4:	e7c1      	b.n	800492a <__lshift+0x4a>
 80049a6:	3904      	subs	r1, #4
 80049a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80049ac:	f841 2f04 	str.w	r2, [r1, #4]!
 80049b0:	4298      	cmp	r0, r3
 80049b2:	d8f9      	bhi.n	80049a8 <__lshift+0xc8>
 80049b4:	e7ea      	b.n	800498c <__lshift+0xac>
 80049b6:	bf00      	nop
 80049b8:	080057ef 	.word	0x080057ef
 80049bc:	08005860 	.word	0x08005860

080049c0 <__mcmp>:
 80049c0:	b530      	push	{r4, r5, lr}
 80049c2:	6902      	ldr	r2, [r0, #16]
 80049c4:	690c      	ldr	r4, [r1, #16]
 80049c6:	1b12      	subs	r2, r2, r4
 80049c8:	d10e      	bne.n	80049e8 <__mcmp+0x28>
 80049ca:	f100 0314 	add.w	r3, r0, #20
 80049ce:	3114      	adds	r1, #20
 80049d0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80049d4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80049d8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80049dc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80049e0:	42a5      	cmp	r5, r4
 80049e2:	d003      	beq.n	80049ec <__mcmp+0x2c>
 80049e4:	d305      	bcc.n	80049f2 <__mcmp+0x32>
 80049e6:	2201      	movs	r2, #1
 80049e8:	4610      	mov	r0, r2
 80049ea:	bd30      	pop	{r4, r5, pc}
 80049ec:	4283      	cmp	r3, r0
 80049ee:	d3f3      	bcc.n	80049d8 <__mcmp+0x18>
 80049f0:	e7fa      	b.n	80049e8 <__mcmp+0x28>
 80049f2:	f04f 32ff 	mov.w	r2, #4294967295
 80049f6:	e7f7      	b.n	80049e8 <__mcmp+0x28>

080049f8 <__mdiff>:
 80049f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049fc:	460c      	mov	r4, r1
 80049fe:	4606      	mov	r6, r0
 8004a00:	4611      	mov	r1, r2
 8004a02:	4620      	mov	r0, r4
 8004a04:	4690      	mov	r8, r2
 8004a06:	f7ff ffdb 	bl	80049c0 <__mcmp>
 8004a0a:	1e05      	subs	r5, r0, #0
 8004a0c:	d110      	bne.n	8004a30 <__mdiff+0x38>
 8004a0e:	4629      	mov	r1, r5
 8004a10:	4630      	mov	r0, r6
 8004a12:	f7ff fd53 	bl	80044bc <_Balloc>
 8004a16:	b930      	cbnz	r0, 8004a26 <__mdiff+0x2e>
 8004a18:	4b3a      	ldr	r3, [pc, #232]	; (8004b04 <__mdiff+0x10c>)
 8004a1a:	4602      	mov	r2, r0
 8004a1c:	f240 2132 	movw	r1, #562	; 0x232
 8004a20:	4839      	ldr	r0, [pc, #228]	; (8004b08 <__mdiff+0x110>)
 8004a22:	f000 fc45 	bl	80052b0 <__assert_func>
 8004a26:	2301      	movs	r3, #1
 8004a28:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8004a2c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a30:	bfa4      	itt	ge
 8004a32:	4643      	movge	r3, r8
 8004a34:	46a0      	movge	r8, r4
 8004a36:	4630      	mov	r0, r6
 8004a38:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8004a3c:	bfa6      	itte	ge
 8004a3e:	461c      	movge	r4, r3
 8004a40:	2500      	movge	r5, #0
 8004a42:	2501      	movlt	r5, #1
 8004a44:	f7ff fd3a 	bl	80044bc <_Balloc>
 8004a48:	b920      	cbnz	r0, 8004a54 <__mdiff+0x5c>
 8004a4a:	4b2e      	ldr	r3, [pc, #184]	; (8004b04 <__mdiff+0x10c>)
 8004a4c:	4602      	mov	r2, r0
 8004a4e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8004a52:	e7e5      	b.n	8004a20 <__mdiff+0x28>
 8004a54:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8004a58:	6926      	ldr	r6, [r4, #16]
 8004a5a:	60c5      	str	r5, [r0, #12]
 8004a5c:	f104 0914 	add.w	r9, r4, #20
 8004a60:	f108 0514 	add.w	r5, r8, #20
 8004a64:	f100 0e14 	add.w	lr, r0, #20
 8004a68:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8004a6c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8004a70:	f108 0210 	add.w	r2, r8, #16
 8004a74:	46f2      	mov	sl, lr
 8004a76:	2100      	movs	r1, #0
 8004a78:	f859 3b04 	ldr.w	r3, [r9], #4
 8004a7c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8004a80:	fa1f f883 	uxth.w	r8, r3
 8004a84:	fa11 f18b 	uxtah	r1, r1, fp
 8004a88:	0c1b      	lsrs	r3, r3, #16
 8004a8a:	eba1 0808 	sub.w	r8, r1, r8
 8004a8e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8004a92:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8004a96:	fa1f f888 	uxth.w	r8, r8
 8004a9a:	1419      	asrs	r1, r3, #16
 8004a9c:	454e      	cmp	r6, r9
 8004a9e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8004aa2:	f84a 3b04 	str.w	r3, [sl], #4
 8004aa6:	d8e7      	bhi.n	8004a78 <__mdiff+0x80>
 8004aa8:	1b33      	subs	r3, r6, r4
 8004aaa:	3b15      	subs	r3, #21
 8004aac:	f023 0303 	bic.w	r3, r3, #3
 8004ab0:	3304      	adds	r3, #4
 8004ab2:	3415      	adds	r4, #21
 8004ab4:	42a6      	cmp	r6, r4
 8004ab6:	bf38      	it	cc
 8004ab8:	2304      	movcc	r3, #4
 8004aba:	441d      	add	r5, r3
 8004abc:	4473      	add	r3, lr
 8004abe:	469e      	mov	lr, r3
 8004ac0:	462e      	mov	r6, r5
 8004ac2:	4566      	cmp	r6, ip
 8004ac4:	d30e      	bcc.n	8004ae4 <__mdiff+0xec>
 8004ac6:	f10c 0203 	add.w	r2, ip, #3
 8004aca:	1b52      	subs	r2, r2, r5
 8004acc:	f022 0203 	bic.w	r2, r2, #3
 8004ad0:	3d03      	subs	r5, #3
 8004ad2:	45ac      	cmp	ip, r5
 8004ad4:	bf38      	it	cc
 8004ad6:	2200      	movcc	r2, #0
 8004ad8:	441a      	add	r2, r3
 8004ada:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8004ade:	b17b      	cbz	r3, 8004b00 <__mdiff+0x108>
 8004ae0:	6107      	str	r7, [r0, #16]
 8004ae2:	e7a3      	b.n	8004a2c <__mdiff+0x34>
 8004ae4:	f856 8b04 	ldr.w	r8, [r6], #4
 8004ae8:	fa11 f288 	uxtah	r2, r1, r8
 8004aec:	1414      	asrs	r4, r2, #16
 8004aee:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8004af2:	b292      	uxth	r2, r2
 8004af4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8004af8:	f84e 2b04 	str.w	r2, [lr], #4
 8004afc:	1421      	asrs	r1, r4, #16
 8004afe:	e7e0      	b.n	8004ac2 <__mdiff+0xca>
 8004b00:	3f01      	subs	r7, #1
 8004b02:	e7ea      	b.n	8004ada <__mdiff+0xe2>
 8004b04:	080057ef 	.word	0x080057ef
 8004b08:	08005860 	.word	0x08005860

08004b0c <__d2b>:
 8004b0c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004b10:	4689      	mov	r9, r1
 8004b12:	2101      	movs	r1, #1
 8004b14:	ec57 6b10 	vmov	r6, r7, d0
 8004b18:	4690      	mov	r8, r2
 8004b1a:	f7ff fccf 	bl	80044bc <_Balloc>
 8004b1e:	4604      	mov	r4, r0
 8004b20:	b930      	cbnz	r0, 8004b30 <__d2b+0x24>
 8004b22:	4602      	mov	r2, r0
 8004b24:	4b25      	ldr	r3, [pc, #148]	; (8004bbc <__d2b+0xb0>)
 8004b26:	4826      	ldr	r0, [pc, #152]	; (8004bc0 <__d2b+0xb4>)
 8004b28:	f240 310a 	movw	r1, #778	; 0x30a
 8004b2c:	f000 fbc0 	bl	80052b0 <__assert_func>
 8004b30:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8004b34:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004b38:	bb35      	cbnz	r5, 8004b88 <__d2b+0x7c>
 8004b3a:	2e00      	cmp	r6, #0
 8004b3c:	9301      	str	r3, [sp, #4]
 8004b3e:	d028      	beq.n	8004b92 <__d2b+0x86>
 8004b40:	4668      	mov	r0, sp
 8004b42:	9600      	str	r6, [sp, #0]
 8004b44:	f7ff fd82 	bl	800464c <__lo0bits>
 8004b48:	9900      	ldr	r1, [sp, #0]
 8004b4a:	b300      	cbz	r0, 8004b8e <__d2b+0x82>
 8004b4c:	9a01      	ldr	r2, [sp, #4]
 8004b4e:	f1c0 0320 	rsb	r3, r0, #32
 8004b52:	fa02 f303 	lsl.w	r3, r2, r3
 8004b56:	430b      	orrs	r3, r1
 8004b58:	40c2      	lsrs	r2, r0
 8004b5a:	6163      	str	r3, [r4, #20]
 8004b5c:	9201      	str	r2, [sp, #4]
 8004b5e:	9b01      	ldr	r3, [sp, #4]
 8004b60:	61a3      	str	r3, [r4, #24]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	bf14      	ite	ne
 8004b66:	2202      	movne	r2, #2
 8004b68:	2201      	moveq	r2, #1
 8004b6a:	6122      	str	r2, [r4, #16]
 8004b6c:	b1d5      	cbz	r5, 8004ba4 <__d2b+0x98>
 8004b6e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8004b72:	4405      	add	r5, r0
 8004b74:	f8c9 5000 	str.w	r5, [r9]
 8004b78:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8004b7c:	f8c8 0000 	str.w	r0, [r8]
 8004b80:	4620      	mov	r0, r4
 8004b82:	b003      	add	sp, #12
 8004b84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004b88:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b8c:	e7d5      	b.n	8004b3a <__d2b+0x2e>
 8004b8e:	6161      	str	r1, [r4, #20]
 8004b90:	e7e5      	b.n	8004b5e <__d2b+0x52>
 8004b92:	a801      	add	r0, sp, #4
 8004b94:	f7ff fd5a 	bl	800464c <__lo0bits>
 8004b98:	9b01      	ldr	r3, [sp, #4]
 8004b9a:	6163      	str	r3, [r4, #20]
 8004b9c:	2201      	movs	r2, #1
 8004b9e:	6122      	str	r2, [r4, #16]
 8004ba0:	3020      	adds	r0, #32
 8004ba2:	e7e3      	b.n	8004b6c <__d2b+0x60>
 8004ba4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8004ba8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8004bac:	f8c9 0000 	str.w	r0, [r9]
 8004bb0:	6918      	ldr	r0, [r3, #16]
 8004bb2:	f7ff fd2b 	bl	800460c <__hi0bits>
 8004bb6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8004bba:	e7df      	b.n	8004b7c <__d2b+0x70>
 8004bbc:	080057ef 	.word	0x080057ef
 8004bc0:	08005860 	.word	0x08005860

08004bc4 <_calloc_r>:
 8004bc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004bc6:	fba1 2402 	umull	r2, r4, r1, r2
 8004bca:	b94c      	cbnz	r4, 8004be0 <_calloc_r+0x1c>
 8004bcc:	4611      	mov	r1, r2
 8004bce:	9201      	str	r2, [sp, #4]
 8004bd0:	f000 f87a 	bl	8004cc8 <_malloc_r>
 8004bd4:	9a01      	ldr	r2, [sp, #4]
 8004bd6:	4605      	mov	r5, r0
 8004bd8:	b930      	cbnz	r0, 8004be8 <_calloc_r+0x24>
 8004bda:	4628      	mov	r0, r5
 8004bdc:	b003      	add	sp, #12
 8004bde:	bd30      	pop	{r4, r5, pc}
 8004be0:	220c      	movs	r2, #12
 8004be2:	6002      	str	r2, [r0, #0]
 8004be4:	2500      	movs	r5, #0
 8004be6:	e7f8      	b.n	8004bda <_calloc_r+0x16>
 8004be8:	4621      	mov	r1, r4
 8004bea:	f7fe f84f 	bl	8002c8c <memset>
 8004bee:	e7f4      	b.n	8004bda <_calloc_r+0x16>

08004bf0 <_free_r>:
 8004bf0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004bf2:	2900      	cmp	r1, #0
 8004bf4:	d044      	beq.n	8004c80 <_free_r+0x90>
 8004bf6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004bfa:	9001      	str	r0, [sp, #4]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	f1a1 0404 	sub.w	r4, r1, #4
 8004c02:	bfb8      	it	lt
 8004c04:	18e4      	addlt	r4, r4, r3
 8004c06:	f000 fcdf 	bl	80055c8 <__malloc_lock>
 8004c0a:	4a1e      	ldr	r2, [pc, #120]	; (8004c84 <_free_r+0x94>)
 8004c0c:	9801      	ldr	r0, [sp, #4]
 8004c0e:	6813      	ldr	r3, [r2, #0]
 8004c10:	b933      	cbnz	r3, 8004c20 <_free_r+0x30>
 8004c12:	6063      	str	r3, [r4, #4]
 8004c14:	6014      	str	r4, [r2, #0]
 8004c16:	b003      	add	sp, #12
 8004c18:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004c1c:	f000 bcda 	b.w	80055d4 <__malloc_unlock>
 8004c20:	42a3      	cmp	r3, r4
 8004c22:	d908      	bls.n	8004c36 <_free_r+0x46>
 8004c24:	6825      	ldr	r5, [r4, #0]
 8004c26:	1961      	adds	r1, r4, r5
 8004c28:	428b      	cmp	r3, r1
 8004c2a:	bf01      	itttt	eq
 8004c2c:	6819      	ldreq	r1, [r3, #0]
 8004c2e:	685b      	ldreq	r3, [r3, #4]
 8004c30:	1949      	addeq	r1, r1, r5
 8004c32:	6021      	streq	r1, [r4, #0]
 8004c34:	e7ed      	b.n	8004c12 <_free_r+0x22>
 8004c36:	461a      	mov	r2, r3
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	b10b      	cbz	r3, 8004c40 <_free_r+0x50>
 8004c3c:	42a3      	cmp	r3, r4
 8004c3e:	d9fa      	bls.n	8004c36 <_free_r+0x46>
 8004c40:	6811      	ldr	r1, [r2, #0]
 8004c42:	1855      	adds	r5, r2, r1
 8004c44:	42a5      	cmp	r5, r4
 8004c46:	d10b      	bne.n	8004c60 <_free_r+0x70>
 8004c48:	6824      	ldr	r4, [r4, #0]
 8004c4a:	4421      	add	r1, r4
 8004c4c:	1854      	adds	r4, r2, r1
 8004c4e:	42a3      	cmp	r3, r4
 8004c50:	6011      	str	r1, [r2, #0]
 8004c52:	d1e0      	bne.n	8004c16 <_free_r+0x26>
 8004c54:	681c      	ldr	r4, [r3, #0]
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	6053      	str	r3, [r2, #4]
 8004c5a:	4421      	add	r1, r4
 8004c5c:	6011      	str	r1, [r2, #0]
 8004c5e:	e7da      	b.n	8004c16 <_free_r+0x26>
 8004c60:	d902      	bls.n	8004c68 <_free_r+0x78>
 8004c62:	230c      	movs	r3, #12
 8004c64:	6003      	str	r3, [r0, #0]
 8004c66:	e7d6      	b.n	8004c16 <_free_r+0x26>
 8004c68:	6825      	ldr	r5, [r4, #0]
 8004c6a:	1961      	adds	r1, r4, r5
 8004c6c:	428b      	cmp	r3, r1
 8004c6e:	bf04      	itt	eq
 8004c70:	6819      	ldreq	r1, [r3, #0]
 8004c72:	685b      	ldreq	r3, [r3, #4]
 8004c74:	6063      	str	r3, [r4, #4]
 8004c76:	bf04      	itt	eq
 8004c78:	1949      	addeq	r1, r1, r5
 8004c7a:	6021      	streq	r1, [r4, #0]
 8004c7c:	6054      	str	r4, [r2, #4]
 8004c7e:	e7ca      	b.n	8004c16 <_free_r+0x26>
 8004c80:	b003      	add	sp, #12
 8004c82:	bd30      	pop	{r4, r5, pc}
 8004c84:	20000248 	.word	0x20000248

08004c88 <sbrk_aligned>:
 8004c88:	b570      	push	{r4, r5, r6, lr}
 8004c8a:	4e0e      	ldr	r6, [pc, #56]	; (8004cc4 <sbrk_aligned+0x3c>)
 8004c8c:	460c      	mov	r4, r1
 8004c8e:	6831      	ldr	r1, [r6, #0]
 8004c90:	4605      	mov	r5, r0
 8004c92:	b911      	cbnz	r1, 8004c9a <sbrk_aligned+0x12>
 8004c94:	f000 f9e6 	bl	8005064 <_sbrk_r>
 8004c98:	6030      	str	r0, [r6, #0]
 8004c9a:	4621      	mov	r1, r4
 8004c9c:	4628      	mov	r0, r5
 8004c9e:	f000 f9e1 	bl	8005064 <_sbrk_r>
 8004ca2:	1c43      	adds	r3, r0, #1
 8004ca4:	d00a      	beq.n	8004cbc <sbrk_aligned+0x34>
 8004ca6:	1cc4      	adds	r4, r0, #3
 8004ca8:	f024 0403 	bic.w	r4, r4, #3
 8004cac:	42a0      	cmp	r0, r4
 8004cae:	d007      	beq.n	8004cc0 <sbrk_aligned+0x38>
 8004cb0:	1a21      	subs	r1, r4, r0
 8004cb2:	4628      	mov	r0, r5
 8004cb4:	f000 f9d6 	bl	8005064 <_sbrk_r>
 8004cb8:	3001      	adds	r0, #1
 8004cba:	d101      	bne.n	8004cc0 <sbrk_aligned+0x38>
 8004cbc:	f04f 34ff 	mov.w	r4, #4294967295
 8004cc0:	4620      	mov	r0, r4
 8004cc2:	bd70      	pop	{r4, r5, r6, pc}
 8004cc4:	2000024c 	.word	0x2000024c

08004cc8 <_malloc_r>:
 8004cc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ccc:	1ccd      	adds	r5, r1, #3
 8004cce:	f025 0503 	bic.w	r5, r5, #3
 8004cd2:	3508      	adds	r5, #8
 8004cd4:	2d0c      	cmp	r5, #12
 8004cd6:	bf38      	it	cc
 8004cd8:	250c      	movcc	r5, #12
 8004cda:	2d00      	cmp	r5, #0
 8004cdc:	4607      	mov	r7, r0
 8004cde:	db01      	blt.n	8004ce4 <_malloc_r+0x1c>
 8004ce0:	42a9      	cmp	r1, r5
 8004ce2:	d905      	bls.n	8004cf0 <_malloc_r+0x28>
 8004ce4:	230c      	movs	r3, #12
 8004ce6:	603b      	str	r3, [r7, #0]
 8004ce8:	2600      	movs	r6, #0
 8004cea:	4630      	mov	r0, r6
 8004cec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004cf0:	4e2e      	ldr	r6, [pc, #184]	; (8004dac <_malloc_r+0xe4>)
 8004cf2:	f000 fc69 	bl	80055c8 <__malloc_lock>
 8004cf6:	6833      	ldr	r3, [r6, #0]
 8004cf8:	461c      	mov	r4, r3
 8004cfa:	bb34      	cbnz	r4, 8004d4a <_malloc_r+0x82>
 8004cfc:	4629      	mov	r1, r5
 8004cfe:	4638      	mov	r0, r7
 8004d00:	f7ff ffc2 	bl	8004c88 <sbrk_aligned>
 8004d04:	1c43      	adds	r3, r0, #1
 8004d06:	4604      	mov	r4, r0
 8004d08:	d14d      	bne.n	8004da6 <_malloc_r+0xde>
 8004d0a:	6834      	ldr	r4, [r6, #0]
 8004d0c:	4626      	mov	r6, r4
 8004d0e:	2e00      	cmp	r6, #0
 8004d10:	d140      	bne.n	8004d94 <_malloc_r+0xcc>
 8004d12:	6823      	ldr	r3, [r4, #0]
 8004d14:	4631      	mov	r1, r6
 8004d16:	4638      	mov	r0, r7
 8004d18:	eb04 0803 	add.w	r8, r4, r3
 8004d1c:	f000 f9a2 	bl	8005064 <_sbrk_r>
 8004d20:	4580      	cmp	r8, r0
 8004d22:	d13a      	bne.n	8004d9a <_malloc_r+0xd2>
 8004d24:	6821      	ldr	r1, [r4, #0]
 8004d26:	3503      	adds	r5, #3
 8004d28:	1a6d      	subs	r5, r5, r1
 8004d2a:	f025 0503 	bic.w	r5, r5, #3
 8004d2e:	3508      	adds	r5, #8
 8004d30:	2d0c      	cmp	r5, #12
 8004d32:	bf38      	it	cc
 8004d34:	250c      	movcc	r5, #12
 8004d36:	4629      	mov	r1, r5
 8004d38:	4638      	mov	r0, r7
 8004d3a:	f7ff ffa5 	bl	8004c88 <sbrk_aligned>
 8004d3e:	3001      	adds	r0, #1
 8004d40:	d02b      	beq.n	8004d9a <_malloc_r+0xd2>
 8004d42:	6823      	ldr	r3, [r4, #0]
 8004d44:	442b      	add	r3, r5
 8004d46:	6023      	str	r3, [r4, #0]
 8004d48:	e00e      	b.n	8004d68 <_malloc_r+0xa0>
 8004d4a:	6822      	ldr	r2, [r4, #0]
 8004d4c:	1b52      	subs	r2, r2, r5
 8004d4e:	d41e      	bmi.n	8004d8e <_malloc_r+0xc6>
 8004d50:	2a0b      	cmp	r2, #11
 8004d52:	d916      	bls.n	8004d82 <_malloc_r+0xba>
 8004d54:	1961      	adds	r1, r4, r5
 8004d56:	42a3      	cmp	r3, r4
 8004d58:	6025      	str	r5, [r4, #0]
 8004d5a:	bf18      	it	ne
 8004d5c:	6059      	strne	r1, [r3, #4]
 8004d5e:	6863      	ldr	r3, [r4, #4]
 8004d60:	bf08      	it	eq
 8004d62:	6031      	streq	r1, [r6, #0]
 8004d64:	5162      	str	r2, [r4, r5]
 8004d66:	604b      	str	r3, [r1, #4]
 8004d68:	4638      	mov	r0, r7
 8004d6a:	f104 060b 	add.w	r6, r4, #11
 8004d6e:	f000 fc31 	bl	80055d4 <__malloc_unlock>
 8004d72:	f026 0607 	bic.w	r6, r6, #7
 8004d76:	1d23      	adds	r3, r4, #4
 8004d78:	1af2      	subs	r2, r6, r3
 8004d7a:	d0b6      	beq.n	8004cea <_malloc_r+0x22>
 8004d7c:	1b9b      	subs	r3, r3, r6
 8004d7e:	50a3      	str	r3, [r4, r2]
 8004d80:	e7b3      	b.n	8004cea <_malloc_r+0x22>
 8004d82:	6862      	ldr	r2, [r4, #4]
 8004d84:	42a3      	cmp	r3, r4
 8004d86:	bf0c      	ite	eq
 8004d88:	6032      	streq	r2, [r6, #0]
 8004d8a:	605a      	strne	r2, [r3, #4]
 8004d8c:	e7ec      	b.n	8004d68 <_malloc_r+0xa0>
 8004d8e:	4623      	mov	r3, r4
 8004d90:	6864      	ldr	r4, [r4, #4]
 8004d92:	e7b2      	b.n	8004cfa <_malloc_r+0x32>
 8004d94:	4634      	mov	r4, r6
 8004d96:	6876      	ldr	r6, [r6, #4]
 8004d98:	e7b9      	b.n	8004d0e <_malloc_r+0x46>
 8004d9a:	230c      	movs	r3, #12
 8004d9c:	603b      	str	r3, [r7, #0]
 8004d9e:	4638      	mov	r0, r7
 8004da0:	f000 fc18 	bl	80055d4 <__malloc_unlock>
 8004da4:	e7a1      	b.n	8004cea <_malloc_r+0x22>
 8004da6:	6025      	str	r5, [r4, #0]
 8004da8:	e7de      	b.n	8004d68 <_malloc_r+0xa0>
 8004daa:	bf00      	nop
 8004dac:	20000248 	.word	0x20000248

08004db0 <__sfputc_r>:
 8004db0:	6893      	ldr	r3, [r2, #8]
 8004db2:	3b01      	subs	r3, #1
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	b410      	push	{r4}
 8004db8:	6093      	str	r3, [r2, #8]
 8004dba:	da08      	bge.n	8004dce <__sfputc_r+0x1e>
 8004dbc:	6994      	ldr	r4, [r2, #24]
 8004dbe:	42a3      	cmp	r3, r4
 8004dc0:	db01      	blt.n	8004dc6 <__sfputc_r+0x16>
 8004dc2:	290a      	cmp	r1, #10
 8004dc4:	d103      	bne.n	8004dce <__sfputc_r+0x1e>
 8004dc6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004dca:	f000 b99f 	b.w	800510c <__swbuf_r>
 8004dce:	6813      	ldr	r3, [r2, #0]
 8004dd0:	1c58      	adds	r0, r3, #1
 8004dd2:	6010      	str	r0, [r2, #0]
 8004dd4:	7019      	strb	r1, [r3, #0]
 8004dd6:	4608      	mov	r0, r1
 8004dd8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004ddc:	4770      	bx	lr

08004dde <__sfputs_r>:
 8004dde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004de0:	4606      	mov	r6, r0
 8004de2:	460f      	mov	r7, r1
 8004de4:	4614      	mov	r4, r2
 8004de6:	18d5      	adds	r5, r2, r3
 8004de8:	42ac      	cmp	r4, r5
 8004dea:	d101      	bne.n	8004df0 <__sfputs_r+0x12>
 8004dec:	2000      	movs	r0, #0
 8004dee:	e007      	b.n	8004e00 <__sfputs_r+0x22>
 8004df0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004df4:	463a      	mov	r2, r7
 8004df6:	4630      	mov	r0, r6
 8004df8:	f7ff ffda 	bl	8004db0 <__sfputc_r>
 8004dfc:	1c43      	adds	r3, r0, #1
 8004dfe:	d1f3      	bne.n	8004de8 <__sfputs_r+0xa>
 8004e00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004e04 <_vfiprintf_r>:
 8004e04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e08:	460d      	mov	r5, r1
 8004e0a:	b09d      	sub	sp, #116	; 0x74
 8004e0c:	4614      	mov	r4, r2
 8004e0e:	4698      	mov	r8, r3
 8004e10:	4606      	mov	r6, r0
 8004e12:	b118      	cbz	r0, 8004e1c <_vfiprintf_r+0x18>
 8004e14:	6983      	ldr	r3, [r0, #24]
 8004e16:	b90b      	cbnz	r3, 8004e1c <_vfiprintf_r+0x18>
 8004e18:	f7ff fa94 	bl	8004344 <__sinit>
 8004e1c:	4b89      	ldr	r3, [pc, #548]	; (8005044 <_vfiprintf_r+0x240>)
 8004e1e:	429d      	cmp	r5, r3
 8004e20:	d11b      	bne.n	8004e5a <_vfiprintf_r+0x56>
 8004e22:	6875      	ldr	r5, [r6, #4]
 8004e24:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004e26:	07d9      	lsls	r1, r3, #31
 8004e28:	d405      	bmi.n	8004e36 <_vfiprintf_r+0x32>
 8004e2a:	89ab      	ldrh	r3, [r5, #12]
 8004e2c:	059a      	lsls	r2, r3, #22
 8004e2e:	d402      	bmi.n	8004e36 <_vfiprintf_r+0x32>
 8004e30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004e32:	f7ff fb2a 	bl	800448a <__retarget_lock_acquire_recursive>
 8004e36:	89ab      	ldrh	r3, [r5, #12]
 8004e38:	071b      	lsls	r3, r3, #28
 8004e3a:	d501      	bpl.n	8004e40 <_vfiprintf_r+0x3c>
 8004e3c:	692b      	ldr	r3, [r5, #16]
 8004e3e:	b9eb      	cbnz	r3, 8004e7c <_vfiprintf_r+0x78>
 8004e40:	4629      	mov	r1, r5
 8004e42:	4630      	mov	r0, r6
 8004e44:	f000 f9c6 	bl	80051d4 <__swsetup_r>
 8004e48:	b1c0      	cbz	r0, 8004e7c <_vfiprintf_r+0x78>
 8004e4a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004e4c:	07dc      	lsls	r4, r3, #31
 8004e4e:	d50e      	bpl.n	8004e6e <_vfiprintf_r+0x6a>
 8004e50:	f04f 30ff 	mov.w	r0, #4294967295
 8004e54:	b01d      	add	sp, #116	; 0x74
 8004e56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e5a:	4b7b      	ldr	r3, [pc, #492]	; (8005048 <_vfiprintf_r+0x244>)
 8004e5c:	429d      	cmp	r5, r3
 8004e5e:	d101      	bne.n	8004e64 <_vfiprintf_r+0x60>
 8004e60:	68b5      	ldr	r5, [r6, #8]
 8004e62:	e7df      	b.n	8004e24 <_vfiprintf_r+0x20>
 8004e64:	4b79      	ldr	r3, [pc, #484]	; (800504c <_vfiprintf_r+0x248>)
 8004e66:	429d      	cmp	r5, r3
 8004e68:	bf08      	it	eq
 8004e6a:	68f5      	ldreq	r5, [r6, #12]
 8004e6c:	e7da      	b.n	8004e24 <_vfiprintf_r+0x20>
 8004e6e:	89ab      	ldrh	r3, [r5, #12]
 8004e70:	0598      	lsls	r0, r3, #22
 8004e72:	d4ed      	bmi.n	8004e50 <_vfiprintf_r+0x4c>
 8004e74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004e76:	f7ff fb09 	bl	800448c <__retarget_lock_release_recursive>
 8004e7a:	e7e9      	b.n	8004e50 <_vfiprintf_r+0x4c>
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	9309      	str	r3, [sp, #36]	; 0x24
 8004e80:	2320      	movs	r3, #32
 8004e82:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004e86:	f8cd 800c 	str.w	r8, [sp, #12]
 8004e8a:	2330      	movs	r3, #48	; 0x30
 8004e8c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005050 <_vfiprintf_r+0x24c>
 8004e90:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004e94:	f04f 0901 	mov.w	r9, #1
 8004e98:	4623      	mov	r3, r4
 8004e9a:	469a      	mov	sl, r3
 8004e9c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004ea0:	b10a      	cbz	r2, 8004ea6 <_vfiprintf_r+0xa2>
 8004ea2:	2a25      	cmp	r2, #37	; 0x25
 8004ea4:	d1f9      	bne.n	8004e9a <_vfiprintf_r+0x96>
 8004ea6:	ebba 0b04 	subs.w	fp, sl, r4
 8004eaa:	d00b      	beq.n	8004ec4 <_vfiprintf_r+0xc0>
 8004eac:	465b      	mov	r3, fp
 8004eae:	4622      	mov	r2, r4
 8004eb0:	4629      	mov	r1, r5
 8004eb2:	4630      	mov	r0, r6
 8004eb4:	f7ff ff93 	bl	8004dde <__sfputs_r>
 8004eb8:	3001      	adds	r0, #1
 8004eba:	f000 80aa 	beq.w	8005012 <_vfiprintf_r+0x20e>
 8004ebe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004ec0:	445a      	add	r2, fp
 8004ec2:	9209      	str	r2, [sp, #36]	; 0x24
 8004ec4:	f89a 3000 	ldrb.w	r3, [sl]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	f000 80a2 	beq.w	8005012 <_vfiprintf_r+0x20e>
 8004ece:	2300      	movs	r3, #0
 8004ed0:	f04f 32ff 	mov.w	r2, #4294967295
 8004ed4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004ed8:	f10a 0a01 	add.w	sl, sl, #1
 8004edc:	9304      	str	r3, [sp, #16]
 8004ede:	9307      	str	r3, [sp, #28]
 8004ee0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004ee4:	931a      	str	r3, [sp, #104]	; 0x68
 8004ee6:	4654      	mov	r4, sl
 8004ee8:	2205      	movs	r2, #5
 8004eea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004eee:	4858      	ldr	r0, [pc, #352]	; (8005050 <_vfiprintf_r+0x24c>)
 8004ef0:	f7fb f976 	bl	80001e0 <memchr>
 8004ef4:	9a04      	ldr	r2, [sp, #16]
 8004ef6:	b9d8      	cbnz	r0, 8004f30 <_vfiprintf_r+0x12c>
 8004ef8:	06d1      	lsls	r1, r2, #27
 8004efa:	bf44      	itt	mi
 8004efc:	2320      	movmi	r3, #32
 8004efe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004f02:	0713      	lsls	r3, r2, #28
 8004f04:	bf44      	itt	mi
 8004f06:	232b      	movmi	r3, #43	; 0x2b
 8004f08:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004f0c:	f89a 3000 	ldrb.w	r3, [sl]
 8004f10:	2b2a      	cmp	r3, #42	; 0x2a
 8004f12:	d015      	beq.n	8004f40 <_vfiprintf_r+0x13c>
 8004f14:	9a07      	ldr	r2, [sp, #28]
 8004f16:	4654      	mov	r4, sl
 8004f18:	2000      	movs	r0, #0
 8004f1a:	f04f 0c0a 	mov.w	ip, #10
 8004f1e:	4621      	mov	r1, r4
 8004f20:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004f24:	3b30      	subs	r3, #48	; 0x30
 8004f26:	2b09      	cmp	r3, #9
 8004f28:	d94e      	bls.n	8004fc8 <_vfiprintf_r+0x1c4>
 8004f2a:	b1b0      	cbz	r0, 8004f5a <_vfiprintf_r+0x156>
 8004f2c:	9207      	str	r2, [sp, #28]
 8004f2e:	e014      	b.n	8004f5a <_vfiprintf_r+0x156>
 8004f30:	eba0 0308 	sub.w	r3, r0, r8
 8004f34:	fa09 f303 	lsl.w	r3, r9, r3
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	9304      	str	r3, [sp, #16]
 8004f3c:	46a2      	mov	sl, r4
 8004f3e:	e7d2      	b.n	8004ee6 <_vfiprintf_r+0xe2>
 8004f40:	9b03      	ldr	r3, [sp, #12]
 8004f42:	1d19      	adds	r1, r3, #4
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	9103      	str	r1, [sp, #12]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	bfbb      	ittet	lt
 8004f4c:	425b      	neglt	r3, r3
 8004f4e:	f042 0202 	orrlt.w	r2, r2, #2
 8004f52:	9307      	strge	r3, [sp, #28]
 8004f54:	9307      	strlt	r3, [sp, #28]
 8004f56:	bfb8      	it	lt
 8004f58:	9204      	strlt	r2, [sp, #16]
 8004f5a:	7823      	ldrb	r3, [r4, #0]
 8004f5c:	2b2e      	cmp	r3, #46	; 0x2e
 8004f5e:	d10c      	bne.n	8004f7a <_vfiprintf_r+0x176>
 8004f60:	7863      	ldrb	r3, [r4, #1]
 8004f62:	2b2a      	cmp	r3, #42	; 0x2a
 8004f64:	d135      	bne.n	8004fd2 <_vfiprintf_r+0x1ce>
 8004f66:	9b03      	ldr	r3, [sp, #12]
 8004f68:	1d1a      	adds	r2, r3, #4
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	9203      	str	r2, [sp, #12]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	bfb8      	it	lt
 8004f72:	f04f 33ff 	movlt.w	r3, #4294967295
 8004f76:	3402      	adds	r4, #2
 8004f78:	9305      	str	r3, [sp, #20]
 8004f7a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005060 <_vfiprintf_r+0x25c>
 8004f7e:	7821      	ldrb	r1, [r4, #0]
 8004f80:	2203      	movs	r2, #3
 8004f82:	4650      	mov	r0, sl
 8004f84:	f7fb f92c 	bl	80001e0 <memchr>
 8004f88:	b140      	cbz	r0, 8004f9c <_vfiprintf_r+0x198>
 8004f8a:	2340      	movs	r3, #64	; 0x40
 8004f8c:	eba0 000a 	sub.w	r0, r0, sl
 8004f90:	fa03 f000 	lsl.w	r0, r3, r0
 8004f94:	9b04      	ldr	r3, [sp, #16]
 8004f96:	4303      	orrs	r3, r0
 8004f98:	3401      	adds	r4, #1
 8004f9a:	9304      	str	r3, [sp, #16]
 8004f9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004fa0:	482c      	ldr	r0, [pc, #176]	; (8005054 <_vfiprintf_r+0x250>)
 8004fa2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004fa6:	2206      	movs	r2, #6
 8004fa8:	f7fb f91a 	bl	80001e0 <memchr>
 8004fac:	2800      	cmp	r0, #0
 8004fae:	d03f      	beq.n	8005030 <_vfiprintf_r+0x22c>
 8004fb0:	4b29      	ldr	r3, [pc, #164]	; (8005058 <_vfiprintf_r+0x254>)
 8004fb2:	bb1b      	cbnz	r3, 8004ffc <_vfiprintf_r+0x1f8>
 8004fb4:	9b03      	ldr	r3, [sp, #12]
 8004fb6:	3307      	adds	r3, #7
 8004fb8:	f023 0307 	bic.w	r3, r3, #7
 8004fbc:	3308      	adds	r3, #8
 8004fbe:	9303      	str	r3, [sp, #12]
 8004fc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004fc2:	443b      	add	r3, r7
 8004fc4:	9309      	str	r3, [sp, #36]	; 0x24
 8004fc6:	e767      	b.n	8004e98 <_vfiprintf_r+0x94>
 8004fc8:	fb0c 3202 	mla	r2, ip, r2, r3
 8004fcc:	460c      	mov	r4, r1
 8004fce:	2001      	movs	r0, #1
 8004fd0:	e7a5      	b.n	8004f1e <_vfiprintf_r+0x11a>
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	3401      	adds	r4, #1
 8004fd6:	9305      	str	r3, [sp, #20]
 8004fd8:	4619      	mov	r1, r3
 8004fda:	f04f 0c0a 	mov.w	ip, #10
 8004fde:	4620      	mov	r0, r4
 8004fe0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004fe4:	3a30      	subs	r2, #48	; 0x30
 8004fe6:	2a09      	cmp	r2, #9
 8004fe8:	d903      	bls.n	8004ff2 <_vfiprintf_r+0x1ee>
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d0c5      	beq.n	8004f7a <_vfiprintf_r+0x176>
 8004fee:	9105      	str	r1, [sp, #20]
 8004ff0:	e7c3      	b.n	8004f7a <_vfiprintf_r+0x176>
 8004ff2:	fb0c 2101 	mla	r1, ip, r1, r2
 8004ff6:	4604      	mov	r4, r0
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	e7f0      	b.n	8004fde <_vfiprintf_r+0x1da>
 8004ffc:	ab03      	add	r3, sp, #12
 8004ffe:	9300      	str	r3, [sp, #0]
 8005000:	462a      	mov	r2, r5
 8005002:	4b16      	ldr	r3, [pc, #88]	; (800505c <_vfiprintf_r+0x258>)
 8005004:	a904      	add	r1, sp, #16
 8005006:	4630      	mov	r0, r6
 8005008:	f7fd fee8 	bl	8002ddc <_printf_float>
 800500c:	4607      	mov	r7, r0
 800500e:	1c78      	adds	r0, r7, #1
 8005010:	d1d6      	bne.n	8004fc0 <_vfiprintf_r+0x1bc>
 8005012:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005014:	07d9      	lsls	r1, r3, #31
 8005016:	d405      	bmi.n	8005024 <_vfiprintf_r+0x220>
 8005018:	89ab      	ldrh	r3, [r5, #12]
 800501a:	059a      	lsls	r2, r3, #22
 800501c:	d402      	bmi.n	8005024 <_vfiprintf_r+0x220>
 800501e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005020:	f7ff fa34 	bl	800448c <__retarget_lock_release_recursive>
 8005024:	89ab      	ldrh	r3, [r5, #12]
 8005026:	065b      	lsls	r3, r3, #25
 8005028:	f53f af12 	bmi.w	8004e50 <_vfiprintf_r+0x4c>
 800502c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800502e:	e711      	b.n	8004e54 <_vfiprintf_r+0x50>
 8005030:	ab03      	add	r3, sp, #12
 8005032:	9300      	str	r3, [sp, #0]
 8005034:	462a      	mov	r2, r5
 8005036:	4b09      	ldr	r3, [pc, #36]	; (800505c <_vfiprintf_r+0x258>)
 8005038:	a904      	add	r1, sp, #16
 800503a:	4630      	mov	r0, r6
 800503c:	f7fe f972 	bl	8003324 <_printf_i>
 8005040:	e7e4      	b.n	800500c <_vfiprintf_r+0x208>
 8005042:	bf00      	nop
 8005044:	08005820 	.word	0x08005820
 8005048:	08005840 	.word	0x08005840
 800504c:	08005800 	.word	0x08005800
 8005050:	080059bc 	.word	0x080059bc
 8005054:	080059c6 	.word	0x080059c6
 8005058:	08002ddd 	.word	0x08002ddd
 800505c:	08004ddf 	.word	0x08004ddf
 8005060:	080059c2 	.word	0x080059c2

08005064 <_sbrk_r>:
 8005064:	b538      	push	{r3, r4, r5, lr}
 8005066:	4d06      	ldr	r5, [pc, #24]	; (8005080 <_sbrk_r+0x1c>)
 8005068:	2300      	movs	r3, #0
 800506a:	4604      	mov	r4, r0
 800506c:	4608      	mov	r0, r1
 800506e:	602b      	str	r3, [r5, #0]
 8005070:	f7fc f972 	bl	8001358 <_sbrk>
 8005074:	1c43      	adds	r3, r0, #1
 8005076:	d102      	bne.n	800507e <_sbrk_r+0x1a>
 8005078:	682b      	ldr	r3, [r5, #0]
 800507a:	b103      	cbz	r3, 800507e <_sbrk_r+0x1a>
 800507c:	6023      	str	r3, [r4, #0]
 800507e:	bd38      	pop	{r3, r4, r5, pc}
 8005080:	20000250 	.word	0x20000250

08005084 <__sread>:
 8005084:	b510      	push	{r4, lr}
 8005086:	460c      	mov	r4, r1
 8005088:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800508c:	f000 faa8 	bl	80055e0 <_read_r>
 8005090:	2800      	cmp	r0, #0
 8005092:	bfab      	itete	ge
 8005094:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005096:	89a3      	ldrhlt	r3, [r4, #12]
 8005098:	181b      	addge	r3, r3, r0
 800509a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800509e:	bfac      	ite	ge
 80050a0:	6563      	strge	r3, [r4, #84]	; 0x54
 80050a2:	81a3      	strhlt	r3, [r4, #12]
 80050a4:	bd10      	pop	{r4, pc}

080050a6 <__swrite>:
 80050a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050aa:	461f      	mov	r7, r3
 80050ac:	898b      	ldrh	r3, [r1, #12]
 80050ae:	05db      	lsls	r3, r3, #23
 80050b0:	4605      	mov	r5, r0
 80050b2:	460c      	mov	r4, r1
 80050b4:	4616      	mov	r6, r2
 80050b6:	d505      	bpl.n	80050c4 <__swrite+0x1e>
 80050b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050bc:	2302      	movs	r3, #2
 80050be:	2200      	movs	r2, #0
 80050c0:	f000 f9f8 	bl	80054b4 <_lseek_r>
 80050c4:	89a3      	ldrh	r3, [r4, #12]
 80050c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80050ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80050ce:	81a3      	strh	r3, [r4, #12]
 80050d0:	4632      	mov	r2, r6
 80050d2:	463b      	mov	r3, r7
 80050d4:	4628      	mov	r0, r5
 80050d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80050da:	f000 b869 	b.w	80051b0 <_write_r>

080050de <__sseek>:
 80050de:	b510      	push	{r4, lr}
 80050e0:	460c      	mov	r4, r1
 80050e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050e6:	f000 f9e5 	bl	80054b4 <_lseek_r>
 80050ea:	1c43      	adds	r3, r0, #1
 80050ec:	89a3      	ldrh	r3, [r4, #12]
 80050ee:	bf15      	itete	ne
 80050f0:	6560      	strne	r0, [r4, #84]	; 0x54
 80050f2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80050f6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80050fa:	81a3      	strheq	r3, [r4, #12]
 80050fc:	bf18      	it	ne
 80050fe:	81a3      	strhne	r3, [r4, #12]
 8005100:	bd10      	pop	{r4, pc}

08005102 <__sclose>:
 8005102:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005106:	f000 b8f1 	b.w	80052ec <_close_r>
	...

0800510c <__swbuf_r>:
 800510c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800510e:	460e      	mov	r6, r1
 8005110:	4614      	mov	r4, r2
 8005112:	4605      	mov	r5, r0
 8005114:	b118      	cbz	r0, 800511e <__swbuf_r+0x12>
 8005116:	6983      	ldr	r3, [r0, #24]
 8005118:	b90b      	cbnz	r3, 800511e <__swbuf_r+0x12>
 800511a:	f7ff f913 	bl	8004344 <__sinit>
 800511e:	4b21      	ldr	r3, [pc, #132]	; (80051a4 <__swbuf_r+0x98>)
 8005120:	429c      	cmp	r4, r3
 8005122:	d12b      	bne.n	800517c <__swbuf_r+0x70>
 8005124:	686c      	ldr	r4, [r5, #4]
 8005126:	69a3      	ldr	r3, [r4, #24]
 8005128:	60a3      	str	r3, [r4, #8]
 800512a:	89a3      	ldrh	r3, [r4, #12]
 800512c:	071a      	lsls	r2, r3, #28
 800512e:	d52f      	bpl.n	8005190 <__swbuf_r+0x84>
 8005130:	6923      	ldr	r3, [r4, #16]
 8005132:	b36b      	cbz	r3, 8005190 <__swbuf_r+0x84>
 8005134:	6923      	ldr	r3, [r4, #16]
 8005136:	6820      	ldr	r0, [r4, #0]
 8005138:	1ac0      	subs	r0, r0, r3
 800513a:	6963      	ldr	r3, [r4, #20]
 800513c:	b2f6      	uxtb	r6, r6
 800513e:	4283      	cmp	r3, r0
 8005140:	4637      	mov	r7, r6
 8005142:	dc04      	bgt.n	800514e <__swbuf_r+0x42>
 8005144:	4621      	mov	r1, r4
 8005146:	4628      	mov	r0, r5
 8005148:	f000 f966 	bl	8005418 <_fflush_r>
 800514c:	bb30      	cbnz	r0, 800519c <__swbuf_r+0x90>
 800514e:	68a3      	ldr	r3, [r4, #8]
 8005150:	3b01      	subs	r3, #1
 8005152:	60a3      	str	r3, [r4, #8]
 8005154:	6823      	ldr	r3, [r4, #0]
 8005156:	1c5a      	adds	r2, r3, #1
 8005158:	6022      	str	r2, [r4, #0]
 800515a:	701e      	strb	r6, [r3, #0]
 800515c:	6963      	ldr	r3, [r4, #20]
 800515e:	3001      	adds	r0, #1
 8005160:	4283      	cmp	r3, r0
 8005162:	d004      	beq.n	800516e <__swbuf_r+0x62>
 8005164:	89a3      	ldrh	r3, [r4, #12]
 8005166:	07db      	lsls	r3, r3, #31
 8005168:	d506      	bpl.n	8005178 <__swbuf_r+0x6c>
 800516a:	2e0a      	cmp	r6, #10
 800516c:	d104      	bne.n	8005178 <__swbuf_r+0x6c>
 800516e:	4621      	mov	r1, r4
 8005170:	4628      	mov	r0, r5
 8005172:	f000 f951 	bl	8005418 <_fflush_r>
 8005176:	b988      	cbnz	r0, 800519c <__swbuf_r+0x90>
 8005178:	4638      	mov	r0, r7
 800517a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800517c:	4b0a      	ldr	r3, [pc, #40]	; (80051a8 <__swbuf_r+0x9c>)
 800517e:	429c      	cmp	r4, r3
 8005180:	d101      	bne.n	8005186 <__swbuf_r+0x7a>
 8005182:	68ac      	ldr	r4, [r5, #8]
 8005184:	e7cf      	b.n	8005126 <__swbuf_r+0x1a>
 8005186:	4b09      	ldr	r3, [pc, #36]	; (80051ac <__swbuf_r+0xa0>)
 8005188:	429c      	cmp	r4, r3
 800518a:	bf08      	it	eq
 800518c:	68ec      	ldreq	r4, [r5, #12]
 800518e:	e7ca      	b.n	8005126 <__swbuf_r+0x1a>
 8005190:	4621      	mov	r1, r4
 8005192:	4628      	mov	r0, r5
 8005194:	f000 f81e 	bl	80051d4 <__swsetup_r>
 8005198:	2800      	cmp	r0, #0
 800519a:	d0cb      	beq.n	8005134 <__swbuf_r+0x28>
 800519c:	f04f 37ff 	mov.w	r7, #4294967295
 80051a0:	e7ea      	b.n	8005178 <__swbuf_r+0x6c>
 80051a2:	bf00      	nop
 80051a4:	08005820 	.word	0x08005820
 80051a8:	08005840 	.word	0x08005840
 80051ac:	08005800 	.word	0x08005800

080051b0 <_write_r>:
 80051b0:	b538      	push	{r3, r4, r5, lr}
 80051b2:	4d07      	ldr	r5, [pc, #28]	; (80051d0 <_write_r+0x20>)
 80051b4:	4604      	mov	r4, r0
 80051b6:	4608      	mov	r0, r1
 80051b8:	4611      	mov	r1, r2
 80051ba:	2200      	movs	r2, #0
 80051bc:	602a      	str	r2, [r5, #0]
 80051be:	461a      	mov	r2, r3
 80051c0:	f7fb ff34 	bl	800102c <_write>
 80051c4:	1c43      	adds	r3, r0, #1
 80051c6:	d102      	bne.n	80051ce <_write_r+0x1e>
 80051c8:	682b      	ldr	r3, [r5, #0]
 80051ca:	b103      	cbz	r3, 80051ce <_write_r+0x1e>
 80051cc:	6023      	str	r3, [r4, #0]
 80051ce:	bd38      	pop	{r3, r4, r5, pc}
 80051d0:	20000250 	.word	0x20000250

080051d4 <__swsetup_r>:
 80051d4:	4b32      	ldr	r3, [pc, #200]	; (80052a0 <__swsetup_r+0xcc>)
 80051d6:	b570      	push	{r4, r5, r6, lr}
 80051d8:	681d      	ldr	r5, [r3, #0]
 80051da:	4606      	mov	r6, r0
 80051dc:	460c      	mov	r4, r1
 80051de:	b125      	cbz	r5, 80051ea <__swsetup_r+0x16>
 80051e0:	69ab      	ldr	r3, [r5, #24]
 80051e2:	b913      	cbnz	r3, 80051ea <__swsetup_r+0x16>
 80051e4:	4628      	mov	r0, r5
 80051e6:	f7ff f8ad 	bl	8004344 <__sinit>
 80051ea:	4b2e      	ldr	r3, [pc, #184]	; (80052a4 <__swsetup_r+0xd0>)
 80051ec:	429c      	cmp	r4, r3
 80051ee:	d10f      	bne.n	8005210 <__swsetup_r+0x3c>
 80051f0:	686c      	ldr	r4, [r5, #4]
 80051f2:	89a3      	ldrh	r3, [r4, #12]
 80051f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80051f8:	0719      	lsls	r1, r3, #28
 80051fa:	d42c      	bmi.n	8005256 <__swsetup_r+0x82>
 80051fc:	06dd      	lsls	r5, r3, #27
 80051fe:	d411      	bmi.n	8005224 <__swsetup_r+0x50>
 8005200:	2309      	movs	r3, #9
 8005202:	6033      	str	r3, [r6, #0]
 8005204:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005208:	81a3      	strh	r3, [r4, #12]
 800520a:	f04f 30ff 	mov.w	r0, #4294967295
 800520e:	e03e      	b.n	800528e <__swsetup_r+0xba>
 8005210:	4b25      	ldr	r3, [pc, #148]	; (80052a8 <__swsetup_r+0xd4>)
 8005212:	429c      	cmp	r4, r3
 8005214:	d101      	bne.n	800521a <__swsetup_r+0x46>
 8005216:	68ac      	ldr	r4, [r5, #8]
 8005218:	e7eb      	b.n	80051f2 <__swsetup_r+0x1e>
 800521a:	4b24      	ldr	r3, [pc, #144]	; (80052ac <__swsetup_r+0xd8>)
 800521c:	429c      	cmp	r4, r3
 800521e:	bf08      	it	eq
 8005220:	68ec      	ldreq	r4, [r5, #12]
 8005222:	e7e6      	b.n	80051f2 <__swsetup_r+0x1e>
 8005224:	0758      	lsls	r0, r3, #29
 8005226:	d512      	bpl.n	800524e <__swsetup_r+0x7a>
 8005228:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800522a:	b141      	cbz	r1, 800523e <__swsetup_r+0x6a>
 800522c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005230:	4299      	cmp	r1, r3
 8005232:	d002      	beq.n	800523a <__swsetup_r+0x66>
 8005234:	4630      	mov	r0, r6
 8005236:	f7ff fcdb 	bl	8004bf0 <_free_r>
 800523a:	2300      	movs	r3, #0
 800523c:	6363      	str	r3, [r4, #52]	; 0x34
 800523e:	89a3      	ldrh	r3, [r4, #12]
 8005240:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005244:	81a3      	strh	r3, [r4, #12]
 8005246:	2300      	movs	r3, #0
 8005248:	6063      	str	r3, [r4, #4]
 800524a:	6923      	ldr	r3, [r4, #16]
 800524c:	6023      	str	r3, [r4, #0]
 800524e:	89a3      	ldrh	r3, [r4, #12]
 8005250:	f043 0308 	orr.w	r3, r3, #8
 8005254:	81a3      	strh	r3, [r4, #12]
 8005256:	6923      	ldr	r3, [r4, #16]
 8005258:	b94b      	cbnz	r3, 800526e <__swsetup_r+0x9a>
 800525a:	89a3      	ldrh	r3, [r4, #12]
 800525c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005260:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005264:	d003      	beq.n	800526e <__swsetup_r+0x9a>
 8005266:	4621      	mov	r1, r4
 8005268:	4630      	mov	r0, r6
 800526a:	f000 f95b 	bl	8005524 <__smakebuf_r>
 800526e:	89a0      	ldrh	r0, [r4, #12]
 8005270:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005274:	f010 0301 	ands.w	r3, r0, #1
 8005278:	d00a      	beq.n	8005290 <__swsetup_r+0xbc>
 800527a:	2300      	movs	r3, #0
 800527c:	60a3      	str	r3, [r4, #8]
 800527e:	6963      	ldr	r3, [r4, #20]
 8005280:	425b      	negs	r3, r3
 8005282:	61a3      	str	r3, [r4, #24]
 8005284:	6923      	ldr	r3, [r4, #16]
 8005286:	b943      	cbnz	r3, 800529a <__swsetup_r+0xc6>
 8005288:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800528c:	d1ba      	bne.n	8005204 <__swsetup_r+0x30>
 800528e:	bd70      	pop	{r4, r5, r6, pc}
 8005290:	0781      	lsls	r1, r0, #30
 8005292:	bf58      	it	pl
 8005294:	6963      	ldrpl	r3, [r4, #20]
 8005296:	60a3      	str	r3, [r4, #8]
 8005298:	e7f4      	b.n	8005284 <__swsetup_r+0xb0>
 800529a:	2000      	movs	r0, #0
 800529c:	e7f7      	b.n	800528e <__swsetup_r+0xba>
 800529e:	bf00      	nop
 80052a0:	2000000c 	.word	0x2000000c
 80052a4:	08005820 	.word	0x08005820
 80052a8:	08005840 	.word	0x08005840
 80052ac:	08005800 	.word	0x08005800

080052b0 <__assert_func>:
 80052b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80052b2:	4614      	mov	r4, r2
 80052b4:	461a      	mov	r2, r3
 80052b6:	4b09      	ldr	r3, [pc, #36]	; (80052dc <__assert_func+0x2c>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4605      	mov	r5, r0
 80052bc:	68d8      	ldr	r0, [r3, #12]
 80052be:	b14c      	cbz	r4, 80052d4 <__assert_func+0x24>
 80052c0:	4b07      	ldr	r3, [pc, #28]	; (80052e0 <__assert_func+0x30>)
 80052c2:	9100      	str	r1, [sp, #0]
 80052c4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80052c8:	4906      	ldr	r1, [pc, #24]	; (80052e4 <__assert_func+0x34>)
 80052ca:	462b      	mov	r3, r5
 80052cc:	f000 f8e0 	bl	8005490 <fiprintf>
 80052d0:	f000 f9a5 	bl	800561e <abort>
 80052d4:	4b04      	ldr	r3, [pc, #16]	; (80052e8 <__assert_func+0x38>)
 80052d6:	461c      	mov	r4, r3
 80052d8:	e7f3      	b.n	80052c2 <__assert_func+0x12>
 80052da:	bf00      	nop
 80052dc:	2000000c 	.word	0x2000000c
 80052e0:	080059cd 	.word	0x080059cd
 80052e4:	080059da 	.word	0x080059da
 80052e8:	08005a08 	.word	0x08005a08

080052ec <_close_r>:
 80052ec:	b538      	push	{r3, r4, r5, lr}
 80052ee:	4d06      	ldr	r5, [pc, #24]	; (8005308 <_close_r+0x1c>)
 80052f0:	2300      	movs	r3, #0
 80052f2:	4604      	mov	r4, r0
 80052f4:	4608      	mov	r0, r1
 80052f6:	602b      	str	r3, [r5, #0]
 80052f8:	f7fb fff9 	bl	80012ee <_close>
 80052fc:	1c43      	adds	r3, r0, #1
 80052fe:	d102      	bne.n	8005306 <_close_r+0x1a>
 8005300:	682b      	ldr	r3, [r5, #0]
 8005302:	b103      	cbz	r3, 8005306 <_close_r+0x1a>
 8005304:	6023      	str	r3, [r4, #0]
 8005306:	bd38      	pop	{r3, r4, r5, pc}
 8005308:	20000250 	.word	0x20000250

0800530c <__sflush_r>:
 800530c:	898a      	ldrh	r2, [r1, #12]
 800530e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005312:	4605      	mov	r5, r0
 8005314:	0710      	lsls	r0, r2, #28
 8005316:	460c      	mov	r4, r1
 8005318:	d458      	bmi.n	80053cc <__sflush_r+0xc0>
 800531a:	684b      	ldr	r3, [r1, #4]
 800531c:	2b00      	cmp	r3, #0
 800531e:	dc05      	bgt.n	800532c <__sflush_r+0x20>
 8005320:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005322:	2b00      	cmp	r3, #0
 8005324:	dc02      	bgt.n	800532c <__sflush_r+0x20>
 8005326:	2000      	movs	r0, #0
 8005328:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800532c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800532e:	2e00      	cmp	r6, #0
 8005330:	d0f9      	beq.n	8005326 <__sflush_r+0x1a>
 8005332:	2300      	movs	r3, #0
 8005334:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005338:	682f      	ldr	r7, [r5, #0]
 800533a:	602b      	str	r3, [r5, #0]
 800533c:	d032      	beq.n	80053a4 <__sflush_r+0x98>
 800533e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005340:	89a3      	ldrh	r3, [r4, #12]
 8005342:	075a      	lsls	r2, r3, #29
 8005344:	d505      	bpl.n	8005352 <__sflush_r+0x46>
 8005346:	6863      	ldr	r3, [r4, #4]
 8005348:	1ac0      	subs	r0, r0, r3
 800534a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800534c:	b10b      	cbz	r3, 8005352 <__sflush_r+0x46>
 800534e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005350:	1ac0      	subs	r0, r0, r3
 8005352:	2300      	movs	r3, #0
 8005354:	4602      	mov	r2, r0
 8005356:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005358:	6a21      	ldr	r1, [r4, #32]
 800535a:	4628      	mov	r0, r5
 800535c:	47b0      	blx	r6
 800535e:	1c43      	adds	r3, r0, #1
 8005360:	89a3      	ldrh	r3, [r4, #12]
 8005362:	d106      	bne.n	8005372 <__sflush_r+0x66>
 8005364:	6829      	ldr	r1, [r5, #0]
 8005366:	291d      	cmp	r1, #29
 8005368:	d82c      	bhi.n	80053c4 <__sflush_r+0xb8>
 800536a:	4a2a      	ldr	r2, [pc, #168]	; (8005414 <__sflush_r+0x108>)
 800536c:	40ca      	lsrs	r2, r1
 800536e:	07d6      	lsls	r6, r2, #31
 8005370:	d528      	bpl.n	80053c4 <__sflush_r+0xb8>
 8005372:	2200      	movs	r2, #0
 8005374:	6062      	str	r2, [r4, #4]
 8005376:	04d9      	lsls	r1, r3, #19
 8005378:	6922      	ldr	r2, [r4, #16]
 800537a:	6022      	str	r2, [r4, #0]
 800537c:	d504      	bpl.n	8005388 <__sflush_r+0x7c>
 800537e:	1c42      	adds	r2, r0, #1
 8005380:	d101      	bne.n	8005386 <__sflush_r+0x7a>
 8005382:	682b      	ldr	r3, [r5, #0]
 8005384:	b903      	cbnz	r3, 8005388 <__sflush_r+0x7c>
 8005386:	6560      	str	r0, [r4, #84]	; 0x54
 8005388:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800538a:	602f      	str	r7, [r5, #0]
 800538c:	2900      	cmp	r1, #0
 800538e:	d0ca      	beq.n	8005326 <__sflush_r+0x1a>
 8005390:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005394:	4299      	cmp	r1, r3
 8005396:	d002      	beq.n	800539e <__sflush_r+0x92>
 8005398:	4628      	mov	r0, r5
 800539a:	f7ff fc29 	bl	8004bf0 <_free_r>
 800539e:	2000      	movs	r0, #0
 80053a0:	6360      	str	r0, [r4, #52]	; 0x34
 80053a2:	e7c1      	b.n	8005328 <__sflush_r+0x1c>
 80053a4:	6a21      	ldr	r1, [r4, #32]
 80053a6:	2301      	movs	r3, #1
 80053a8:	4628      	mov	r0, r5
 80053aa:	47b0      	blx	r6
 80053ac:	1c41      	adds	r1, r0, #1
 80053ae:	d1c7      	bne.n	8005340 <__sflush_r+0x34>
 80053b0:	682b      	ldr	r3, [r5, #0]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d0c4      	beq.n	8005340 <__sflush_r+0x34>
 80053b6:	2b1d      	cmp	r3, #29
 80053b8:	d001      	beq.n	80053be <__sflush_r+0xb2>
 80053ba:	2b16      	cmp	r3, #22
 80053bc:	d101      	bne.n	80053c2 <__sflush_r+0xb6>
 80053be:	602f      	str	r7, [r5, #0]
 80053c0:	e7b1      	b.n	8005326 <__sflush_r+0x1a>
 80053c2:	89a3      	ldrh	r3, [r4, #12]
 80053c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80053c8:	81a3      	strh	r3, [r4, #12]
 80053ca:	e7ad      	b.n	8005328 <__sflush_r+0x1c>
 80053cc:	690f      	ldr	r7, [r1, #16]
 80053ce:	2f00      	cmp	r7, #0
 80053d0:	d0a9      	beq.n	8005326 <__sflush_r+0x1a>
 80053d2:	0793      	lsls	r3, r2, #30
 80053d4:	680e      	ldr	r6, [r1, #0]
 80053d6:	bf08      	it	eq
 80053d8:	694b      	ldreq	r3, [r1, #20]
 80053da:	600f      	str	r7, [r1, #0]
 80053dc:	bf18      	it	ne
 80053de:	2300      	movne	r3, #0
 80053e0:	eba6 0807 	sub.w	r8, r6, r7
 80053e4:	608b      	str	r3, [r1, #8]
 80053e6:	f1b8 0f00 	cmp.w	r8, #0
 80053ea:	dd9c      	ble.n	8005326 <__sflush_r+0x1a>
 80053ec:	6a21      	ldr	r1, [r4, #32]
 80053ee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80053f0:	4643      	mov	r3, r8
 80053f2:	463a      	mov	r2, r7
 80053f4:	4628      	mov	r0, r5
 80053f6:	47b0      	blx	r6
 80053f8:	2800      	cmp	r0, #0
 80053fa:	dc06      	bgt.n	800540a <__sflush_r+0xfe>
 80053fc:	89a3      	ldrh	r3, [r4, #12]
 80053fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005402:	81a3      	strh	r3, [r4, #12]
 8005404:	f04f 30ff 	mov.w	r0, #4294967295
 8005408:	e78e      	b.n	8005328 <__sflush_r+0x1c>
 800540a:	4407      	add	r7, r0
 800540c:	eba8 0800 	sub.w	r8, r8, r0
 8005410:	e7e9      	b.n	80053e6 <__sflush_r+0xda>
 8005412:	bf00      	nop
 8005414:	20400001 	.word	0x20400001

08005418 <_fflush_r>:
 8005418:	b538      	push	{r3, r4, r5, lr}
 800541a:	690b      	ldr	r3, [r1, #16]
 800541c:	4605      	mov	r5, r0
 800541e:	460c      	mov	r4, r1
 8005420:	b913      	cbnz	r3, 8005428 <_fflush_r+0x10>
 8005422:	2500      	movs	r5, #0
 8005424:	4628      	mov	r0, r5
 8005426:	bd38      	pop	{r3, r4, r5, pc}
 8005428:	b118      	cbz	r0, 8005432 <_fflush_r+0x1a>
 800542a:	6983      	ldr	r3, [r0, #24]
 800542c:	b90b      	cbnz	r3, 8005432 <_fflush_r+0x1a>
 800542e:	f7fe ff89 	bl	8004344 <__sinit>
 8005432:	4b14      	ldr	r3, [pc, #80]	; (8005484 <_fflush_r+0x6c>)
 8005434:	429c      	cmp	r4, r3
 8005436:	d11b      	bne.n	8005470 <_fflush_r+0x58>
 8005438:	686c      	ldr	r4, [r5, #4]
 800543a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d0ef      	beq.n	8005422 <_fflush_r+0xa>
 8005442:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005444:	07d0      	lsls	r0, r2, #31
 8005446:	d404      	bmi.n	8005452 <_fflush_r+0x3a>
 8005448:	0599      	lsls	r1, r3, #22
 800544a:	d402      	bmi.n	8005452 <_fflush_r+0x3a>
 800544c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800544e:	f7ff f81c 	bl	800448a <__retarget_lock_acquire_recursive>
 8005452:	4628      	mov	r0, r5
 8005454:	4621      	mov	r1, r4
 8005456:	f7ff ff59 	bl	800530c <__sflush_r>
 800545a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800545c:	07da      	lsls	r2, r3, #31
 800545e:	4605      	mov	r5, r0
 8005460:	d4e0      	bmi.n	8005424 <_fflush_r+0xc>
 8005462:	89a3      	ldrh	r3, [r4, #12]
 8005464:	059b      	lsls	r3, r3, #22
 8005466:	d4dd      	bmi.n	8005424 <_fflush_r+0xc>
 8005468:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800546a:	f7ff f80f 	bl	800448c <__retarget_lock_release_recursive>
 800546e:	e7d9      	b.n	8005424 <_fflush_r+0xc>
 8005470:	4b05      	ldr	r3, [pc, #20]	; (8005488 <_fflush_r+0x70>)
 8005472:	429c      	cmp	r4, r3
 8005474:	d101      	bne.n	800547a <_fflush_r+0x62>
 8005476:	68ac      	ldr	r4, [r5, #8]
 8005478:	e7df      	b.n	800543a <_fflush_r+0x22>
 800547a:	4b04      	ldr	r3, [pc, #16]	; (800548c <_fflush_r+0x74>)
 800547c:	429c      	cmp	r4, r3
 800547e:	bf08      	it	eq
 8005480:	68ec      	ldreq	r4, [r5, #12]
 8005482:	e7da      	b.n	800543a <_fflush_r+0x22>
 8005484:	08005820 	.word	0x08005820
 8005488:	08005840 	.word	0x08005840
 800548c:	08005800 	.word	0x08005800

08005490 <fiprintf>:
 8005490:	b40e      	push	{r1, r2, r3}
 8005492:	b503      	push	{r0, r1, lr}
 8005494:	4601      	mov	r1, r0
 8005496:	ab03      	add	r3, sp, #12
 8005498:	4805      	ldr	r0, [pc, #20]	; (80054b0 <fiprintf+0x20>)
 800549a:	f853 2b04 	ldr.w	r2, [r3], #4
 800549e:	6800      	ldr	r0, [r0, #0]
 80054a0:	9301      	str	r3, [sp, #4]
 80054a2:	f7ff fcaf 	bl	8004e04 <_vfiprintf_r>
 80054a6:	b002      	add	sp, #8
 80054a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80054ac:	b003      	add	sp, #12
 80054ae:	4770      	bx	lr
 80054b0:	2000000c 	.word	0x2000000c

080054b4 <_lseek_r>:
 80054b4:	b538      	push	{r3, r4, r5, lr}
 80054b6:	4d07      	ldr	r5, [pc, #28]	; (80054d4 <_lseek_r+0x20>)
 80054b8:	4604      	mov	r4, r0
 80054ba:	4608      	mov	r0, r1
 80054bc:	4611      	mov	r1, r2
 80054be:	2200      	movs	r2, #0
 80054c0:	602a      	str	r2, [r5, #0]
 80054c2:	461a      	mov	r2, r3
 80054c4:	f7fb ff3a 	bl	800133c <_lseek>
 80054c8:	1c43      	adds	r3, r0, #1
 80054ca:	d102      	bne.n	80054d2 <_lseek_r+0x1e>
 80054cc:	682b      	ldr	r3, [r5, #0]
 80054ce:	b103      	cbz	r3, 80054d2 <_lseek_r+0x1e>
 80054d0:	6023      	str	r3, [r4, #0]
 80054d2:	bd38      	pop	{r3, r4, r5, pc}
 80054d4:	20000250 	.word	0x20000250

080054d8 <__swhatbuf_r>:
 80054d8:	b570      	push	{r4, r5, r6, lr}
 80054da:	460e      	mov	r6, r1
 80054dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054e0:	2900      	cmp	r1, #0
 80054e2:	b096      	sub	sp, #88	; 0x58
 80054e4:	4614      	mov	r4, r2
 80054e6:	461d      	mov	r5, r3
 80054e8:	da08      	bge.n	80054fc <__swhatbuf_r+0x24>
 80054ea:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80054ee:	2200      	movs	r2, #0
 80054f0:	602a      	str	r2, [r5, #0]
 80054f2:	061a      	lsls	r2, r3, #24
 80054f4:	d410      	bmi.n	8005518 <__swhatbuf_r+0x40>
 80054f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80054fa:	e00e      	b.n	800551a <__swhatbuf_r+0x42>
 80054fc:	466a      	mov	r2, sp
 80054fe:	f000 f895 	bl	800562c <_fstat_r>
 8005502:	2800      	cmp	r0, #0
 8005504:	dbf1      	blt.n	80054ea <__swhatbuf_r+0x12>
 8005506:	9a01      	ldr	r2, [sp, #4]
 8005508:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800550c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005510:	425a      	negs	r2, r3
 8005512:	415a      	adcs	r2, r3
 8005514:	602a      	str	r2, [r5, #0]
 8005516:	e7ee      	b.n	80054f6 <__swhatbuf_r+0x1e>
 8005518:	2340      	movs	r3, #64	; 0x40
 800551a:	2000      	movs	r0, #0
 800551c:	6023      	str	r3, [r4, #0]
 800551e:	b016      	add	sp, #88	; 0x58
 8005520:	bd70      	pop	{r4, r5, r6, pc}
	...

08005524 <__smakebuf_r>:
 8005524:	898b      	ldrh	r3, [r1, #12]
 8005526:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005528:	079d      	lsls	r5, r3, #30
 800552a:	4606      	mov	r6, r0
 800552c:	460c      	mov	r4, r1
 800552e:	d507      	bpl.n	8005540 <__smakebuf_r+0x1c>
 8005530:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005534:	6023      	str	r3, [r4, #0]
 8005536:	6123      	str	r3, [r4, #16]
 8005538:	2301      	movs	r3, #1
 800553a:	6163      	str	r3, [r4, #20]
 800553c:	b002      	add	sp, #8
 800553e:	bd70      	pop	{r4, r5, r6, pc}
 8005540:	ab01      	add	r3, sp, #4
 8005542:	466a      	mov	r2, sp
 8005544:	f7ff ffc8 	bl	80054d8 <__swhatbuf_r>
 8005548:	9900      	ldr	r1, [sp, #0]
 800554a:	4605      	mov	r5, r0
 800554c:	4630      	mov	r0, r6
 800554e:	f7ff fbbb 	bl	8004cc8 <_malloc_r>
 8005552:	b948      	cbnz	r0, 8005568 <__smakebuf_r+0x44>
 8005554:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005558:	059a      	lsls	r2, r3, #22
 800555a:	d4ef      	bmi.n	800553c <__smakebuf_r+0x18>
 800555c:	f023 0303 	bic.w	r3, r3, #3
 8005560:	f043 0302 	orr.w	r3, r3, #2
 8005564:	81a3      	strh	r3, [r4, #12]
 8005566:	e7e3      	b.n	8005530 <__smakebuf_r+0xc>
 8005568:	4b0d      	ldr	r3, [pc, #52]	; (80055a0 <__smakebuf_r+0x7c>)
 800556a:	62b3      	str	r3, [r6, #40]	; 0x28
 800556c:	89a3      	ldrh	r3, [r4, #12]
 800556e:	6020      	str	r0, [r4, #0]
 8005570:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005574:	81a3      	strh	r3, [r4, #12]
 8005576:	9b00      	ldr	r3, [sp, #0]
 8005578:	6163      	str	r3, [r4, #20]
 800557a:	9b01      	ldr	r3, [sp, #4]
 800557c:	6120      	str	r0, [r4, #16]
 800557e:	b15b      	cbz	r3, 8005598 <__smakebuf_r+0x74>
 8005580:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005584:	4630      	mov	r0, r6
 8005586:	f000 f863 	bl	8005650 <_isatty_r>
 800558a:	b128      	cbz	r0, 8005598 <__smakebuf_r+0x74>
 800558c:	89a3      	ldrh	r3, [r4, #12]
 800558e:	f023 0303 	bic.w	r3, r3, #3
 8005592:	f043 0301 	orr.w	r3, r3, #1
 8005596:	81a3      	strh	r3, [r4, #12]
 8005598:	89a0      	ldrh	r0, [r4, #12]
 800559a:	4305      	orrs	r5, r0
 800559c:	81a5      	strh	r5, [r4, #12]
 800559e:	e7cd      	b.n	800553c <__smakebuf_r+0x18>
 80055a0:	080042dd 	.word	0x080042dd

080055a4 <__ascii_mbtowc>:
 80055a4:	b082      	sub	sp, #8
 80055a6:	b901      	cbnz	r1, 80055aa <__ascii_mbtowc+0x6>
 80055a8:	a901      	add	r1, sp, #4
 80055aa:	b142      	cbz	r2, 80055be <__ascii_mbtowc+0x1a>
 80055ac:	b14b      	cbz	r3, 80055c2 <__ascii_mbtowc+0x1e>
 80055ae:	7813      	ldrb	r3, [r2, #0]
 80055b0:	600b      	str	r3, [r1, #0]
 80055b2:	7812      	ldrb	r2, [r2, #0]
 80055b4:	1e10      	subs	r0, r2, #0
 80055b6:	bf18      	it	ne
 80055b8:	2001      	movne	r0, #1
 80055ba:	b002      	add	sp, #8
 80055bc:	4770      	bx	lr
 80055be:	4610      	mov	r0, r2
 80055c0:	e7fb      	b.n	80055ba <__ascii_mbtowc+0x16>
 80055c2:	f06f 0001 	mvn.w	r0, #1
 80055c6:	e7f8      	b.n	80055ba <__ascii_mbtowc+0x16>

080055c8 <__malloc_lock>:
 80055c8:	4801      	ldr	r0, [pc, #4]	; (80055d0 <__malloc_lock+0x8>)
 80055ca:	f7fe bf5e 	b.w	800448a <__retarget_lock_acquire_recursive>
 80055ce:	bf00      	nop
 80055d0:	20000244 	.word	0x20000244

080055d4 <__malloc_unlock>:
 80055d4:	4801      	ldr	r0, [pc, #4]	; (80055dc <__malloc_unlock+0x8>)
 80055d6:	f7fe bf59 	b.w	800448c <__retarget_lock_release_recursive>
 80055da:	bf00      	nop
 80055dc:	20000244 	.word	0x20000244

080055e0 <_read_r>:
 80055e0:	b538      	push	{r3, r4, r5, lr}
 80055e2:	4d07      	ldr	r5, [pc, #28]	; (8005600 <_read_r+0x20>)
 80055e4:	4604      	mov	r4, r0
 80055e6:	4608      	mov	r0, r1
 80055e8:	4611      	mov	r1, r2
 80055ea:	2200      	movs	r2, #0
 80055ec:	602a      	str	r2, [r5, #0]
 80055ee:	461a      	mov	r2, r3
 80055f0:	f7fb fe60 	bl	80012b4 <_read>
 80055f4:	1c43      	adds	r3, r0, #1
 80055f6:	d102      	bne.n	80055fe <_read_r+0x1e>
 80055f8:	682b      	ldr	r3, [r5, #0]
 80055fa:	b103      	cbz	r3, 80055fe <_read_r+0x1e>
 80055fc:	6023      	str	r3, [r4, #0]
 80055fe:	bd38      	pop	{r3, r4, r5, pc}
 8005600:	20000250 	.word	0x20000250

08005604 <__ascii_wctomb>:
 8005604:	b149      	cbz	r1, 800561a <__ascii_wctomb+0x16>
 8005606:	2aff      	cmp	r2, #255	; 0xff
 8005608:	bf85      	ittet	hi
 800560a:	238a      	movhi	r3, #138	; 0x8a
 800560c:	6003      	strhi	r3, [r0, #0]
 800560e:	700a      	strbls	r2, [r1, #0]
 8005610:	f04f 30ff 	movhi.w	r0, #4294967295
 8005614:	bf98      	it	ls
 8005616:	2001      	movls	r0, #1
 8005618:	4770      	bx	lr
 800561a:	4608      	mov	r0, r1
 800561c:	4770      	bx	lr

0800561e <abort>:
 800561e:	b508      	push	{r3, lr}
 8005620:	2006      	movs	r0, #6
 8005622:	f000 f84d 	bl	80056c0 <raise>
 8005626:	2001      	movs	r0, #1
 8005628:	f7fb fe3a 	bl	80012a0 <_exit>

0800562c <_fstat_r>:
 800562c:	b538      	push	{r3, r4, r5, lr}
 800562e:	4d07      	ldr	r5, [pc, #28]	; (800564c <_fstat_r+0x20>)
 8005630:	2300      	movs	r3, #0
 8005632:	4604      	mov	r4, r0
 8005634:	4608      	mov	r0, r1
 8005636:	4611      	mov	r1, r2
 8005638:	602b      	str	r3, [r5, #0]
 800563a:	f7fb fe64 	bl	8001306 <_fstat>
 800563e:	1c43      	adds	r3, r0, #1
 8005640:	d102      	bne.n	8005648 <_fstat_r+0x1c>
 8005642:	682b      	ldr	r3, [r5, #0]
 8005644:	b103      	cbz	r3, 8005648 <_fstat_r+0x1c>
 8005646:	6023      	str	r3, [r4, #0]
 8005648:	bd38      	pop	{r3, r4, r5, pc}
 800564a:	bf00      	nop
 800564c:	20000250 	.word	0x20000250

08005650 <_isatty_r>:
 8005650:	b538      	push	{r3, r4, r5, lr}
 8005652:	4d06      	ldr	r5, [pc, #24]	; (800566c <_isatty_r+0x1c>)
 8005654:	2300      	movs	r3, #0
 8005656:	4604      	mov	r4, r0
 8005658:	4608      	mov	r0, r1
 800565a:	602b      	str	r3, [r5, #0]
 800565c:	f7fb fe63 	bl	8001326 <_isatty>
 8005660:	1c43      	adds	r3, r0, #1
 8005662:	d102      	bne.n	800566a <_isatty_r+0x1a>
 8005664:	682b      	ldr	r3, [r5, #0]
 8005666:	b103      	cbz	r3, 800566a <_isatty_r+0x1a>
 8005668:	6023      	str	r3, [r4, #0]
 800566a:	bd38      	pop	{r3, r4, r5, pc}
 800566c:	20000250 	.word	0x20000250

08005670 <_raise_r>:
 8005670:	291f      	cmp	r1, #31
 8005672:	b538      	push	{r3, r4, r5, lr}
 8005674:	4604      	mov	r4, r0
 8005676:	460d      	mov	r5, r1
 8005678:	d904      	bls.n	8005684 <_raise_r+0x14>
 800567a:	2316      	movs	r3, #22
 800567c:	6003      	str	r3, [r0, #0]
 800567e:	f04f 30ff 	mov.w	r0, #4294967295
 8005682:	bd38      	pop	{r3, r4, r5, pc}
 8005684:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005686:	b112      	cbz	r2, 800568e <_raise_r+0x1e>
 8005688:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800568c:	b94b      	cbnz	r3, 80056a2 <_raise_r+0x32>
 800568e:	4620      	mov	r0, r4
 8005690:	f000 f830 	bl	80056f4 <_getpid_r>
 8005694:	462a      	mov	r2, r5
 8005696:	4601      	mov	r1, r0
 8005698:	4620      	mov	r0, r4
 800569a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800569e:	f000 b817 	b.w	80056d0 <_kill_r>
 80056a2:	2b01      	cmp	r3, #1
 80056a4:	d00a      	beq.n	80056bc <_raise_r+0x4c>
 80056a6:	1c59      	adds	r1, r3, #1
 80056a8:	d103      	bne.n	80056b2 <_raise_r+0x42>
 80056aa:	2316      	movs	r3, #22
 80056ac:	6003      	str	r3, [r0, #0]
 80056ae:	2001      	movs	r0, #1
 80056b0:	e7e7      	b.n	8005682 <_raise_r+0x12>
 80056b2:	2400      	movs	r4, #0
 80056b4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80056b8:	4628      	mov	r0, r5
 80056ba:	4798      	blx	r3
 80056bc:	2000      	movs	r0, #0
 80056be:	e7e0      	b.n	8005682 <_raise_r+0x12>

080056c0 <raise>:
 80056c0:	4b02      	ldr	r3, [pc, #8]	; (80056cc <raise+0xc>)
 80056c2:	4601      	mov	r1, r0
 80056c4:	6818      	ldr	r0, [r3, #0]
 80056c6:	f7ff bfd3 	b.w	8005670 <_raise_r>
 80056ca:	bf00      	nop
 80056cc:	2000000c 	.word	0x2000000c

080056d0 <_kill_r>:
 80056d0:	b538      	push	{r3, r4, r5, lr}
 80056d2:	4d07      	ldr	r5, [pc, #28]	; (80056f0 <_kill_r+0x20>)
 80056d4:	2300      	movs	r3, #0
 80056d6:	4604      	mov	r4, r0
 80056d8:	4608      	mov	r0, r1
 80056da:	4611      	mov	r1, r2
 80056dc:	602b      	str	r3, [r5, #0]
 80056de:	f7fb fdcf 	bl	8001280 <_kill>
 80056e2:	1c43      	adds	r3, r0, #1
 80056e4:	d102      	bne.n	80056ec <_kill_r+0x1c>
 80056e6:	682b      	ldr	r3, [r5, #0]
 80056e8:	b103      	cbz	r3, 80056ec <_kill_r+0x1c>
 80056ea:	6023      	str	r3, [r4, #0]
 80056ec:	bd38      	pop	{r3, r4, r5, pc}
 80056ee:	bf00      	nop
 80056f0:	20000250 	.word	0x20000250

080056f4 <_getpid_r>:
 80056f4:	f7fb bdbc 	b.w	8001270 <_getpid>

080056f8 <_init>:
 80056f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056fa:	bf00      	nop
 80056fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056fe:	bc08      	pop	{r3}
 8005700:	469e      	mov	lr, r3
 8005702:	4770      	bx	lr

08005704 <_fini>:
 8005704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005706:	bf00      	nop
 8005708:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800570a:	bc08      	pop	{r3}
 800570c:	469e      	mov	lr, r3
 800570e:	4770      	bx	lr
